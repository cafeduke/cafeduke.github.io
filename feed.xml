<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-12-19T08:51:23+00:00</updated><id>/feed.xml</id><title type="html">Cafe Duke Notes</title><subtitle>Duke notes. Happy learning!</subtitle><author><name>Raghunandan.Seshadri</name></author><entry><title type="html"></title><link href="/2022/12/19/2021-04-27-drf.html" rel="alternate" type="text/html" title="" /><published>2022-12-19T08:51:23+00:00</published><updated>2022-12-19T08:51:23+00:00</updated><id>/2022/12/19/2021-04-27-drf</id><content type="html" xml:base="/2022/12/19/2021-04-27-drf.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#installation" id="markdown-toc-installation">Installation</a>    <ol>
      <li><a href="#install-anaconda" id="markdown-toc-install-anaconda">Install Anaconda</a></li>
      <li><a href="#install-drf" id="markdown-toc-install-drf">Install DRF</a></li>
      <li><a href="#install-mysql" id="markdown-toc-install-mysql">Install MySQL</a></li>
      <li><a href="#install-mysqlclient" id="markdown-toc-install-mysqlclient">Install MySQLClient</a></li>
    </ol>
  </li>
  <li><a href="#drf-project-and-app" id="markdown-toc-drf-project-and-app">DRF project and app</a>    <ol>
      <li><a href="#create-project" id="markdown-toc-create-project">Create project</a></li>
      <li><a href="#create-app-inside-project" id="markdown-toc-create-app-inside-project">Create app inside project</a></li>
      <li><a href="#directory-structure" id="markdown-toc-directory-structure">Directory Structure</a></li>
      <li><a href="#function-based-view-fbv" id="markdown-toc-function-based-view-fbv">Function based view (FBV)</a>        <ol>
          <li><a href="#configure-settings" id="markdown-toc-configure-settings">Configure Settings</a></li>
          <li><a href="#create-view" id="markdown-toc-create-view">Create View</a></li>
          <li><a href="#configure-urls-in-app" id="markdown-toc-configure-urls-in-app">Configure URLs in app</a></li>
          <li><a href="#configure-urls-in-setup" id="markdown-toc-configure-urls-in-setup">Configure URLs in setup</a></li>
          <li><a href="#start-app" id="markdown-toc-start-app">Start App</a></li>
          <li><a href="#verify-requestresponse" id="markdown-toc-verify-requestresponse">Verify request/response</a></li>
        </ol>
      </li>
      <li><a href="#fbv-with-model" id="markdown-toc-fbv-with-model">FBV with Model</a>        <ol>
          <li><a href="#create-model-class" id="markdown-toc-create-model-class">Create Model class</a></li>
          <li><a href="#configure-mysql-as-database" id="markdown-toc-configure-mysql-as-database">Configure MySQL as database</a></li>
          <li><a href="#create-db-and-grant-privileges" id="markdown-toc-create-db-and-grant-privileges">Create DB and grant privileges</a></li>
          <li><a href="#verify-access-as-user" id="markdown-toc-verify-access-as-user">Verify access as user</a></li>
          <li><a href="#run-migrations" id="markdown-toc-run-migrations">Run migrations</a></li>
          <li><a href="#verify-creation-of-db-tables" id="markdown-toc-verify-creation-of-db-tables">Verify creation of DB tables</a></li>
          <li><a href="#create-view-1" id="markdown-toc-create-view-1">Create View</a></li>
          <li><a href="#configure-urls" id="markdown-toc-configure-urls">Configure URLs</a></li>
          <li><a href="#verify-requestresponse-1" id="markdown-toc-verify-requestresponse-1">Verify request/response</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#mixin-generics-and-viewsets" id="markdown-toc-mixin-generics-and-viewsets">Mixin, Generics and ViewSets</a></li>
  <li><a href="#nested-serializers" id="markdown-toc-nested-serializers">Nested Serializers</a>    <ol>
      <li><a href="#model" id="markdown-toc-model">Model</a></li>
      <li><a href="#serializers" id="markdown-toc-serializers">Serializers</a></li>
      <li><a href="#views" id="markdown-toc-views">Views</a></li>
    </ol>
  </li>
  <li><a href="#relationships" id="markdown-toc-relationships">Relationships</a></li>
</ol>

</nav>

<h1 id="installation">Installation</h1>

<h2 id="install-anaconda">Install Anaconda</h2>

<p>Follow instructions  on  <a href="https://docs.anaconda.com/anaconda/install/linux/">Anaconda for linux</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="o">&gt;</span> conda <span class="nt">--version</span>
   conda 4.10.1
   <span class="o">&gt;</span> python <span class="nt">--version</span>
   Python 3.7.4
   <span class="o">&gt;</span> pip <span class="nt">--version</span>
   pip 19.2.3
</code></pre></div></div>

<h2 id="install-drf">Install DRF</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> pip <span class="nb">install </span>django djangorestframework pyfunctional
</code></pre></div></div>

<h2 id="install-mysql">Install MySQL</h2>

<p>Follow instructions <a href="https://linuxhint.com/install_mysql_ubuntu_2004/">here</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">sudo </span>mysql
mysql&gt; show databases<span class="p">;</span>
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>

<span class="c"># Create user namely 'admin'</span>
mysql&gt; create user <span class="s1">'admin'</span>@<span class="s1">'localhost'</span> IDENTIFIED BY <span class="s1">'&lt;password&gt;'</span><span class="p">;</span>

<span class="c"># Show users</span>
mysql&gt; <span class="k">select </span>user from mysql.user<span class="p">;</span>
+------------------+
| user             |
+------------------+
| admin            |
| debian-sys-maint |
| mysql.infoschema |
| mysql.session    |
| mysql.sys        |
| raghu            |
| root             |
+------------------+
7 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>


</code></pre></div></div>

<h2 id="install-mysqlclient">Install MySQLClient</h2>

<p>To connect to MySQL database using Django (or any python) application, we need mysqlclient.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># Since we are using anaconda as the manager</span>
 conda <span class="nb">install </span>mysqlclient
</code></pre></div></div>

<h1 id="drf-project-and-app">DRF project and app</h1>

<h2 id="create-project">Create project</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a project named 'setup'</span>
~/Projects/DRF&gt; django-admin startproject setup

<span class="c"># Rename the dir 'setup' to desired name like '01-hello'</span>
~/Projects/DRF&gt; <span class="nb">mv </span>setup 01-hello<span class="p">;</span> <span class="nb">cd </span>01-hello

<span class="c"># The project root = "~/Projects/DRF/01-hello"</span>
~/Projects/DRF/01-hello&gt;
</code></pre></div></div>

<h2 id="create-app-inside-project">Create app inside project</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create an app (A project can have muliple apps)</span>
~/Projects/DRF/01-hello&gt; python manage.py startapp app_hello
</code></pre></div></div>

<h2 id="directory-structure">Directory Structure</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/Projects/DRF/01-hello&gt; tree <span class="nt">-I</span> __pycache__                                        
<span class="nb">.</span>
├── app_hello
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── db.sqlite3
├── manage.py
└── setup
    ├── asgi.py
    ├── __init__.py
    ├── JGet.log
    ├── settings.py
    ├── urls.py
    └── wsgi.py
</code></pre></div></div>

<h2 id="function-based-view-fbv">Function based view (FBV)</h2>

<h3 id="configure-settings">Configure Settings</h3>

<p>Configure <code class="language-plaintext highlighter-rouge">setup &gt; settings.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
		<span class="p">...</span>
  
    <span class="c1"># Add DRF
</span>    <span class="s">'rest_framework'</span><span class="p">,</span>

    <span class="c1"># Add project app_hello
</span>    <span class="s">'app_hello'</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="create-view">Create View</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># cat app_hello/views.py
</span><span class="k">def</span> <span class="nf">employeeView</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
  <span class="n">emp</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'id'</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span>
    <span class="s">'name'</span><span class="p">:</span><span class="s">'Raghu'</span><span class="p">,</span>
    <span class="s">'sal'</span><span class="p">:</span><span class="mi">50000</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">(</span><span class="n">emp</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="configure-urls-in-app">Configure URLs in app</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">app_hello</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># Add helloView as default for the URI
</span>    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">helloView</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="configure-urls-in-setup">Configure URLs in setup</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># cat setup/urls.py 
</span><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">app_hello</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">urls</span><span class="p">),</span>

    <span class="c1"># Here, we have configured that any prefix 'hello/' shall be redirected to app_hello.urls
</span>    <span class="n">path</span><span class="p">(</span><span class="s">'hello/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">'app_hello.urls'</span><span class="p">)),</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="start-app">Start App</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">cd</span> ~/Projects/DRF/01-hello
<span class="o">&gt;</span> python manage.py runserver
</code></pre></div></div>

<h3 id="verify-requestresponse">Verify request/response</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get http://localhost:8000/hello
Status: HTTP/1.1 200 OK
Content-Length: 33
Content-Type: application/json
Referrer-Policy: same-origin
X-Content-Type-Options: nosniff
X-Frame-Options: DENY

<span class="o">{</span>
  <span class="s2">"id"</span>: 100,
  <span class="s2">"mesg"</span>: <span class="s2">"HelloWorld"</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="fbv-with-model">FBV with Model</h2>

<h3 id="create-model-class">Create Model class</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.db.models.fields</span> <span class="kn">import</span> <span class="n">IntegerField</span>

<span class="c1"># Create your models here.
</span><span class="k">class</span> <span class="nc">Employee</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">sal</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"[Employee] id={} name={} sal={}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">Employee</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">Employee</span><span class="p">.</span><span class="n">sal</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="configure-mysql-as-database">Configure MySQL as database</h3>

<ul>
  <li>Open to <code class="language-plaintext highlighter-rouge">setup &gt; settings.py </code></li>
  <li>Configure <code class="language-plaintext highlighter-rouge">django.db.backends.mysql</code> as <code class="language-plaintext highlighter-rouge">ENGINE</code></li>
  <li>Configure the database user and password</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'employeedb'</span><span class="p">,</span>
        <span class="s">'USER'</span><span class="p">:</span> <span class="s">'admin'</span><span class="p">,</span>
        <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'welcome1'</span><span class="p">,</span>
        <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'127.0.0.1'</span><span class="p">,</span>
        <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="create-db-and-grant-privileges">Create DB and grant privileges</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">sudo </span>mysql

mysql&gt; CREATE DATABASE employeedb<span class="p">;</span>
Database created.

<span class="c"># Grant all tables of employeedb (using expression `employeedb`.*) to user 'admin' on host 'localhost'</span>
<span class="c"># Without the GRANT command admin cannot access employeedb.</span>
mysql&gt; GRANT ALL PRIVILEGES ON <span class="sb">`</span>employeedb<span class="sb">`</span>.<span class="k">*</span> TO <span class="s1">'admin'</span>@<span class="s1">'localhost'</span><span class="p">;</span>
Query OK, 0 rows affected <span class="o">(</span>0.02 sec<span class="o">)</span>

<span class="c"># This commits changes</span>
mysql&gt; FLUSH PRIVILEGES<span class="p">;</span>
Query OK, 0 rows affected <span class="o">(</span>0.01 sec<span class="o">)</span>	

<span class="c"># ALTER USER &lt;user@host&gt; IDENTIFIED WITH caching_sha2_password BY &lt;password&gt;</span>
<span class="c"># See https://stackoverflow.com/questions/50469587/django-db-utils-operationalerror-2059-authentication-plugin-caching-sha2-pas</span>
mysql&gt; ALTER USER <span class="s1">'admin'</span>@<span class="s1">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="s1">'welcome1'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="verify-access-as-user">Verify access as user</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> mysql <span class="nt">--user</span><span class="o">=</span>admin <span class="nt">--password</span>

<span class="c"># Note that employeedb is accessible to user 'admin'</span>
mysql&gt; show databases<span class="p">;</span>
+--------------------+
| Database           |
+--------------------+
| employeedb         |
| information_schema |
+--------------------+

</code></pre></div></div>

<h3 id="run-migrations">Run migrations</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>raghu-pc ~/Projects/DRF/01-hello&gt;  python manage.py makemigrations
Migrations <span class="k">for</span> <span class="s1">'app_hello'</span>:
  app_hello/migrations/0001_initial.py
    - Create model Employee
   
raghu-pc ~/Projects/DRF/01-hello&gt; python manage.py migrate
Operations to perform:
  Apply all migrations: admin, app_hello, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying app_hello.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying sessions.0001_initial... OK
  
</code></pre></div></div>

<h3 id="verify-creation-of-db-tables">Verify creation of DB tables</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; use employeedb<span class="p">;</span>
Database changed

mysql&gt; show tables<span class="p">;</span>
+----------------------------+
| Tables_in_employeedb       |
+----------------------------+
| app_hello_employee         |
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
+----------------------------+
11 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

mysql&gt; <span class="k">select</span> <span class="k">*</span> from app_hello_employee<span class="p">;</span>
Empty <span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

</code></pre></div></div>

<h3 id="create-view-1">Create View</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">employeeView</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="s">'''Return from the DB model '''</span>

    <span class="c1"># We get a QuerySet object of all the employee
</span>    <span class="n">qsEmployee</span> <span class="o">=</span> <span class="n">Employee</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>

    <span class="c1"># Create a dict with 'employees' as key and value is a list of employee objects.
</span>    <span class="c1"># We select only name and value columns
</span>    <span class="n">response</span> <span class="o">=</span> <span class="p">{</span><span class="s">'employees'</span><span class="p">:</span> <span class="nb">list</span><span class="p">(</span><span class="n">qsEmployee</span><span class="p">.</span><span class="n">values</span><span class="p">(</span><span class="s">'name'</span><span class="p">,</span> <span class="s">'sal'</span><span class="p">))}</span>
    <span class="k">return</span> <span class="n">JsonResponse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="configure-urls">Configure URLs</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>
<span class="kn">from</span> <span class="nn">app_hello</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># Add helloView as default for the URI
</span>    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">helloView</span><span class="p">),</span>

    <span class="c1"># URI for all employees
</span>    <span class="n">path</span><span class="p">(</span><span class="s">'emps/'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">employeeView</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="verify-requestresponse-1">Verify request/response</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get http://localhost:8000/hello/emps     
Status: HTTP/1.1 200 OK
Content-Length: 127
Content-Type: application/json
Referrer-Policy: same-origin
X-Content-Type-Options: nosniff
X-Frame-Options: DENY

<span class="o">{</span>
  <span class="s2">"employees"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Raghu"</span>,
      <span class="s2">"sal"</span>: <span class="s2">"50000.00"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Hari"</span>,
      <span class="s2">"sal"</span>: <span class="s2">"80000.00"</span>
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Pavi"</span>,
      <span class="s2">"sal"</span>: <span class="s2">"60000.00"</span>
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="mixin-generics-and-viewsets">Mixin, Generics and ViewSets</h1>

<h1 id="nested-serializers">Nested Serializers</h1>

<h2 id="model">Model</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>


<span class="k">class</span> <span class="nc">Department</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">manangerId</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">()</span>
    <span class="n">startDate</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateField</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"{}: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Employee</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">GENDER_CHOICES</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s">'M'</span><span class="p">,</span> <span class="s">'Male'</span><span class="p">),</span>
        <span class="p">(</span><span class="s">'F'</span><span class="p">,</span> <span class="s">'Female'</span><span class="p">),</span>
    <span class="p">]</span>

    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">fname</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">lname</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">dob</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">street</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">city</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
    <span class="n">pin</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">()</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CHOICES</span><span class="p">)</span>
    <span class="n">salary</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="c1">##
</span>    <span class="c1"># The 'realated_name' is the derived field for the target 'class'. See
</span>    <span class="c1"># For example,
</span>    <span class="c1">#   The target class 'Department' gets all employees of that department using the field called 'empolyees' because the related_name is 'employees'
</span>    <span class="c1">#   The target class 'Employee' gets all the employees managed by that employee using the field called 'team' because the related_name is 'team'
</span>    <span class="c1">#
</span>    <span class="c1"># The 'related_name' takes effect in Serializer.
</span>    <span class="c1">#   DepartmentSerializer should use a feild called 'employees' to access employees of this department
</span>    <span class="c1">#   EmployeeSerializer should use a feild called 'team' to access empoyees managed by this employee
</span>    <span class="c1">##
</span>    <span class="n">manager</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">'self'</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">'team'</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">DO_NOTHING</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">department</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Department</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">'employees'</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"{}. {}.{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">fname</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">lname</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="serializers">Serializers</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">fields</span><span class="p">,</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Employee</span><span class="p">,</span> <span class="n">Department</span>

<span class="k">class</span> <span class="nc">DepartmentSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>

    <span class="c1"># read_only=True: While creating a department, the employees are read-only (not editable)
</span>    <span class="c1"># many=True: For each department there are many employee objects.
</span>
    <span class="c1"># Serializer-01
</span>    <span class="c1"># -------------
</span>    <span class="c1"># Creates a list with link to each employee's detail page
</span>    <span class="c1"># employees = serializers.HyperlinkedRelatedField(many=True, read_only=True, view_name='employee-detail')
</span>    <span class="n">employees</span> <span class="o">=</span> <span class="n">serializers</span><span class="p">.</span><span class="n">StringRelatedField</span><span class="p">(</span><span class="n">read_only</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Department</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
        
<span class="k">class</span> <span class="nc">EmployeeSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Employee</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>


<span class="k">class</span> <span class="nc">BasicEmployeeSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Employee</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s">'id'</span><span class="p">,</span> <span class="s">'fname'</span><span class="p">,</span> <span class="s">'lname'</span><span class="p">]</span>        
</code></pre></div></div>

<h2 id="views">Views</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">viewsets</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Employee</span><span class="p">,</span> <span class="n">Department</span>
<span class="kn">from</span> <span class="nn">.serializers</span> <span class="kn">import</span> <span class="n">EmployeeSerializer</span><span class="p">,</span> <span class="n">DepartmentSerializer</span>

<span class="k">class</span> <span class="nc">DepartmentViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Department</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">DepartmentSerializer</span>


<span class="k">class</span> <span class="nc">EmployeeViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Employee</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="c1"># Replace EmployeeSerializer with BasicEmployeeSerializer to see it in action.
</span>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">EmployeeSerializer</span>
</code></pre></div></div>

<h1 id="relationships">Relationships</h1>]]></content><author><name>Raghunandan.Seshadri</name></author></entry><entry><title type="html">GitHub Actions</title><link href="/git/2022/12/17/github-actions.html" rel="alternate" type="text/html" title="GitHub Actions" /><published>2022-12-17T00:00:00+00:00</published><updated>2022-12-17T00:00:00+00:00</updated><id>/git/2022/12/17/github-actions</id><content type="html" xml:base="/git/2022/12/17/github-actions.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>GitHub Actions provide a platform to automate software development <strong>workflows</strong>. One such popular workflow is CI/CD (Continuous Integration &amp; Continuous Deployment). However, there are several other workflows that can be automated using GitHub Actions as well.</p>

<p>Let’s say a new employee joins the company (<strong>event</strong> occurred). There are checklist of <strong>actions</strong> to be carried out (<strong>workflow</strong>) like, a cubical has to allotted, computer has to be procured from IT, computer has to setup with necessary software, a meal coupon has to be provided for the employee, a welcome kit has to be provided for the employee etc. It is ideal to automate execution of such a workflow when a corresponding event gets triggered.</p>

<blockquote>
  <p>An <strong>event</strong> automatically triggers corresponding <strong>workflow</strong> that execute a list of <strong>actions</strong></p>
</blockquote>

<p><strong>Sample GitHub events and workflows</strong></p>

<table>
  <thead>
    <tr>
      <th>Event</th>
      <th>Workflow</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>New contributor joins</td>
      <td>new-contributor-workflow</td>
      <td>Send welcome email<br />Create credentials for the contributor</td>
    </tr>
    <tr>
      <td>Pull request is created</td>
      <td>new-pull-request-workflow</td>
      <td>Notify lead developer<br />Run automated tests against the developer branch</td>
    </tr>
    <tr>
      <td>New issue/bug is created</td>
      <td>new-bug-workflow</td>
      <td>Assign bug to developer based on area of expertise<br />Assign appropriate labels to the bug<br />Notify the developer owning the bug<br />Notify the lead developer</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="git" /><summary type="html"><![CDATA[Table of Contents Introduction]]></summary></entry><entry><title type="html">Kubernetes Essentials</title><link href="/cloud/2022/12/15/kubernetes.html" rel="alternate" type="text/html" title="Kubernetes Essentials" /><published>2022-12-15T00:00:00+00:00</published><updated>2022-12-15T00:00:00+00:00</updated><id>/cloud/2022/12/15/kubernetes</id><content type="html" xml:base="/cloud/2022/12/15/kubernetes.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ol>
      <li><a href="#what-is-container-orchestration" id="markdown-toc-what-is-container-orchestration">What is Container Orchestration?</a></li>
      <li><a href="#terminologies" id="markdown-toc-terminologies">Terminologies</a></li>
    </ol>
  </li>
  <li><a href="#core-components" id="markdown-toc-core-components">Core components</a>    <ol>
      <li><a href="#node" id="markdown-toc-node">Node</a></li>
      <li><a href="#container" id="markdown-toc-container">Container</a></li>
      <li><a href="#pod" id="markdown-toc-pod">Pod</a></li>
      <li><a href="#service" id="markdown-toc-service">Service</a></li>
      <li><a href="#ingress" id="markdown-toc-ingress">Ingress</a></li>
      <li><a href="#configmap" id="markdown-toc-configmap">ConfigMap</a></li>
      <li><a href="#secret" id="markdown-toc-secret">Secret</a></li>
      <li><a href="#volume" id="markdown-toc-volume">Volume</a></li>
      <li><a href="#replicas" id="markdown-toc-replicas">Replicas</a></li>
      <li><a href="#deployment" id="markdown-toc-deployment">Deployment</a></li>
      <li><a href="#statefulset" id="markdown-toc-statefulset">StatefulSet</a></li>
    </ol>
  </li>
  <li><a href="#architecture" id="markdown-toc-architecture">Architecture</a>    <ol>
      <li><a href="#worker-nodes" id="markdown-toc-worker-nodes">Worker Nodes</a></li>
      <li><a href="#master-nodes" id="markdown-toc-master-nodes">Master Nodes</a></li>
      <li><a href="#master-vs-worker-nodes" id="markdown-toc-master-vs-worker-nodes">Master Vs worker Nodes</a></li>
    </ol>
  </li>
  <li><a href="#single-node-cluster" id="markdown-toc-single-node-cluster">Single node cluster</a>    <ol>
      <li><a href="#minikube" id="markdown-toc-minikube">Minikube</a></li>
      <li><a href="#kubectl" id="markdown-toc-kubectl">Kubectl</a></li>
      <li><a href="#installation" id="markdown-toc-installation">Installation</a></li>
      <li><a href="#verify-installation" id="markdown-toc-verify-installation">Verify Installation</a></li>
      <li><a href="#kubectl-core-commands" id="markdown-toc-kubectl-core-commands">Kubectl core commands</a>        <ol>
          <li><a href="#basic-commands" id="markdown-toc-basic-commands">Basic commands</a></li>
          <li><a href="#crud-of-k8s-component" id="markdown-toc-crud-of-k8s-component">CRUD of K8s component</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#basic-deployment-with-service" id="markdown-toc-basic-deployment-with-service">Basic deployment with service</a></li>
  <li><a href="#mongodb--mongoexpress-deployment" id="markdown-toc-mongodb--mongoexpress-deployment">MongoDB &amp; MongoExpress deployment</a></li>
  <li><a href="#namespace" id="markdown-toc-namespace">Namespace</a>    <ol>
      <li><a href="#built-in-namespaces" id="markdown-toc-built-in-namespaces">Built-in namespaces</a></li>
      <li><a href="#custom-namespace" id="markdown-toc-custom-namespace">Custom namespace</a></li>
      <li><a href="#use-of-namespace" id="markdown-toc-use-of-namespace">Use of namespace</a></li>
      <li><a href="#sharing-between-namespaces" id="markdown-toc-sharing-between-namespaces">Sharing between namespaces</a></li>
      <li><a href="#global-components" id="markdown-toc-global-components">Global Components</a></li>
      <li><a href="#kubectl-and-namespace" id="markdown-toc-kubectl-and-namespace">Kubectl and namespace</a></li>
    </ol>
  </li>
  <li><a href="#ingress-1" id="markdown-toc-ingress-1">Ingress</a>    <ol>
      <li><a href="#ingress-component" id="markdown-toc-ingress-component">Ingress Component</a></li>
      <li><a href="#ingress-controller" id="markdown-toc-ingress-controller">Ingress Controller</a></li>
      <li><a href="#external-cloud-lb-deployment" id="markdown-toc-external-cloud-lb-deployment">External Cloud LB deployment</a></li>
      <li><a href="#external-proxy-server-deployment" id="markdown-toc-external-proxy-server-deployment">External Proxy Server deployment</a></li>
      <li><a href="#minikube-deployment" id="markdown-toc-minikube-deployment">MiniKube deployment</a>        <ol>
          <li><a href="#enable-ingress-controller" id="markdown-toc-enable-ingress-controller">Enable Ingress Controller</a></li>
        </ol>
      </li>
      <li><a href="#dashboard-for-k8s" id="markdown-toc-dashboard-for-k8s">Dashboard for K8s</a>        <ol>
          <li><a href="#enable-dashboard" id="markdown-toc-enable-dashboard">Enable dashboard</a></li>
          <li><a href="#configure-ingress" id="markdown-toc-configure-ingress">Configure Ingress</a></li>
          <li><a href="#apply-ingress-component" id="markdown-toc-apply-ingress-component">Apply Ingress Component</a></li>
        </ol>
      </li>
      <li><a href="#default-back-end" id="markdown-toc-default-back-end">Default back-end</a></li>
      <li><a href="#ingress-routing-use-cases" id="markdown-toc-ingress-routing-use-cases">Ingress routing use-cases</a>        <ol>
          <li><a href="#path-prefix-based-routing" id="markdown-toc-path-prefix-based-routing">Path prefix based routing</a></li>
          <li><a href="#sub-domain-based-routing" id="markdown-toc-sub-domain-based-routing">Sub-domain based routing</a></li>
        </ol>
      </li>
      <li><a href="#ingress-tls-certificates" id="markdown-toc-ingress-tls-certificates">Ingress TLS Certificates</a>        <ol>
          <li><a href="#ingress-config" id="markdown-toc-ingress-config">Ingress Config</a></li>
          <li><a href="#tls-certificate-secret-component" id="markdown-toc-tls-certificate-secret-component">TLS Certificate secret component</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#helm" id="markdown-toc-helm">Helm</a>    <ol>
      <li><a href="#helm-as-package-manager" id="markdown-toc-helm-as-package-manager">Helm as package manager</a>        <ol>
          <li><a href="#helm-charts" id="markdown-toc-helm-charts">Helm Charts</a></li>
        </ol>
      </li>
      <li><a href="#helm-as-templating-engine" id="markdown-toc-helm-as-templating-engine">Helm as templating engine</a>        <ol>
          <li><a href="#yaml-template-file" id="markdown-toc-yaml-template-file">YAML template file</a></li>
          <li><a href="#yaml-value-file" id="markdown-toc-yaml-value-file">YAML value file</a></li>
        </ol>
      </li>
      <li><a href="#same-app-deployed-across-different-environment" id="markdown-toc-same-app-deployed-across-different-environment">Same App deployed across different environment</a></li>
      <li><a href="#helm-chart-structure" id="markdown-toc-helm-chart-structure">Helm Chart Structure</a></li>
      <li><a href="#install-helm-chart" id="markdown-toc-install-helm-chart">Install helm chart</a>        <ol>
          <li><a href="#install-with-default-values" id="markdown-toc-install-with-default-values">Install with default values</a></li>
          <li><a href="#install-with-custom-values" id="markdown-toc-install-with-custom-values">Install with custom values</a></li>
        </ol>
      </li>
      <li><a href="#tiller" id="markdown-toc-tiller">Tiller</a></li>
    </ol>
  </li>
  <li><a href="#volumes" id="markdown-toc-volumes">Volumes</a></li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>Kubernetes is an open source, <strong>container orchestration</strong> tool that operates in a <strong>distributed</strong> environment at <strong>scale</strong>. Kubernetes comes from the Greek word that means <em>“The person who steers the ship”</em>. Hence the logo.</p>

<blockquote>
  <p>K8s is short for Kubernetes</p>
</blockquote>

<h2 id="what-is-container-orchestration">What is Container Orchestration?</h2>

<p>The rise of micro-services required an environment where each service/application could run in its own virtual environment with its bare minimum system libraries – This resulted in container architecture  – Docker being the most popular. A container orchestration framework like K8s provides</p>

<ul>
  <li>High Availability – Zero downtime.</li>
  <li>Scalability – Ability to take more load or less load on need basis.</li>
  <li>Self healing – Ability to recover from failures.</li>
</ul>

<h2 id="terminologies">Terminologies</h2>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Node</td>
      <td>A Kubernetes Node is any Linux host $$-$$ VM, bare metal or even private/public cloud instance.</td>
    </tr>
    <tr>
      <td>Pod</td>
      <td>Smallest unit of K8s that provides abstraction over container. A pod is for K8s as container is for Docker. K8s is **not** coupled with Docker. <br />K8s provides an abstraction so that user interacts with K8s layer and doesn’t need to directly interact with the container provider. Docker can be replaced with any other container runtime that meets the spec.</td>
    </tr>
    <tr>
      <td>K8s Cluster</td>
      <td>Used interchangeably as just Kubernetes, is made up of master and worker nodes.</td>
    </tr>
    <tr>
      <td>Microservice App</td>
      <td>A microservice app is an application made up several independent parts called **services.**. The services work together to create a meaningful application.</td>
    </tr>
    <tr>
      <td>K8s Master Node</td>
      <td>A collection of services that make up the control panel and are in-charge of the K8s cluster. Master schedules apps, monitors worker nodes, implements changes and responds to events.</td>
    </tr>
    <tr>
      <td>K8s Worker Node</td>
      <td>The app services run on the K8s worker node or just node.</td>
    </tr>
    <tr>
      <td>Deployment</td>
      <td>A YAML manifest file that answers (A) What the app needs? (B) Scale $$-$$ How many replica apps?</td>
    </tr>
  </tbody>
</table>

<h1 id="core-components">Core components</h1>

<h2 id="node">Node</h2>

<p>A node is a physical machine or a virtual machine (VM).</p>

<h2 id="container">Container</h2>

<p>A container is like a womb for an application (app). It contains only those system and app libraries that are required to run the app. It provides the app with an environment as if the app is running in its own machine (node).</p>

<h2 id="pod">Pod</h2>

<p>A pod is a K8s component that provides an abstraction layer over the container. The user interacts with the pod and not directly with the container. This way, the container provider can be replaced with any other container provider that follows the spec. Docker is the most popular container provider.</p>

<ul>
  <li>Pod should usually contain one application (app).</li>
  <li>Pod could have other small helper apps that work coherently with each other.</li>
  <li>Pod (not container) gets its own internal IP.</li>
  <li>Pods can communicate with each other using <strong>internal</strong> IP address</li>
  <li>Pods are ephemeral – Pod can die due to node crash, container crash, resource got exhausted resulting in crash or pod  got relocated to another node.</li>
  <li>When a pod dies, it is recreated. Thus recreated pod can reside in any node and it gets another IP.</li>
  <li>Pods <strong>cannot rely on communicating with internal IP</strong> as it can change and is not reliable. This is solved using another K8s component called Service.</li>
</ul>

<h2 id="service">Service</h2>

<p>A service is a K8s component that can be attached to each Pod.</p>

<ul>
  <li>The service provides a permanent IP address.</li>
  <li>Pods communicate with each other via their services.</li>
  <li>The lifecycle of Pod and service are not connected. So, even if the Pod dies, the service will stay.</li>
  <li>An <strong>external service</strong> needs to be created to expose the Pod for web requests.</li>
  <li>An <strong>internal service</strong> is used for inter Pod communication</li>
  <li>An external service URL with look like <code class="language-plaintext highlighter-rouge">http://&lt;node-ip&gt;:&lt;port&gt;</code>. However, we want the URL to look like <code class="language-plaintext highlighter-rouge">http://app-name</code>. This is achieved using a K8s component called <strong>Ingress</strong>.</li>
  <li>External request goes to Ingress which then forwards the request to the corresponding service.</li>
  <li>Internally Pods communicate using the service.</li>
</ul>

<h2 id="ingress">Ingress</h2>

<p>A ingress is the end-point for external browser requests to route traffic into the K8s cluster. Ingress provides a way to access service using the service name like <code class="language-plaintext highlighter-rouge">http://app-name</code></p>

<h2 id="configmap">ConfigMap</h2>

<p>Let’s say we need to change a container configuration (Like Apache log verbosity). One way of achieving this is to modify the container files, push a new version of container (say to docker-hub), ask K8s to upgrade to the new version of the container. This is very tedious for every small config change to be done.</p>

<p>K8s provides a more elegant solution via ConfigMap</p>

<ul>
  <li>ConfigMap contains the configuration of the component</li>
  <li>ConfigMap is attached to the Pod</li>
  <li>The ConfigMap object is updated for any config change to be done.</li>
  <li>Even if the pod crashes, it shall be restarted and will start running with the config as per ConfigMap</li>
</ul>

<blockquote>
  <p>Don’t put credentials in ConfigMap. Use Secret.</p>
</blockquote>

<h2 id="secret">Secret</h2>

<p>A container configuration can also be something like login credentials. Creating a ConfigMap for this case will be insecure as ConfigMap is plain text. This is handled using K8s component <strong>Secret</strong>.</p>

<ul>
  <li>Secret is Base64 encoded.</li>
  <li>Secret is attached to a Pod just like ConfigMap.</li>
  <li>The value in secret can be accessed inside the application as environment variable or properties file.</li>
</ul>

<blockquote>
  <p>Credentials and certificates are stored as Secret</p>
</blockquote>

<h2 id="volume">Volume</h2>

<p>When a pod dies, the data that the pod has generated dies with it. This data could be less significant data like log or a lot more significant data like database entries. In order to persist the data even after pod’s reincarnation we need another K8s component called <strong>Volumes</strong>.</p>

<blockquote>
  <p>A volume abstracts storage that is attached to the pod</p>
</blockquote>

<p>This storage could be on the same Node, a remote storage on some other node, a cloud storage</p>

<blockquote>
  <p><strong>Note:</strong> A storage has be visualised as external to the K8s cluster. K8s does not manage data persistance!</p>
</blockquote>

<p>This means a user and/or administrator is responsible for the following storage management</p>

<ul>
  <li>Data distribution – Spread chunks of data across physical nodes</li>
  <li>Data redundancy – Maintain multiple copies of data</li>
  <li>Ensure data is kept on reliable hardware (with parity check) from which it can be restored.</li>
</ul>

<h2 id="replicas">Replicas</h2>

<p>With the setup the service is accessible via a external browser. If a pod dies, it gets recreated. However, there is a window of time between crash and recreation where the service is unavailable. In order to provide high availability, that is zero down time of a service, we need multiple replicas of the pod running (preferably distributed on different nodes).</p>

<ul>
  <li>Multiple replicas of the pod shall be connected to the <strong>same</strong> service object.</li>
  <li>The service provides a persistent static IP address with DNS name, that remains even if pod dies and gets recreated.</li>
  <li>The service also provides a built-in load balancer that distributes load among pods.</li>
</ul>

<blockquote>
  <p>A service provides persistent static IP as well as built-in load balancing.</p>
</blockquote>

<p>Replicas are not manually created by creating multiple pods. Instead we configure our requirements in a YAML file (desired state) and create a K8s component called <strong>Deployment</strong>.</p>

<h2 id="deployment">Deployment</h2>

<p>A deployment is a K8s component that provides another layer of abstraction on top of pods – Pods are an abstraction over containers. Deployment provide an easy way to configure, create, replicate, scale-up and scale-down pods. In practice, we mostly work with deployments and not directly with pods.</p>

<blockquote>
  <p>Do not use Deployment to create database pods or any pod that has to maintain state. Use StatefulSet.</p>
</blockquote>

<h2 id="statefulset">StatefulSet</h2>

<p>A deployment cannot be used in case of stateful applications such as database.</p>

<p>A stateful application has the following complications in case of multiple pods (say database pods)</p>

<ul>
  <li>To maintain consistency they could be accessing the same database storage. In this case multiple pods will try read and write that needs be syncronized.</li>
  <li>If we have a database storage per pod, then these storages must be in sync.</li>
</ul>

<p>A mechanism that governs which pod shall write to the storage, which shall read is required in addition to replicating feature. This is offered by K8s component called <strong>StatefulSet</strong>. As the name indicates a StatefulSet is meant specifically for applications like databases (like MySQL, MongoDB, ElasticSearch).</p>

<blockquote>
  <p>Pods that need to maintain state should be created using <strong>StatefulSet</strong>.</p>
</blockquote>

<p>Like Deployment, StatefulSet also takes care of configuration, replication, scale-up and scale-down (while avoiding database inconsistencies). Deploying database apps using StatefulSet in K8s cluster is much more tedious than deployment. So, it is common practice to <strong>host database outside K8s cluster</strong>.</p>

<h1 id="architecture">Architecture</h1>

<h2 id="worker-nodes">Worker Nodes</h2>

<p>Each K8s worker node will have multiple pods running on it. The worker nodes do most of the work and hence the name.</p>

<p>Every worker nodes must have the following <strong>three</strong> processes running</p>

<ul>
  <li>Container runtime – The most popular container runtime is Docker.</li>
  <li>Kubelet – A K8s process that schedules the pods in the nodes. Kubelet is responsible for running the pod inside the node and assigning resources from the node to the pod. So Kubelet manages the node and the container runtime.</li>
  <li>Kube Proxy – We said a K8s service, with a static IP shall load-balance among pod distributed in multiple nodes. The service actually goes via the kube-proxy. If a source pod is making a request to access another target pod via service. The service prioritises a target  pod running on the same node thus reducing network overhead.</li>
</ul>

<h2 id="master-nodes">Master Nodes</h2>

<p>Master Nodes take care of the following</p>

<ul>
  <li>Interacting with the worker nodes</li>
  <li>Adding and removing nodes from the K8s cluster</li>
  <li>Monitor the pods</li>
  <li>Re-order or recreate pods across nodes</li>
</ul>

<p>Every master node has the following <strong>four</strong> process running</p>

<ul>
  <li>API Server
    <ul>
      <li>A user interacts with the API server using some client – The client could be K8s UI dashboard, kubelet CLI or K8s APIs</li>
      <li>API server acts as <strong>cluster gateway</strong> – Gets initial request of any updates or query from the client.</li>
      <li>API server acts as <strong>gatekeeper</strong> – Ensure Authenticated requests get through to the cluster.</li>
      <li>Any request first reaches API Server, gets validated and is then forwarded to other process on the master nodes.</li>
      <li>Any monitoring request/query regarding <strong>status or health of the deployment</strong> happens via API Server</li>
      <li>This is good for security as there is only <strong>one entry point</strong> into the cluster.</li>
    </ul>
  </li>
  <li>Scheduler
    <ul>
      <li>Say, we want to start a new pod. The request goes to API Server which then forwards the request to Scheduler</li>
      <li>The Scheduler shall start the pod on the worker node.</li>
      <li>The Scheduler has the <strong>intelligence</strong> to pick the worker node for a given pod and does not just do it randomly. For example, the scheduler looks at the resources required by the pod, the available resources on each worker node, the type of pods already running on each worker node etc to pick the target worker node.</li>
      <li>The Scheduler only picks the target node. The process that actually starts the pod is the Kubelet running on that worker node.</li>
    </ul>
  </li>
  <li>Controller Manager
    <ul>
      <li><strong>Detect state changes</strong>  – For example, pods die on any node</li>
      <li>After detection, the control manager shall contact the scheduler to schedule the pod creation.</li>
      <li>The control manager thus detects state changes and ensures state is maintained.</li>
    </ul>
  </li>
  <li>etcd
    <ul>
      <li>A key-value store of the K8s cluster state – It can be considered as the <strong>cluster brain</strong>.</li>
      <li>All changes of pod’s death, recreation etc are all stored in etcd.</li>
      <li>All this mechanism of scheduler, controller manager <strong>works based on the data</strong> stored in etcd.
        <ul>
          <li>How does Scheduler know what resources are available on which worker node?</li>
          <li>How Controller Manager know that the cluster state changed – pod died or Kubelet restarted a pod etc?</li>
          <li>How does API Server know about the health/status of a deployment?</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>A K8s cluster is typically made up of multiple master nodes each running all these processes.</p>

<ul>
  <li>The API server is load balanced across master nodes</li>
  <li>etcd forms a distributed storage across all the master nodes</li>
</ul>

<h2 id="master-vs-worker-nodes">Master Vs worker Nodes</h2>

<p>Master nodes require less resources. Worker nodes do the actual work and may need more resources and more instances. A small cluster deployment may have two master and three worker nodes.</p>

<p>A master/worker node is added as follows</p>

<ul>
  <li>Get a bare metal server</li>
  <li>Install corresponding master/worker processes</li>
  <li>Add the node to the K9s cluster</li>
</ul>

<h1 id="single-node-cluster">Single node cluster</h1>

<h2 id="minikube">Minikube</h2>

<p>A production cluster have multiple (at-least 2) master nodes and several worker nodes (at-least 3). However to setup a cluster on a local machine (laptop) we can use an open source tool called minikube.</p>

<p>Minikube creates a single node K8s cluster with master and worker processes for testing purposes.</p>

<h2 id="kubectl">Kubectl</h2>

<p>We have seen that <strong>API Server</strong> component of of K8s Master is the entry point for interacting with K8s to perform any operation. We can interact with the API Server using</p>

<ul>
  <li>Kubernetes UI dashboard</li>
  <li>Kubernetes API</li>
  <li>Kubectl CLI</li>
</ul>

<p>The Kubectl CLI is the most popular and powerful way of interaction with K8s cluster be it Minikube, production cluster, AWS, google cloud or even hybrid cluster.</p>

<h2 id="installation">Installation</h2>

<p><a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker on Ubuntu</a></p>

<p><a href="https://minikube.sigs.k8s.io/docs/start/">Install Minikube</a></p>

<h2 id="verify-installation">Verify Installation</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker <span class="nt">--version</span>
Docker version 20.10.21, build baeda1f

<span class="o">&gt;</span> minikube version
minikube version: v1.28.0
commit: 986b1ebd987211ed16f8cc10aed7d2c42fc8392f

<span class="o">&gt;</span> kubectl version <span class="nt">--output</span><span class="o">=</span>yaml
clientVersion:
  buildDate: <span class="s2">"2022-10-12T10:57:26Z"</span>
  compiler: gc
  gitCommit: 434bfd82814af038ad94d62ebe59b133fcb50506
  gitTreeState: clean
  gitVersion: v1.25.3
  goVersion: go1.19.2
  major: <span class="s2">"1"</span>
  minor: <span class="s2">"25"</span>
  platform: linux/amd64
kustomizeVersion: v4.5.7
serverVersion:
  buildDate: <span class="s2">"2022-10-12T10:49:09Z"</span>
  compiler: gc
  gitCommit: 434bfd82814af038ad94d62ebe59b133fcb50506
  gitTreeState: clean
  gitVersion: v1.25.3
  goVersion: go1.19.2
  major: <span class="s2">"1"</span>
  minor: <span class="s2">"25"</span>
  platform: linux/amd64

<span class="o">&gt;</span> minikube start
minikube v1.28.0 on Ubuntu 22.04
...
...
Done! kubectl is now configured to use <span class="s2">"minikube"</span> cluster and <span class="s2">"default"</span> namespace by default

<span class="o">&gt;</span> kubectl get nodes
NAME       STATUS   ROLES           AGE   VERSION
minikube   Ready    control-plane   10h   v1.25.3

<span class="o">&gt;</span> minikube status
minikube
<span class="nb">type</span>: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

</code></pre></div></div>

<h2 id="kubectl-core-commands">Kubectl core commands</h2>

<h3 id="basic-commands">Basic commands</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First off, start the K8s cluster</span>
<span class="o">&gt;</span> minikube start

<span class="c"># A set of master nodes is called a control-pane</span>
<span class="o">&gt;</span> kubectl get nodes
NAME       STATUS   ROLES           AGE   VERSION
minikube   Ready    control-plane   10h   v1.25.3

<span class="c"># Note there are no pods</span>
<span class="o">&gt;</span> kubectl get pods
No resources found <span class="k">in </span>default namespace.

<span class="o">&gt;</span> kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>   AGE
kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   10h

</code></pre></div></div>

<h3 id="crud-of-k8s-component">CRUD of K8s component</h3>

<p>In this case we are looking at the CRUD operations on the Deployment K8s component. The same applies to other K8s components as well.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Usage</span>
kubectl create deployment NAME <span class="nt">--image</span><span class="o">=</span>image <span class="nt">--</span> <span class="o">[</span>COMMAND] <span class="o">[</span>args...] <span class="o">[</span>options]
kubectl <span class="o">(</span>edit|delete<span class="o">)</span> deployment NAME

<span class="c"># Create deployment</span>
<span class="c"># -----------------</span>
<span class="o">&gt;</span> kubectl create deployment httpd <span class="nt">--image</span><span class="o">=</span>httpd
deployment.apps/httpd created

<span class="c"># Status: Deployment not yet ready</span>
<span class="o">&gt;</span> kubectl get deployments
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
httpd   0/1     1            0           12s

<span class="c"># Status: Deployment now ready</span>
<span class="o">&gt;</span> kubectl get deployments
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
httpd   1/1     1            1           42s

<span class="c"># Status: Get replica sets of the deployment</span>
<span class="o">&gt;</span> kubectl get replicasets
NAME                   DESIRED   CURRENT   READY   AGE
httpd-574c8fb7c5   1         1         1       115s

<span class="c"># Status: Get pods -- Note that the replicaset name is prefixed to the pod's name</span>
<span class="o">&gt;</span> kubectl get pods
NAME                         READY   STATUS    RESTARTS   AGE
httpd-574c8fb7c5-k9nh6   1/1     Running   0          90s

<span class="c"># Debug: Log of pods</span>
<span class="c"># ------------------</span>
<span class="o">&gt;</span> kubectl logs httpd-574c8fb7c5-k9nh6
AH00558: httpd: Could not reliably determine the server<span class="s1">'s fully qualified domain name, using 172.17.0.5. Set the '</span>ServerName<span class="s1">' directive globally to suppress this message
[Wed Dec 07 04:34:40.810356 2022] [mpm_event:notice] [pid 1:tid 140054806654272] AH00489: Apache/2.4.54 (Unix) configured -- resuming normal operations

# Debug: Get interactive terminal
# -------------------------------
&gt; kubectl exec -it httpd-574c8fb7c5-k9nh6 -- bash

# Edit deployment
# -----------
&gt; kubectl edit httpd

# Delete deployment
# -----------------
&gt; kubectl delete httpd
deployment.apps "httpd" deleted
</span></code></pre></div></div>

<h1 id="basic-deployment-with-service">Basic deployment with service</h1>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFRCXG5hMVtodHRwZF0tLS1hMihTZXJ2aWNlKTo6OnNlcnZpY2VcbmExKGh0dHBkKS0tLWEzKENvbmZpZ01hcCk6Ojpjb25maWdcbiUlLVxuY2xhc3NEZWYgbm9kZSAgICBmaWxsOiNiNGRjZmYsY29sb3I6YmxhY2ssc3Ryb2tlOiMyODY0ZGM7XG5jbGFzc0RlZiBzZXJ2aWNlIGZpbGw6IzI4NjRkYyxjb2xvcjp3aGl0ZSxzdHJva2U6IzY0YTBmZjtcbmNsYXNzRGVmIGNvbmZpZyAgZmlsbDojMDBhMDc4LGNvbG9yOndoaXRlLHN0cm9rZTojMDBjOGEwOyIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In19" /></p>

<p>The <a href="K8s/01-basic">K8s/01-basic</a> project details the following concepts</p>

<ul>
  <li>Deployment, replicas, pods and service</li>
  <li>Accessing via Node IP, internal Service IP and Pod IP</li>
  <li>Assert service load balancing, self healing of pods, scaling of pods</li>
  <li>Assert Service IP and ConfigMap persistance</li>
  <li>Test out-of-box Zero downtime when pod is deleted during load</li>
</ul>

<h1 id="mongodb--mongoexpress-deployment">MongoDB &amp; MongoExpress deployment</h1>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFRCXG4lJS1cbmQxKE1vbmdvREIpOjo6bm9kZS0tLWcxKFNlcnZpY2UpOjo6c2VydmljZVxuZDEtLS1nMihEQiBTZWNyZXQpOjo6c2VjcmV0XG4lJS1cbmQyKE1vbmdvRXhwcmVzcyk6Ojpub2RlLS0tZzJcbmQyLS0tZzMoTEIgU2VydmljZSk6OjpzZXJ2aWNlXG5kMi0tLWc0KERCIENvbmZpZyBNYXApOjo6Y29uZmlnXG4lJS1cbmNsYXNzRGVmIG5vZGUgICAgZmlsbDojYjRkY2ZmLGNvbG9yOmJsYWNrLHN0cm9rZTojMjg2NGRjO1xuY2xhc3NEZWYgc2VydmljZSBmaWxsOiMyODY0ZGMsY29sb3I6d2hpdGUsc3Ryb2tlOiM2NGEwZmY7XG5jbGFzc0RlZiBjb25maWcgIGZpbGw6IzAwYTA3OCxjb2xvcjp3aGl0ZSxzdHJva2U6IzAwYzhhMDtcbmNsYXNzRGVmIHNlY3JldCAgZmlsbDojYjQ3ODAwLGNvbG9yOndoaXRlLHN0cm9rZTojYzg4YzAwO1xuJSUtIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>The <a href="https://github.com/cafeduke/learn/tree/master/K8s/02-mongo">K8s/02-mongo</a> project details the following concepts</p>

<ul>
  <li>Secret and ConfigMap</li>
  <li>Deployments sharing Secret component</li>
  <li>Request flow through pods and services when user accesses MongoExpress UI</li>
</ul>

<h1 id="namespace">Namespace</h1>

<p>Namespaces are used to group resources inside a K8s cluster. Like any namespace it avoids name conflict.</p>

<h2 id="built-in-namespaces">Built-in namespaces</h2>

<p>By default K8s provides the following namespaces</p>

<table>
  <thead>
    <tr>
      <th>Namespace</th>
      <th>Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>kubernetes-dashboard</td>
      <td>Specific to minikube. Not present in standard cluster</td>
    </tr>
    <tr>
      <td>kube-system</td>
      <td>Do **not** use or modify this. This is not meant for user. <br />The components deployed are system processes.</td>
    </tr>
    <tr>
      <td>kube-public</td>
      <td>Data accessible by public. <br />It has <code class="language-plaintext highlighter-rouge">ConfigMap</code> with cluster information that can be accessed without authentication. <br />Execute <code class="language-plaintext highlighter-rouge">kubectl clusterinfo</code> to see details.</td>
    </tr>
    <tr>
      <td>kube-node-lease</td>
      <td>A recent addition. Holds information about heartbeat of nodes indicating availability.</td>
    </tr>
    <tr>
      <td>default</td>
      <td>This is the namespace used when none is specified.</td>
    </tr>
  </tbody>
</table>

<h2 id="custom-namespace">Custom namespace</h2>

<p>Various K8s components (Deployments, ConfigMap, Secret) can be grouped under a custom namespace by specifying the name of the namespace in <code class="language-plaintext highlighter-rouge">metadata.namespace</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-configmap</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">my-namespace</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="s">...</span>
</code></pre></div></div>

<h2 id="use-of-namespace">Use of namespace</h2>

<ul>
  <li><strong>Avoid Cluttering:</strong> Group components into namespaces based on functionality. Eg: Database, Monitoring, LB, Logging</li>
  <li><strong>Multiple teams using same cluster:</strong> Avoid accidental overwriting of components having same name.</li>
  <li><strong>Resources sharing in same cluster:</strong> We can have staging and development environments share namespaces like Logging (ElasticStack) and LB(Nginx-Ingress Controller). This avoids creating redundant components for staging and development separately.</li>
  <li><strong>Blue-Green Deployment:</strong> Similar to staging and development. Blue is environment under development and green is the current environment.</li>
  <li><strong>Limit access and resources via namespace</strong>: Configure access such that, members of projectA-namespace, for example, cannot access components in projectB-namespace.  Provide resource quota (CPU, RAM, Storage) per namespace. This way one team will not hog most resources of the K8s cluster.</li>
</ul>

<h2 id="sharing-between-namespaces">Sharing between namespaces</h2>

<p>One namespace cannot refer to most components (ConfigMap, Secret) in another namespace</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFRCXG4lJS1cbnN1YmdyYXBoIGRiLW5hbWVzcGFjZVxuZGlyZWN0aW9uIFRCXG5kYjEobXlzcWwpXG5kYjIobXlzcWwtc2VydmljZSk6OjpzZXJ2aWNlXG5lbmRcbiUlLVxuc3ViZ3JhcGggYTItbmFtZXNwYWNlXG5kaXJlY3Rpb24gVEJcbmEyYzEoQTIpXG5hMmMyKG15LWNvbmZpZ21hcCk6Ojpjb25maWdcbmEyYzMobXktc2VjcmV0KTo6OnNlY3JldFxuZW5kXG4lJS1cbnN1YmdyYXBoIGExLW5hbWVzcGFjZVxuZGlyZWN0aW9uIFRCXG5hMWMxKEExKVxuYTFjMihteS1jb25maWdtYXApOjo6Y29uZmlnXG5hMWMzKG15LXNlY3JldCk6OjpzZWNyZXRcbmVuZFxuJSUtXG5hMWMyLS0tZGIyXG5hMmMyLS0tZGIyXG4lJS1cbmNsYXNzRGVmIG5vZGUgICAgZmlsbDojYjRkY2ZmLGNvbG9yOmJsYWNrLHN0cm9rZTojMjg2NGRjO1xuY2xhc3NEZWYgc2VydmljZSBmaWxsOiMyODY0ZGMsY29sb3I6d2hpdGUsc3Ryb2tlOiM2NGEwZmY7XG5jbGFzc0RlZiBjb25maWcgIGZpbGw6IzAwYTA3OCxjb2xvcjp3aGl0ZSxzdHJva2U6IzAwYzhhMDtcbmNsYXNzRGVmIHNlY3JldCAgZmlsbDojYTA3ODAwLGNvbG9yOndoaXRlLHN0cm9rZTojYTBjODAwO1xuJSUtIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<ul>
  <li>We have a <code class="language-plaintext highlighter-rouge">my-configmap</code> that references the DB service in <code class="language-plaintext highlighter-rouge">mysql-service</code> in <code class="language-plaintext highlighter-rouge">a1-namespace</code>. This <code class="language-plaintext highlighter-rouge">ConfigMap</code> cannot be used by <code class="language-plaintext highlighter-rouge">a2-namespace</code>. It will have to create another copy of <code class="language-plaintext highlighter-rouge">ConfigMap</code> component even though the contents are same.</li>
  <li>Similarly, secrets cannot be shared between namespaces even though the contents are same.</li>
  <li>However, <code class="language-plaintext highlighter-rouge">my-configmap</code> in both namespaces refer the same DB service <code class="language-plaintext highlighter-rouge">mysql-service</code> which is in <code class="language-plaintext highlighter-rouge">db-namespace</code></li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># my-configmap</span>
<span class="c1"># ------------</span>
<span class="c1"># data.db_url</span>
<span class="c1">#   - Note that fully qualified name is used to reference the service</span>
<span class="c1">#   - The fully qualified service name is of the format &lt;service-name&gt;.&lt;namespace&gt;</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-configmap</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">db_url</span><span class="pi">:</span> <span class="s">mysql-service.db-namespace</span>
</code></pre></div></div>

<h2 id="global-components">Global Components</h2>

<p>Global components cannot be confined to a namespace. Example of such components are as follows</p>

<ul>
  <li>Volumes</li>
  <li>Node</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List all global components</span>
<span class="o">&gt;</span> kubectl api-resources <span class="nt">--namespaced</span><span class="o">=</span><span class="nb">false</span>

<span class="c"># List all components that can be namespaced</span>
<span class="o">&gt;</span> kubectl api-resources <span class="nt">--namespaced</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h2 id="kubectl-and-namespace">Kubectl and namespace</h2>

<p>By default, <code class="language-plaintext highlighter-rouge">kubectl</code>  will list components in the <code class="language-plaintext highlighter-rouge">default</code> namespace. For <code class="language-plaintext highlighter-rouge">kubectl</code> to work with custom namespace use the <code class="language-plaintext highlighter-rouge">-n</code> option of <code class="language-plaintext highlighter-rouge">kubectl</code>  as shown below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> kubectl get pods <span class="nt">-n</span> my-namespace
</code></pre></div></div>

<blockquote>
  <p>The default behaviour can be changed using a third party tool called <strong>kubens</strong></p>
</blockquote>

<h1 id="ingress-1">Ingress</h1>

<p>Consider a simple K8s cluster with a deployment and service (See  <a href="K8s/01-basic">K8s/01-basic</a> project for example). Here, the service is exposed to external request by configuring the <code class="language-plaintext highlighter-rouge">type: LoadBalancer</code> and exposing <code class="language-plaintext highlighter-rouge">nodePort: 30000</code>. The service was accessed using the NodeIP (minikube ip)</p>

<p>Ideally a K8s cluster must be as follows</p>

<ul>
  <li>The service should <strong>not</strong> expose external port (via LB external service)</li>
  <li>The service should be accessible via a domain name</li>
  <li>The service should be accessible via HTTPS protocol</li>
</ul>

<h2 id="ingress-component">Ingress Component</h2>

<p>Ingress provides routing rules and is the entry point into the K8s cluster.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># spec.rules</span>
<span class="c1">#   - When request comes to host route the request to "backend" service</span>
<span class="c1">#   - In this case the backend service is myapp-internal-service</span>
<span class="c1">#   - Since it's internal service we use internal service port</span>
<span class="c1">#   - The service is of defualt type (ClusterIP) and the nodePort config is removed</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">myapp.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">myapp-internal-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<h2 id="ingress-controller">Ingress Controller</h2>

<p>An Ingress Component is not enough for the Ingress routing rules to work. We also need an <strong>Ingress Controller</strong>.</p>

<ul>
  <li>An Ingress Controller is the actual implementation of Ingress.</li>
  <li>An Ingress Controller is a pod (or set of pods) within K8s cluster that evaluate and process routing rules</li>
  <li>An Ingress Controller manages all traffic, <strong>redirects requests</strong> to corresponding service.</li>
  <li>An Ingress Controller is the single <strong>entry point</strong> into the cluster.</li>
  <li>There are many third party implementations of Ingress Controller. The K8s implementation is <code class="language-plaintext highlighter-rouge">K8s Nginx Ingress Controller</code></li>
</ul>

<h2 id="external-cloud-lb-deployment">External Cloud LB deployment</h2>

<p>This is the typical deployment of a K8s cluster.</p>

<ul>
  <li>An external cloud loadbalancer (LB) shall front-end all customer requests and shall forward the request to <code class="language-plaintext highlighter-rouge">IngressController</code></li>
  <li>The LB shall have a public IP registered with domain <code class="language-plaintext highlighter-rouge">my-app.com</code></li>
</ul>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFJMXG4lJS1cbnN1YmdyYXBoIENsb3VkTEJcbmRpcmVjdGlvbiBMUlxubGIxKE4xKVxubGIyKE4yKVxubGIzKE4zKVxuJSUtXG5sYjEtLS1sYjItLS1sYjNcbmVuZFxuJSUtXG5zdWJncmFwaCBNeUs4c0NsdXN0ZXJcbmRpcmVjdGlvbiBUQlxuYzEoTXlBcHApOjo6bm9kZVxuYzIobXktc2VydmljZSk6OjpzZXJ2aWNlXG5jMyhteS1pbmdyZXNzKTo6OmluZ3Jlc3NcbmM0KEluZ3Jlc3NDb250cm9sbGVyKTo6OmN0bFxuJSUtXG5jNC0tPmMzLS0-YzItLT5jMVxuZW5kXG4lJS1cbkNsb3VkTEItLT5jNFxuJSUtXG5jbGFzc0RlZiBub2RlICAgIGZpbGw6I2I0ZGNmZixjb2xvcjpibGFjayxzdHJva2U6IzI4NjRkYztcbmNsYXNzRGVmIHNlcnZpY2UgZmlsbDojMjg2NGRjLGNvbG9yOndoaXRlLHN0cm9rZTojNjRhMGZmO1xuY2xhc3NEZWYgaW5ncmVzcyBmaWxsOiNiNDc4MDAsY29sb3I6d2hpdGUsc3Ryb2tlOiNjODhjMDA7XG5jbGFzc0RlZiBjdGwgICAgIGZpbGw6IzhjNjQwMCxjb2xvcjp3aGl0ZSxzdHJva2U6I2I0NzgwMDsiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<h2 id="external-proxy-server-deployment">External Proxy Server deployment</h2>

<p>The deployment uses an external proxy server</p>

<ul>
  <li>An external proxy server could be a hardware or software solution.</li>
  <li>The proxy shall be the only entry point to customer requests and shall forward the request to <code class="language-plaintext highlighter-rouge">IngressController</code></li>
  <li>The proxy shall have a public IP registered with domain <code class="language-plaintext highlighter-rouge">my-app.com</code></li>
</ul>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFJMXG4lJS1cbnN1YmdyYXBoIFByb3h5U2VydmVyXG5kaXJlY3Rpb24gTFJcbnAxKFByb3h5IFNlcnZlcilcbmVuZFxuJSUtXG5zdWJncmFwaCBNeUs4c0NsdXN0ZXJcbmRpcmVjdGlvbiBUQlxuYzEoTXlBcHApOjo6bm9kZVxuYzIobXktc2VydmljZSk6OjpzZXJ2aWNlXG5jMyhteS1pbmdyZXNzKTo6OmluZ3Jlc3NcbmM0KEluZ3Jlc3NDb250cm9sbGVyKTo6OmN0bFxuJSUtXG5jNC0tPmMzLS0-YzItLT5jMVxuZW5kXG4lJS1cblByb3h5U2VydmVyLS0-YzRcbiUlLVxuY2xhc3NEZWYgbm9kZSAgICBmaWxsOiNiNGRjZmYsY29sb3I6YmxhY2ssc3Ryb2tlOiMyODY0ZGM7XG5jbGFzc0RlZiBzZXJ2aWNlIGZpbGw6IzI4NjRkYyxjb2xvcjp3aGl0ZSxzdHJva2U6IzY0YTBmZjtcbmNsYXNzRGVmIGluZ3Jlc3MgZmlsbDojYjQ3ODAwLGNvbG9yOndoaXRlLHN0cm9rZTojYzg4YzAwO1xuY2xhc3NEZWYgY3RsICAgICBmaWxsOiM4YzY0MDAsY29sb3I6d2hpdGUsc3Ryb2tlOiNiNDc4MDA7IiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<h2 id="minikube-deployment">MiniKube deployment</h2>

<h3 id="enable-ingress-controller">Enable Ingress Controller</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Automatically starts the K8s-Nginx implementation of Ingress Controller</span>
<span class="o">&gt;</span> minikube addons <span class="nb">enable </span>ingress

<span class="c"># List namespaces</span>
<span class="o">&gt;</span> kubectl get namespaces
NAME              STATUS   AGE
default           Active   6d20h
ingress-nginx     Active   4m11s
kube-node-lease   Active   6d20h
kube-public       Active   6d20h
kube-system       Active   6d20h

<span class="c"># K8s IngressController runs in ingress-nginx namespace</span>
<span class="c"># Note: ingress-nginx-controller-5959f988fd-76rbx</span>
<span class="o">&gt;</span> kubectl get pods <span class="nt">-n</span> ingress-nginx
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-ml8t8        0/1     Completed   0          4m3s
ingress-nginx-admission-patch-7vjd6         0/1     Completed   0          4m3s
ingress-nginx-controller-5959f988fd-76rbx   1/1     Running     0          4m3s

</code></pre></div></div>

<h2 id="dashboard-for-k8s">Dashboard for K8s</h2>

<h3 id="enable-dashboard">Enable dashboard</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> minikube dashboard

<span class="o">&gt;</span> kubectl get ns
NAME                   STATUS   AGE
default                Active   6d20h
ingress-nginx          Active   9m22s
kube-node-lease        Active   6d20h
kube-public            Active   6d20h
kube-system            Active   6d20h
kubernetes-dashboard   Active   2m17s

<span class="o">&gt;</span> kubectl get services <span class="nt">-n</span> kubernetes-dashboard
NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>    AGE
dashboard-metrics-scraper   ClusterIP   10.100.197.148   &lt;none&gt;        8000/TCP   3m41s
kubernetes-dashboard        ClusterIP   10.109.91.91     &lt;none&gt;        80/TCP     3m41s

</code></pre></div></div>

<h3 id="configure-ingress">Configure Ingress</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># Ingress</span>
<span class="c1"># -------</span>
<span class="c1"># metadata.namespace</span>
<span class="c1">#   - We need to use this to specify that we are using 'kubernetes-dashboard' namespace and NOT default.</span>
<span class="c1">#</span>
<span class="c1"># spec.rules[0].host</span>
<span class="c1">#   - Need to add the host to /etc/hosts</span>
<span class="c1">#</span>
<span class="c1"># spec.rules[0].http.paths[0].backend.serviceName</span>
<span class="c1">#   - The serviceName must match the actual service running in the cluster</span>
<span class="c1">#   - In this case, in the kubernetes-dashboard namespace, kubernetes-dashboard service is runnning</span>
<span class="c1">#</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-dashboard-ingress</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kubernetes-dashboard</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">my.k8s.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">kubernetes-dashboard</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<h3 id="apply-ingress-component">Apply Ingress Component</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> kubectl apply <span class="nt">-f</span> myapp-ingress.yml

<span class="c"># Wait for kubernetes to assign a Public IP for ingres</span>
<span class="o">&gt;</span> kubectl get ingress <span class="nt">-n</span> kubernetes-dashboard <span class="nt">--watch</span>

<span class="c"># Use the PublicIP provided by K8s in /etc/hosts</span>
&lt;ip-provided-by-k8s&gt; my.k8s.com

<span class="c"># Access</span>
http://my.k8s.com
</code></pre></div></div>

<h2 id="default-back-end">Default back-end</h2>

<p>Ingress has an attribute called <code class="language-plaintext highlighter-rouge">Default backend</code> that maps to a service named <code class="language-plaintext highlighter-rouge">default-http-backend:80</code>. Any request that Ingress receives that does not match any routing rule shall be directed here. This can be used to provide a custom error page.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1">#  metadata.name :</span>
<span class="c1">#    - The name should be 'default-http-backend' as Ingress looks for a servcie by the name</span>
<span class="c1">#    - We need to have pods listening at 8080 that provide custom error page</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default-http-backend</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-error-app</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<h2 id="ingress-routing-use-cases">Ingress routing use-cases</h2>

<h3 id="path-prefix-based-routing">Path prefix based routing</h3>

<ul>
  <li>Here <code class="language-plaintext highlighter-rouge">http://myapp.com/prefix1</code> shall route the request to Service <code class="language-plaintext highlighter-rouge">prefix1-service</code></li>
  <li>Here <code class="language-plaintext highlighter-rouge">http://myapp.com/prefix2</code> shall route the request to Service <code class="language-plaintext highlighter-rouge">prefix2-service</code></li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">myapp.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/prefix1</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">prefix1-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">8080</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/prefix2</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">prefix2-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">9090</span>

</code></pre></div></div>

<h3 id="sub-domain-based-routing">Sub-domain based routing</h3>

<p>Here the prefix is part of the domain.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">prefix1.myapp.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">prefix1-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">prefix2.myapp.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">prefix2-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">9090</span>

</code></pre></div></div>

<h2 id="ingress-tls-certificates">Ingress TLS Certificates</h2>

<h3 id="ingress-config">Ingress Config</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># spec.tls.hosts</span>
<span class="c1">#   - The domain hosted by the K8s cluster</span>
<span class="c1">#</span>
<span class="c1">#  spec.tls.secretName</span>
<span class="c1">#    - A reference to the secret component</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-ingress</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">tls</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">myapp.com</span>
      <span class="na">secretName</span><span class="pi">:</span> <span class="s">myapp-secret-tls</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">myapp.com</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">backend</span><span class="pi">:</span>
              <span class="na">serviceName</span><span class="pi">:</span> <span class="s">my-service</span>
              <span class="na">servicePort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<h3 id="tls-certificate-secret-component">TLS Certificate secret component</h3>

<blockquote>
  <p>The secret has to be created in the same namespace as the Ingress component</p>
</blockquote>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># TLS Certificate secret</span>
<span class="c1"># ----------------------</span>
<span class="c1"># data.tls.crt, data.tls.key</span>
<span class="c1">#   - These are actual certificate contents -- NOT path</span>
<span class="c1">#</span>
<span class="c1"># metadata.namespace</span>
<span class="c1">#   - The ingress myapp-ingress and the secret myapp-cert-secert must be in same namespace</span>
<span class="c1">#   - Components can access Secert/ConfigMap only in the same namespace</span>
<span class="c1">##</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myapp-cert-secret</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">tls.crt</span><span class="pi">:</span> <span class="s">&lt;base64 encoded cert&gt;</span>
  <span class="na">tls.key</span><span class="pi">:</span> <span class="s">&lt;base64 encoded cert private key&gt;</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">kubernetes.io/tls</span>
</code></pre></div></div>

<h1 id="helm">Helm</h1>

<p>Helm is used in a couple of ways in K8s</p>

<h2 id="helm-as-package-manager">Helm as package manager</h2>

<p>Helm is a package manager for K8s cluster</p>

<ul>
  <li>Just like <code class="language-plaintext highlighter-rouge">apt</code> is package manager in Ubuntu and <code class="language-plaintext highlighter-rouge">yum</code> is package manager in <code class="language-plaintext highlighter-rouge">CentOS</code></li>
  <li>Download YAML files from central repository.</li>
  <li>Package, upload and share YAML files for various standard use-cases.</li>
</ul>

<h3 id="helm-charts">Helm Charts</h3>

<ul>
  <li>Lets say, we want to use <code class="language-plaintext highlighter-rouge">ElasticStack</code> for logging. This requires wiring several components such as <code class="language-plaintext highlighter-rouge">Stateful Set</code>, <code class="language-plaintext highlighter-rouge">ConfigMap</code>, <code class="language-plaintext highlighter-rouge">Secert</code>  and <code class="language-plaintext highlighter-rouge">Services</code>. Since <code class="language-plaintext highlighter-rouge">ElasticStack</code> is popular and logging is a frequently required use-case, several people will need the same.</li>
  <li>A reusable bundle of YAML files, shared at a centralised repository, that configures <code class="language-plaintext highlighter-rouge">ElasticStack</code> is useful for many.</li>
  <li>This bundle of YAML files is called <strong>Helm Chart</strong>.</li>
  <li>The repository is called <strong>Helm Repository</strong>.</li>
  <li>Helm charts exists for database Apps like MongoDB, ElasticSearch, MySQL</li>
  <li>Helm charts exists for monitoring Apps like Promotheus</li>
  <li>Look out for helm charts in https://artifacthub.io/</li>
</ul>

<h2 id="helm-as-templating-engine">Helm as templating engine</h2>

<p>Consider a K8s cluster running several microservices.</p>

<ul>
  <li>The YAML config of majority of the services are identical expect for the the values for few parameters like name of the deployment, container name, container image, port numbers etc.</li>
  <li>We could have a <strong>template</strong> YAML file with <strong>placeholders</strong>. The actual YAML can be dynamically generated from a file having values (Data Factory design pattern)</li>
  <li>This is reduce the overhead of user in duplicating YAML files.</li>
</ul>

<h3 id="yaml-template-file">YAML template file</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> 
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> 
    <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> 
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> 
</code></pre></div></div>

<h3 id="yaml-value-file">YAML value file</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># values.yml</span>
<span class="c1"># ----------</span>
<span class="c1">##</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">container</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-container</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">my-app-image</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">9001</span>
</code></pre></div></div>

<blockquote>
  <p>Values is an object created based on the values.yml file.
Template YAML is especially useful in CI-CD where the build pipeline will only have the template file and values can be replaced on the fly.</p>
</blockquote>

<h2 id="same-app-deployed-across-different-environment">Same App deployed across different environment</h2>

<p>Consider a deployment where we have Dev, Stage and Prod K8s clusters using the the same YAML files.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IFRCXG4lJS1cbnN1YmdyYXBoIFByb2RDbHVzdGVyXG5kaXJlY3Rpb24gTFJcbmMzZDEoTWljb1NlcnZpY2UtQSlcbmMzZDIoTWljb1NlcnZpY2UtQilcbmMzZDMoTWljb1NlcnZpY2UtQylcbmMzZDQoTWljb1NlcnZpY2UtRClcbmVuZFxuJSUtXG5zdWJncmFwaCBTdGFnZUNsdXN0ZXJcbmRpcmVjdGlvbiBMUlxuYzJkMShNaWNvU2VydmljZS1BKVxuYzJkMihNaWNvU2VydmljZS1CKVxuYzJkMyhNaWNvU2VydmljZS1DKVxuYzJkNChNaWNvU2VydmljZS1EKVxuZW5kXG4lJS1cbnN1YmdyYXBoIERldkNsdXN0ZXJcbmRpcmVjdGlvbiBMUlxuYzFkMShNaWNvU2VydmljZS1BKVxuYzFkMihNaWNvU2VydmljZS1CKVxuYzFkMyhNaWNvU2VydmljZS1DKVxuYzFkNChNaWNvU2VydmljZS1EKVxuZW5kXG4lJS1cbmNsYXNzRGVmIG5vZGUgICAgZmlsbDojYjRkY2ZmLGNvbG9yOmJsYWNrLHN0cm9rZTojMjg2NGRjOyIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In19" /></p>

<p><strong>Issue:</strong> Even if we use templating, we will be generating 3 copies of all YAML files from templates and then deploying a copy per cluster.</p>

<p><strong>Solution:</strong> Generate a custom Helm chart with all YAML files.  Redeploy the same in different clusters.</p>

<h2 id="helm-chart-structure">Helm Chart Structure</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mychart/             <span class="c"># Name of the chart</span>
  Chart.yml        <span class="c"># Meta data about the chart, name version etc</span>
  values.yml     <span class="c"># Default values for place holders</span>
  charts/          <span class="c"># The dependencies for the current chart. May depend on other charts.</span>
  templates/       <span class="c"># Template files</span>
</code></pre></div></div>

<h2 id="install-helm-chart">Install helm chart</h2>

<h3 id="install-with-default-values">Install with default values</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>helm <span class="nb">install</span> &lt;chartname&gt;
</code></pre></div></div>

<p><strong>Working</strong></p>

<ul>
  <li>The template files from <code class="language-plaintext highlighter-rouge">/templates</code> shall be replaced with values in <code class="language-plaintext highlighter-rouge">values.yml</code></li>
  <li>This is produce valid K8s YAML ready to be deployed</li>
</ul>

<h3 id="install-with-custom-values">Install with custom values</h3>

<table>
  <thead>
    <tr>
      <th>mychart/values.yml</th>
      <th>my-values.yml</th>
      <th>.Values object</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>imageName: myapp<br />port:8080<br />version: 1.0</td>
      <td>version:2.0</td>
      <td>imageName: myapp<br />port:8080<br />version: 2.0</td>
    </tr>
  </tbody>
</table>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Placeholders in all template files located in mychart/templates/ will be replaced as per .Values object</span>
helm <span class="nb">install</span> <span class="nt">--values</span><span class="o">=</span>my-values.yml mychart
</code></pre></div></div>

<h2 id="tiller">Tiller</h2>

<p>Helm version 3.0 <strong>removes Tiller support</strong> due to security concerns. Tiller was a server that had access to cluster where the YAML versions could be stored and rolledback.</p>

<h1 id="volumes">Volumes</h1>

<ToDo>
</ToDo>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="cloud" /><summary type="html"><![CDATA[Table of Contents Introduction What is Container Orchestration? Terminologies Core components Node Container Pod Service Ingress ConfigMap Secret Volume Replicas Deployment StatefulSet Architecture Worker Nodes Master Nodes Master Vs worker Nodes Single node cluster Minikube Kubectl Installation Verify Installation Kubectl core commands Basic commands CRUD of K8s component Basic deployment with service MongoDB &amp; MongoExpress deployment Namespace Built-in namespaces Custom namespace Use of namespace Sharing between namespaces Global Components Kubectl and namespace Ingress Ingress Component Ingress Controller External Cloud LB deployment External Proxy Server deployment MiniKube deployment Enable Ingress Controller Dashboard for K8s Enable dashboard Configure Ingress Apply Ingress Component Default back-end Ingress routing use-cases Path prefix based routing Sub-domain based routing Ingress TLS Certificates Ingress Config TLS Certificate secret component Helm Helm as package manager Helm Charts Helm as templating engine YAML template file YAML value file Same App deployed across different environment Helm Chart Structure Install helm chart Install with default values Install with custom values Tiller Volumes]]></summary></entry><entry><title type="html">SpringBoot Mircoservices</title><link href="/spring/2021/05/25/spring-boot-microservices.html" rel="alternate" type="text/html" title="SpringBoot Mircoservices" /><published>2021-05-25T00:00:00+00:00</published><updated>2021-05-25T00:00:00+00:00</updated><id>/spring/2021/05/25/spring-boot-microservices</id><content type="html" xml:base="/spring/2021/05/25/spring-boot-microservices.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ol>
      <li><a href="#spring-boot-starter-package" id="markdown-toc-spring-boot-starter-package">Spring Boot Starter Package</a></li>
    </ol>
  </li>
  <li><a href="#configuration-access-by-microservice" id="markdown-toc-configuration-access-by-microservice">Configuration access by microservice</a>    <ol>
      <li><a href="#overview" id="markdown-toc-overview">Overview</a></li>
      <li><a href="#git-repo" id="markdown-toc-git-repo">Git Repo</a></li>
      <li><a href="#spring-could-config-server" id="markdown-toc-spring-could-config-server">Spring Could Config Server</a>        <ol>
          <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li>
          <li><a href="#application-properties" id="markdown-toc-application-properties">Application Properties</a></li>
          <li><a href="#application" id="markdown-toc-application">Application</a></li>
          <li><a href="#verify-working" id="markdown-toc-verify-working">Verify working</a></li>
        </ol>
      </li>
      <li><a href="#limits-service" id="markdown-toc-limits-service">Limits Service</a>        <ol>
          <li><a href="#dependencies-1" id="markdown-toc-dependencies-1">Dependencies</a></li>
          <li><a href="#application-properties-1" id="markdown-toc-application-properties-1">Application Properties</a></li>
          <li><a href="#controller" id="markdown-toc-controller">Controller</a></li>
          <li><a href="#configuration-bean" id="markdown-toc-configuration-bean">Configuration Bean</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#talking-microservices" id="markdown-toc-talking-microservices">Talking Microservices</a>    <ol>
      <li><a href="#currency-exchange-service" id="markdown-toc-currency-exchange-service">Currency Exchange Service</a>        <ol>
          <li><a href="#dependencies-2" id="markdown-toc-dependencies-2">Dependencies</a></li>
          <li><a href="#sql-file-to-populate-data" id="markdown-toc-sql-file-to-populate-data">SQL file to populate data</a></li>
          <li><a href="#application-properties-2" id="markdown-toc-application-properties-2">Application Properties</a></li>
          <li><a href="#database-console" id="markdown-toc-database-console">Database Console</a></li>
          <li><a href="#controller-1" id="markdown-toc-controller-1">Controller</a></li>
          <li><a href="#service" id="markdown-toc-service">Service</a></li>
          <li><a href="#entity-bean" id="markdown-toc-entity-bean">Entity Bean</a></li>
          <li><a href="#rest-request" id="markdown-toc-rest-request">REST Request</a></li>
        </ol>
      </li>
      <li><a href="#currency-calculation-service" id="markdown-toc-currency-calculation-service">Currency Calculation Service</a>        <ol>
          <li><a href="#dependencies-3" id="markdown-toc-dependencies-3">Dependencies</a></li>
          <li><a href="#application-properties-3" id="markdown-toc-application-properties-3">Application Properties</a></li>
          <li><a href="#controller-2" id="markdown-toc-controller-2">Controller</a></li>
          <li><a href="#java-bean" id="markdown-toc-java-bean">Java Bean</a></li>
          <li><a href="#rest-request-1" id="markdown-toc-rest-request-1">REST Request</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#talking-microservices-via-feign" id="markdown-toc-talking-microservices-via-feign">Talking Microservices via Feign</a>    <ol>
      <li><a href="#currency-calculation-service-1" id="markdown-toc-currency-calculation-service-1">Currency Calculation Service</a>        <ol>
          <li><a href="#dependencies-4" id="markdown-toc-dependencies-4">Dependencies</a></li>
          <li><a href="#feign-client-proxy" id="markdown-toc-feign-client-proxy">Feign Client Proxy</a></li>
          <li><a href="#controller-3" id="markdown-toc-controller-3">Controller</a></li>
          <li><a href="#rest-request-2" id="markdown-toc-rest-request-2">REST Request</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#naming-service" id="markdown-toc-naming-service">Naming service</a>    <ol>
      <li><a href="#naming-service-server" id="markdown-toc-naming-service-server">Naming service server</a>        <ol>
          <li><a href="#dependencies-5" id="markdown-toc-dependencies-5">Dependencies</a></li>
          <li><a href="#applicationproperties" id="markdown-toc-applicationproperties">ApplicationProperties</a></li>
          <li><a href="#eureka-dashboard" id="markdown-toc-eureka-dashboard">Eureka Dashboard</a></li>
        </ol>
      </li>
      <li><a href="#registering-with-naming-server" id="markdown-toc-registering-with-naming-server">Registering with naming server</a>        <ol>
          <li><a href="#dependencies-6" id="markdown-toc-dependencies-6">Dependencies</a></li>
          <li><a href="#application-properties-4" id="markdown-toc-application-properties-4">Application Properties</a>            <ol>
              <li><a href="#currency-calculation-service-2" id="markdown-toc-currency-calculation-service-2">Currency Calculation Service</a></li>
              <li><a href="#currency-exchange-service-1" id="markdown-toc-currency-exchange-service-1">Currency Exchange Service</a></li>
            </ol>
          </li>
          <li><a href="#eureka-dashboard-1" id="markdown-toc-eureka-dashboard-1">Eureka Dashboard</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#load-balancing-services" id="markdown-toc-load-balancing-services">Load balancing services</a>    <ol>
      <li><a href="#start-multiple-instances-of-services" id="markdown-toc-start-multiple-instances-of-services">Start multiple instances of services</a></li>
      <li><a href="#verify-registration-with-naming-server" id="markdown-toc-verify-registration-with-naming-server">Verify registration with naming server</a></li>
      <li><a href="#configure-lb-via-feign" id="markdown-toc-configure-lb-via-feign">Configure LB via Feign</a></li>
      <li><a href="#verify-lb" id="markdown-toc-verify-lb">Verify LB</a></li>
    </ol>
  </li>
  <li><a href="#api-gateway" id="markdown-toc-api-gateway">API Gateway</a>    <ol>
      <li><a href="#gateway-service" id="markdown-toc-gateway-service">Gateway Service</a>        <ol>
          <li><a href="#dependencies-7" id="markdown-toc-dependencies-7">Dependencies</a></li>
          <li><a href="#application-properties-5" id="markdown-toc-application-properties-5">Application Properties</a></li>
          <li><a href="#verify-registration-with-naming-server-1" id="markdown-toc-verify-registration-with-naming-server-1">Verify registration with naming server</a></li>
          <li><a href="#verify-access-via-gateway" id="markdown-toc-verify-access-via-gateway">Verify access via Gateway</a></li>
        </ol>
      </li>
      <li><a href="#routes" id="markdown-toc-routes">Routes</a>        <ol>
          <li><a href="#simple-redirection" id="markdown-toc-simple-redirection">Simple Redirection</a></li>
          <li><a href="#filters" id="markdown-toc-filters">Filters</a></li>
          <li><a href="#filters-to-rewrite-uri" id="markdown-toc-filters-to-rewrite-uri">Filters to rewrite URI</a></li>
          <li><a href="#simplify-uri-to-services" id="markdown-toc-simplify-uri-to-services">Simplify URI to services</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#resilience4j" id="markdown-toc-resilience4j">Resilience4J</a>    <ol>
      <li><a href="#retry-with-fallback" id="markdown-toc-retry-with-fallback">Retry with fallback</a>        <ol>
          <li><a href="#dependencies-8" id="markdown-toc-dependencies-8">Dependencies</a></li>
          <li><a href="#controller-4" id="markdown-toc-controller-4">Controller</a></li>
          <li><a href="#application-properties-6" id="markdown-toc-application-properties-6">Application Properties</a></li>
        </ol>
      </li>
      <li><a href="#circuit-breaker" id="markdown-toc-circuit-breaker">Circuit Breaker</a>        <ol>
          <li><a href="#dependencies-9" id="markdown-toc-dependencies-9">Dependencies</a></li>
          <li><a href="#controller-5" id="markdown-toc-controller-5">Controller</a></li>
          <li><a href="#working-of-circuit-breaker" id="markdown-toc-working-of-circuit-breaker">Working of Circuit Breaker</a></li>
        </ol>
      </li>
      <li><a href="#rate-limiter" id="markdown-toc-rate-limiter">Rate Limiter</a>        <ol>
          <li><a href="#controller-6" id="markdown-toc-controller-6">Controller</a></li>
          <li><a href="#application-properties-7" id="markdown-toc-application-properties-7">Application Properties</a></li>
        </ol>
      </li>
      <li><a href="#bulkhead" id="markdown-toc-bulkhead">Bulkhead</a>        <ol>
          <li><a href="#controller-7" id="markdown-toc-controller-7">Controller</a></li>
          <li><a href="#application-properties-8" id="markdown-toc-application-properties-8">Application Properties</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#microservices-with-docker" id="markdown-toc-microservices-with-docker">Microservices with Docker</a>    <ol>
      <li><a href="#distributed-tracing-service" id="markdown-toc-distributed-tracing-service">Distributed tracing service</a>        <ol>
          <li><a href="#dependencies-10" id="markdown-toc-dependencies-10">Dependencies</a></li>
          <li><a href="#application-properties-9" id="markdown-toc-application-properties-9">Application Properties</a></li>
        </ol>
      </li>
      <li><a href="#build-docker-image-using-maven" id="markdown-toc-build-docker-image-using-maven">Build Docker image using Maven</a>        <ol>
          <li><a href="#update-plugin-configuration" id="markdown-toc-update-plugin-configuration">Update plugin configuration</a></li>
          <li><a href="#make-mvn-accessible-as-root" id="markdown-toc-make-mvn-accessible-as-root">Make <code class="language-plaintext highlighter-rouge">mvn</code> accessible as root</a></li>
          <li><a href="#execute-the-build-image-goal-of-spring-boot-plugin" id="markdown-toc-execute-the-build-image-goal-of-spring-boot-plugin">Execute the <code class="language-plaintext highlighter-rouge">build-image</code> goal of <code class="language-plaintext highlighter-rouge">spring-boot</code> plugin</a></li>
          <li><a href="#start-docker-container-for-currencyexchangeservice" id="markdown-toc-start-docker-container-for-currencyexchangeservice">Start docker container for <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code></a></li>
        </ol>
      </li>
      <li><a href="#manage-services-using-docker-compose" id="markdown-toc-manage-services-using-docker-compose">Manage services using docker-compose</a>        <ol>
          <li><a href="#yaml-file" id="markdown-toc-yaml-file">YAML file</a></li>
          <li><a href="#start-all-containers" id="markdown-toc-start-all-containers">Start all containers</a></li>
          <li><a href="#verify-requests" id="markdown-toc-verify-requests">Verify requests</a></li>
          <li><a href="#verify-registration-in-eureka" id="markdown-toc-verify-registration-in-eureka">Verify registration in Eureka</a></li>
        </ol>
      </li>
      <li><a href="#rabbitmq-service" id="markdown-toc-rabbitmq-service">RabbitMQ Service</a>        <ol>
          <li><a href="#dependency" id="markdown-toc-dependency">Dependency</a></li>
          <li><a href="#application-properties-10" id="markdown-toc-application-properties-10">Application Properties</a></li>
          <li><a href="#docker-compose" id="markdown-toc-docker-compose">Docker Compose</a></li>
          <li><a href="#verify-requests-1" id="markdown-toc-verify-requests-1">Verify requests</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

</nav>
<h1 id="introduction">Introduction</h1>

<p>The document details creating a sample application to demo spring boot micro-services (MS).  Microservices are modular, atomic, building blocks that can be scaled and distributed as part of a larger system.</p>

<h2 id="spring-boot-starter-package">Spring Boot Starter Package</h2>

<p>The  <a href="https://start.spring.io/">Spring Starter</a> provides a wizard to create and download an archive with dependencies.</p>

<ul>
  <li>Fill in the project package base name as group-id, project name as artifact-id</li>
  <li>Add dependencies</li>
  <li>Generate the project archive and import it as maven project in Eclipse IDE.</li>
</ul>

<p><img src="/assets/images/spring/SpringInitializer.jpg" alt="SpringInitializer" /></p>

<h1 id="configuration-access-by-microservice">Configuration access by microservice</h1>

<p>The below service shall demonstrate</p>

<ul>
  <li>Creating profiles (like qa, dev, default)</li>
  <li>Having different configuration (In this case, properties file) for each profile. The properties file shall have the format <code class="language-plaintext highlighter-rouge">&lt;mircoservice-name&gt;-&lt;profile&gt;.properties</code>. Therefore, QA shall have a properties file <code class="language-plaintext highlighter-rouge">limits-service-qa.properties</code></li>
  <li>Save the properties files in GIT repository</li>
  <li>Create <strong>Spring Cloud Config Server Microservice</strong> – The microservice shall connect to a config repository like git and fetch configuration</li>
  <li>Create <strong>Limits Microservice</strong> – Exposes REST services to return a JSON with properties for the configured profile.</li>
</ul>

<h2 id="overview">Overview</h2>

<p><img src="/assets/images/spring/LimitsService.jpg" alt="LimitsService" /></p>

<h2 id="git-repo">Git Repo</h2>

<p>Create a GIT repository and add the following files. Commit and push properties to Github.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Default profile</span>
<span class="o">&gt;</span> <span class="nb">cat </span>limits-service.properties
limits-service.minimum <span class="o">=</span> 1
limits-service.maximum <span class="o">=</span> 1000

<span class="c"># Dev profile -- Note that max is commented</span>
<span class="o">&gt;</span> <span class="nb">cat </span>limits-service-dev.properties
limits-service.minimum <span class="o">=</span> 3
<span class="c"># limits-service.maximum = 3000</span>

<span class="c"># QA profile -- Has higher limits needed for testing.</span>
<span class="o">&gt;</span> <span class="nb">cat </span>limits-service-qa.properties
limits-service.minimum <span class="o">=</span> 5
limits-service.maximum <span class="o">=</span> 5000
</code></pre></div></div>

<h2 id="spring-could-config-server">Spring Could Config Server</h2>

<h3 id="dependencies">Dependencies</h3>

<p>Create spring boot project with following dependencies</p>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ConfigServer</td>
      <td>Connect to repositories like git</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
  </tbody>
</table>

<h3 id="application-properties">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Name of the microservice
</span><span class="py">spring.application.name</span><span class="p">=</span><span class="s">spring-cloud-config-server</span>

<span class="c"># Port to run the current service
</span><span class="py">server.port</span><span class="p">=</span><span class="s">8888</span>

<span class="c"># URI of the github project
</span><span class="py">spring.cloud.config.server.git.uri</span><span class="p">=</span><span class="s">https://github.com/cafeduke/Learn</span>

<span class="c"># Search path to look for config files
</span><span class="py">spring.cloud.config.server.git.searchPaths</span><span class="p">=</span><span class="s">JavaEE/Spring/WebService/L02_Mircoservice/config-repo</span>
</code></pre></div></div>

<h3 id="application">Application</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.sprintcloudconfigserver</span><span class="o">;</span>

<span class="c1">// Note: Add annotation to enable app as configuration server</span>
<span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SprintCloudConfigServerApplication</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SprintCloudConfigServerApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
  <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h3 id="verify-working">Verify working</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Verify working of the following URLs</span>
<span class="c"># ------------------------------------</span>

<span class="c"># Default profile</span>
http://localhost:8888/limits-service/default

<span class="c"># QA profile</span>
http://localhost:8888/limits-service/qa

<span class="c"># Dev profile</span>
http://localhost:8888/limits-service/dev
</code></pre></div></div>

<h2 id="limits-service">Limits Service</h2>

<h3 id="dependencies-1">Dependencies</h3>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Spring Web</td>
      <td>Build restful application using Spring MVC</td>
    </tr>
    <tr>
      <td>Config Client</td>
      <td>Client to connect to SpringCloudConfigServer</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
    <tr>
      <td>SpringActuator</td>
      <td>Monitor and manage applications</td>
    </tr>
  </tbody>
</table>

<h3 id="application-properties-1">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">limits-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8080</span>

<span class="c"># The config profile to be used
</span><span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">qa</span>

<span class="c"># The config server URI
</span><span class="py">spring.config.import</span><span class="p">=</span><span class="s">optional:configserver:http://localhost:8888</span>

<span class="c"># Ensure the properties obtained from confingserver (above) overrides the below properties
</span><span class="py">limits-service.minimum</span><span class="p">=</span><span class="s">11</span>
<span class="py">limits-service.maximum</span><span class="p">=</span><span class="s">1111</span>
</code></pre></div></div>

<h3 id="controller">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.limitsservice</span><span class="o">;</span>

<span class="cm">/**
 * The controller simply returns the LimitsConfigBean
 */</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LimitsConfigController</span>
<span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">LimitsConfigBean</span> <span class="n">config</span><span class="o">;</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/limits"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">LimitsConfigBean</span> <span class="nf">getLimitsConfig</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">config</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="configuration-bean">Configuration Bean</h3>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">LimitsConfigBean</code> is a component annotated with <code class="language-plaintext highlighter-rouge">@Component</code></li>
  <li>The <code class="language-plaintext highlighter-rouge">@ConfigurationProperties</code> annotation tells the name of the properties file to look for.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.limitsservice</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"limits-service"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LimitsConfigBean</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">minimum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

  <span class="kd">private</span> <span class="kt">int</span> <span class="n">maximum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

  <span class="kd">protected</span> <span class="nf">LimitsConfigBean</span><span class="o">()</span>
  <span class="o">{</span>

  <span class="o">}</span>

  <span class="cm">/* Getters and Setters*/</span>
  <span class="o">...</span>
  <span class="o">...</span>
<span class="o">}</span>

</code></pre></div></div>

<h1 id="talking-microservices">Talking Microservices</h1>

<p>Create two mircroservies <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> and <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code>.</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> provides the conversion rate from one currency to another.
    <ul>
      <li>The REST URI shall be <code class="language-plaintext highlighter-rouge">http://&lt;host:port&gt;/currency-exchange-service/from/&lt;currency&gt;/to/&lt;currency&gt;</code></li>
      <li>Example: <code class="language-plaintext highlighter-rouge">http://localhost:8888/currency-exchange-service/from/USD/to/INR</code> shall provide the conversion multiple for <code class="language-plaintext highlighter-rouge">USD to INR</code></li>
    </ul>
  </li>
  <li>The <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code> calculates the quantity of the <code class="language-plaintext highlighter-rouge">to</code> currency for a given quantity of the <code class="language-plaintext highlighter-rouge">from</code>  currency.
    <ul>
      <li>The REST URI shall be <code class="language-plaintext highlighter-rouge">http://&lt;host:port&gt;/currency-exchange-service/from/&lt;currency&gt;/to/&lt;currency&gt;/quantity/&lt;quantity&gt;</code></li>
      <li>Example: <code class="language-plaintext highlighter-rouge">http://localhost:8888/currency-exchange-service/from/USD/to/INR/50</code>  shall provide the value in <code class="language-plaintext highlighter-rouge">INR</code> for <code class="language-plaintext highlighter-rouge">50 USD</code></li>
    </ul>
  </li>
</ul>

<h2 id="currency-exchange-service">Currency Exchange Service</h2>

<h3 id="dependencies-2">Dependencies</h3>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Spring Web</td>
      <td>Build restful application using Spring MVC</td>
    </tr>
    <tr>
      <td>Config Client</td>
      <td>Client to connect to SpringCloudConfigServer</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
    <tr>
      <td>SpringActuator</td>
      <td>Monitor and manage applications</td>
    </tr>
    <tr>
      <td>Database</td>
      <td>In-memory database – h2</td>
    </tr>
  </tbody>
</table>

<h3 id="sql-file-to-populate-data">SQL file to populate data</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">insert</span> <span class="k">into</span> <span class="n">exchange_value</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">currency_from</span><span class="p">,</span><span class="n">currency_to</span><span class="p">,</span><span class="n">conversion_multiple</span><span class="p">,</span><span class="n">port</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="mi">101</span><span class="p">,</span> <span class="s1">'USD'</span><span class="p">,</span> <span class="s1">'INR'</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">exchange_value</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">currency_from</span><span class="p">,</span><span class="n">currency_to</span><span class="p">,</span><span class="n">conversion_multiple</span><span class="p">,</span><span class="n">port</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="mi">102</span><span class="p">,</span> <span class="s1">'EUR'</span><span class="p">,</span> <span class="s1">'INR'</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">exchange_value</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">currency_from</span><span class="p">,</span><span class="n">currency_to</span><span class="p">,</span><span class="n">conversion_multiple</span><span class="p">,</span><span class="n">port</span><span class="p">)</span> <span class="k">values</span> <span class="p">(</span><span class="mi">103</span><span class="p">,</span> <span class="s1">'AUD'</span><span class="p">,</span> <span class="s1">'INR'</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="application-properties-2">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">currency-exchange-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8000</span>

<span class="c"># Database properties
# -------------------
</span>
<span class="c"># JDBC url
</span><span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span>

<span class="c"># Show sql statements on console log
</span><span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>

<span class="c"># Provide a UI console for DB
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>
</code></pre></div></div>

<h3 id="database-console">Database Console</h3>

<ul>
  <li>Login to http://localhost:8000/h2-console
<img src="/assets/images/spring/H2DBLogin.jpg" alt="H2DBLogin" /></li>
  <li>Access the console and verify DB table with data
<img src="/assets/images/spring/H2DBConsole.jpg" alt="H2DBConsole" /></li>
</ul>

<h3 id="controller-1">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyExchangeController</span>
<span class="o">{</span>
  <span class="cm">/**
   * Multiple instances of currency exchange controller shall be running.
   * The server port shall be fetched from the env to identify the specific instance that is being used
   */</span>
  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">Environment</span> <span class="n">env</span><span class="o">;</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">ExchangeValueService</span> <span class="n">exchangeValueService</span><span class="o">;</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-exchange/from/{from}/to/{to}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">ExchangeValue</span> <span class="nf">getExchangeValue</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">ExchangeValue</span> <span class="n">exchangeValue</span> <span class="o">=</span> <span class="n">exchangeValueService</span><span class="o">.</span><span class="na">findByFromAndTo</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">exchangeValue</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="s">"No conversion exists for given currencies. from="</span> <span class="o">+</span> <span class="n">from</span> <span class="o">+</span> <span class="s">" to="</span> <span class="o">+</span> <span class="n">to</span><span class="o">));</span>
    <span class="n">exchangeValue</span><span class="o">.</span><span class="na">setEnv</span><span class="o">(</span><span class="s">"ServerPort="</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"local.server.port"</span><span class="o">)));</span>
    <span class="k">return</span> <span class="n">exchangeValue</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="service">Service</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ExchangeValueService</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">ExchangeValue</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span>
<span class="o">{</span>
  <span class="cm">/**
   * Just by adding the interface definition, JPA shall provide the implementation!
   *
   * @param from The 'from' currency field
   * @param to The 'to' currency field
   * @return The ExchangeValue entity object.
   */</span>
  <span class="nc">ExchangeValue</span> <span class="nf">findByFromAndTo</span><span class="o">(</span><span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="entity-bean">Entity Bean</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencyexchangeservice</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExchangeValue</span>
<span class="o">{</span>
  <span class="nd">@Id</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

  <span class="cm">/**
   * We cannot have an SQL column name as 'from' as it is an SQL keyword.
   */</span>
  <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"currency_from"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">from</span><span class="o">;</span>

  <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"currency_to"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">to</span><span class="o">;</span>

  <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"conversion_multiple"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span><span class="o">;</span>

  <span class="cm">/**
   * This is not mapped to database
   * The environment details must indicate the server sending the response.
   */</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">env</span><span class="o">;</span>

  <span class="kd">protected</span> <span class="nf">ExchangeValue</span><span class="o">()</span>
  <span class="o">{</span>

  <span class="o">}</span>

  <span class="kd">protected</span> <span class="nf">ExchangeValue</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="kd">super</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">from</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">to</span> <span class="o">=</span> <span class="n">to</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">conversionMultiple</span> <span class="o">=</span> <span class="n">conversionMultiple</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="cm">/* Getters and Setters */</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="rest-request">REST Request</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>json-get http://localhost:8000/currency-exchange/from/USD/to/INR
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="currency-calculation-service">Currency Calculation Service</h2>

<h3 id="dependencies-3">Dependencies</h3>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Spring Web</td>
      <td>Build restful application using Spring MVC</td>
    </tr>
    <tr>
      <td>Config Client</td>
      <td>Client to connect to SpringCloudConfigServer</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
    <tr>
      <td>SpringActuator</td>
      <td>Monitor and manage applications</td>
    </tr>
    <tr>
      <td>Database</td>
      <td>In-memory database – h2</td>
    </tr>
  </tbody>
</table>

<h3 id="application-properties-3">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">currency-calculation-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8100</span>

<span class="c"># The config server URI
</span><span class="py">spring.config.import</span><span class="p">=</span><span class="s">optional:configserver:http://localhost:8888</span>
</code></pre></div></div>
<h3 id="controller-2">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyCalculationServiceController</span>
<span class="o">{</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-calculator/from/{from}/to/{to}/quantity/{quantity}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">CurrencyCalculationBean</span> <span class="nf">getCalculation</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="c1">// A map of URI parameter to its value</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">mapParamValue</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">.</span><span class="na">ofEntries</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"from"</span><span class="o">,</span> <span class="n">from</span><span class="o">),</span> <span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"to"</span><span class="o">,</span> <span class="n">to</span><span class="o">));</span>

    <span class="cm">/*
     * The URL to the service that is requested is hard-coded.
     * The JSON obtained by URL, passed to getForEntity, is mapped to bean 'CurrencyCalculationBean' (Ensure the JSON response and field names in bean are identical)
     */</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CurrencyCalculationBean</span><span class="o">&gt;</span> <span class="n">responseEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">()</span>
      <span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="s">"http://localhost:8000/currency-exchange/from/{from}/to/{to}"</span><span class="o">,</span> <span class="nc">CurrencyCalculationBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mapParamValue</span><span class="o">);</span>
    <span class="nc">CurrencyCalculationBean</span> <span class="n">currencyCalculationBean</span> <span class="o">=</span> <span class="n">responseEntity</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
    <span class="n">currencyCalculationBean</span><span class="o">.</span><span class="na">setQuantity</span><span class="o">(</span><span class="n">quantity</span><span class="o">);</span>
    <span class="n">currencyCalculationBean</span><span class="o">.</span><span class="na">doCalulate</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">currencyCalculationBean</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="java-bean">Java Bean</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyCalculationBean</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">from</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">to</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span> <span class="o">=</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">quantity</span> <span class="o">=</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">totalCalculatedAmount</span> <span class="o">=</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">env</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nf">CurrencyCalculationBean</span><span class="o">()</span>
  <span class="o">{</span>

  <span class="o">}</span>

  <span class="kd">public</span> <span class="nf">CurrencyCalculationBean</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">quantity</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">totalCalculatedAmount</span><span class="o">,</span> <span class="nc">String</span> <span class="n">env</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="kd">super</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">from</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">to</span> <span class="o">=</span> <span class="n">to</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">conversionMultiple</span> <span class="o">=</span> <span class="n">conversionMultiple</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">quantity</span> <span class="o">=</span> <span class="n">quantity</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">totalCalculatedAmount</span> <span class="o">=</span> <span class="n">totalCalculatedAmount</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">setEnv</span><span class="o">(</span><span class="n">env</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doCalulate</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="n">totalCalculatedAmount</span> <span class="o">=</span> <span class="n">quantity</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">conversionMultiple</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="cm">/* Getters and Setters*/</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="rest-request-1">REST Request</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get http://localhost:8100/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>
<h1 id="talking-microservices-via-feign">Talking Microservices via Feign</h1>

<p>In the previous section, we had to hard-code the URL of the target mircoservice and also write a lot of code to make micro services talk to each other. Spring cloud provides Feign (pronounced fay-in)</p>

<h2 id="currency-calculation-service-1">Currency Calculation Service</h2>

<h3 id="dependencies-4">Dependencies</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Feign is used by a microservice to talk to other microservices.
 * We need to
 * - Update pom.xml to include artifact 'spring-cloud-starter-openfeign'
 * - Add the '@EnableFeignClients' annotation to the application.
 */</span>
<span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableFeignClients</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyCalculationServiceApplication</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">CurrencyCalculationServiceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="feign-client-proxy">Feign Client Proxy</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * The FeignClient name is typically the application name (See spring.application.name in application.properties) of the target service.
 *
 */</span>
<span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"currency-exchange-service"</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"localhost:8000"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CurrencyExchangeServiceProxy</span>
<span class="o">{</span>
  <span class="cm">/**
   * This method of the proxy
   * - Needs to invoke the currency-exchange microservice passing the 'from' and 'to'
   * - The resultant JSON needs to be mapped to CurrencyCalcuationBean
   *
   * @param from
   * @param to
   * @return
   */</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-exchange/from/{from}/to/{to}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">CurrencyCalculationBean</span> <span class="nf">getExchangeValue</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<h3 id="controller-3">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CurrencyCalculationServiceController</span>
<span class="o">{</span>
  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">CurrencyExchangeServiceProxy</span> <span class="n">proxy</span><span class="o">;</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-calculator/from/{from}/to/{to}/quantity/{quantity}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">CurrencyCalculationBean</span> <span class="nf">getCalculation</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">CurrencyCalculationBean</span> <span class="n">currCalculationBean</span> <span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="na">getExchangeValue</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
    <span class="n">currCalculationBean</span><span class="o">.</span><span class="na">setQuantity</span><span class="o">(</span><span class="n">quantity</span><span class="o">);</span>
    <span class="n">currCalculationBean</span><span class="o">.</span><span class="na">doCalulate</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">currCalculationBean</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-calculator-legacy/from/{from}/to/{to}/quantity/{quantity}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">CurrencyCalculationBean</span> <span class="nf">getCalculationLegacy</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">BigDecimal</span> <span class="n">quantity</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="c1">// A map of URI parameter to its value</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">mapParamValue</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">.</span><span class="na">ofEntries</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"from"</span><span class="o">,</span> <span class="n">from</span><span class="o">),</span> <span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"to"</span><span class="o">,</span> <span class="n">to</span><span class="o">));</span>
    <span class="o">...</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="rest-request-2">REST Request</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>json-get http://localhost:8100/currency-calculator/from/USD/to/INR/quantity/5
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 5,
  <span class="s2">"totalCalculatedAmount"</span>: 325,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>

<span class="o">&gt;</span> json-get http://localhost:8100/currency-calculator-legacy/from/USD/to/INR/quantity/5
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 5,
  <span class="s2">"totalCalculatedAmount"</span>: 325,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="naming-service">Naming service</h1>

<p>Instead of hardcoding URLs the microservices will be registered with the naming server (service registry).</p>

<p><img src="/assets/images/spring/LoadBalanceMicroservices.jpg" alt="H2DBConsole" /></p>

<p>In the above example:</p>

<ul>
  <li>All services are registered with the naming server.</li>
  <li>Multiple instances of <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> are being load-balanced using an LB.</li>
  <li>The <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code> shall query the naming server for the URL of the <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code>.</li>
  <li>The naming server shall return the URL to the load-balancer.</li>
  <li>The CurrencyCalculationServer shall request the corresponding LB URL which shall reach one of the <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> instance.</li>
</ul>

<h2 id="naming-service-server">Naming service server</h2>

<h3 id="dependencies-5">Dependencies</h3>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Config Client</td>
      <td>Client to connect to SpringCloudConfigServer</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
    <tr>
      <td>SpringActuator</td>
      <td>Monitor and manage applications</td>
    </tr>
    <tr>
      <td>Eureka Server</td>
      <td>Naming server</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableEurekaServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NamingServerApplication</span>
<span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">NamingServerApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="applicationproperties">ApplicationProperties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">naming-server</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8761</span>

<span class="c"># Do not register this client withe eureka
</span><span class="py">eureka.client.register-with-eureka</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Do not fetch eureka registry information from eureka server
</span><span class="py">eureka.client.fetch-registry</span><span class="p">=</span><span class="s">false</span>
</code></pre></div></div>

<h3 id="eureka-dashboard">Eureka Dashboard</h3>

<p>We can launch the appliation to see that no instances are currently registered with Eureka naming server.</p>

<p><img src="/assets/images/spring/EurekaNamingServerDash.jpg" alt="H2DBLogin" /></p>

<h2 id="registering-with-naming-server">Registering with naming server</h2>

<p>A microservice can register itself with the naming server by configuring Eureka client.</p>

<h3 id="dependencies-6">Dependencies</h3>

<p>Update the pom.xml of the corresponding miroservices (CurrencyCalculationService and CurrencyExchangeService) to include eureka-client</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- EurekaClient: client to connect to naming server --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h3 id="application-properties-4">Application Properties</h3>

<p>Update the application properties of microservices. Config the client to point to the naming server URL.</p>

<h4 id="currency-calculation-service-2">Currency Calculation Service</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">currency-calculation-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8100</span>

<span class="c"># The config server URI
</span><span class="py">spring.config.import</span><span class="p">=</span><span class="s">optional:configserver:http://localhost:8888</span>

<span class="c"># NamingServer properties
# -----------------------
# Eureka client dependency is added in the microservice to talk to naming server
</span><span class="py">eureka.client.serviceUrl.defaultZone</span><span class="p">=</span><span class="s">http://localhost:8761/eureka</span>

</code></pre></div></div>

<h4 id="currency-exchange-service-1">Currency Exchange Service</h4>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">currency-exchange-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8000</span>

<span class="c"># Database properties
# -------------------
# JDBC url
</span><span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span>

<span class="c"># Show sql statements on console log
</span><span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>

<span class="c"># Provide a UI console for DB
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>

<span class="c"># NamingServer properties
# -----------------------
# Eureka client dependency is added in the microservice to talk to naming server
</span><span class="py">eureka.client.serviceUrl.defaultZone</span><span class="p">=</span><span class="s">http://localhost:8761/eureka</span>
</code></pre></div></div>

<h3 id="eureka-dashboard-1">Eureka Dashboard</h3>

<p>Restart naming server followed by mircroservices (CurrencyExchange and CurrencyCalculation) Open the eureka dashboard at http://localhost:8761/ to verify that services are registered.</p>

<table>
  <thead>
    <tr>
      <th>Application</th>
      <th>AMIs</th>
      <th>Availability Zones</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>**CURRENCY-CALCULATION-SERVICE**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[192.168.0.105:currency-calculation-service:8100](http://192.168.0.105:8100/actuator/info)</td>
    </tr>
    <tr>
      <td>**CURRENCY-EXCHANGE-SERVICE**</td>
      <td>**n/a** (2)</td>
      <td>(2)</td>
      <td>[192.168.0.105:currency-exchange-service:8000](http://192.168.0.105:8000/actuator/info)</td>
    </tr>
  </tbody>
</table>

<h1 id="load-balancing-services">Load balancing services</h1>

<h2 id="start-multiple-instances-of-services">Start multiple instances of services</h2>

<p>Lets start multiple instances of <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> (Say, CurrencyExchangeServiceApplicationA and CurrencyExchangeServiceApplicationB)</p>

<p>This can be done using eclipse as follows</p>

<ul>
  <li>Navigate to (Run &gt; RunConfigurations)</li>
  <li>Click on ‘Duplicate the launch configuration’ (copy) button</li>
  <li>Provide a name like CurrencyExchangeServiceApplicationB</li>
  <li>Add <code class="language-plaintext highlighter-rouge">-Dserver.port=8001</code> to VM Arguments</li>
</ul>

<h2 id="verify-registration-with-naming-server">Verify registration with naming server</h2>

<p>Open the eureka dashboard at http://localhost:8761/  and verify registration of both instances of <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> and CurrencyCalculationService</p>

<table>
  <thead>
    <tr>
      <th>Application</th>
      <th>AMIs</th>
      <th>Availability Zones</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>**CURRENCY-CALCULATION-SERVICE**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[192.168.0.105:currency-calculation-service:8100](http://192.168.0.105:8100/actuator/info)</td>
    </tr>
    <tr>
      <td>**CURRENCY-EXCHANGE-SERVICE**</td>
      <td>**n/a** (2)</td>
      <td>(2)</td>
      <td>[192.168.0.105:currency-exchange-service:8000](http://192.168.0.105:8000/actuator/info) <br />[192.168.0.105:currency-exchange-service:8001](http://192.168.0.105:8001/actuator/info)</td>
    </tr>
  </tbody>
</table>

<h2 id="configure-lb-via-feign">Configure LB via Feign</h2>

<p>Earlier (Before having naming server),</p>

<ul>
  <li>In <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code>, class <code class="language-plaintext highlighter-rouge">CurrencyExchangeServiceProxy</code> (Uses <code class="language-plaintext highlighter-rouge">@FeignClient</code>) abstracted talks to <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code></li>
  <li>The <code class="language-plaintext highlighter-rouge">@FeignClient</code> annotation mentioned the <strong>name</strong> of service and the <strong>URL</strong> to be used.</li>
  <li>The CurrencyExchangeServiceProxy used the URL (in <code class="language-plaintext highlighter-rouge">@FeignClient</code> annotation) to connect to the target service.</li>
</ul>

<p>Now,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code> and <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> instances are registered with the Eureka naming server</li>
  <li>The <code class="language-plaintext highlighter-rouge">@FeignClient</code> annotation <strong>just</strong> mentions the <strong>name</strong> of the service alone.</li>
  <li>The <code class="language-plaintext highlighter-rouge">CurrencyExchangeServiceProxy</code> fetches the URL of the target service from the naming server.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencycalculationservice</span><span class="o">;</span>

<span class="cm">/**
 * The FeignClient name is typically the application name (See spring.application.name in application.properties) of the target service.
 *
 */</span>
<span class="c1">// @FeignClient(name = "currency-exchange-service", url = "localhost:8000")</span>
<span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"currency-exchange-service"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CurrencyExchangeServiceProxy</span>
<span class="o">{</span>
  <span class="cm">/**
   * This method of the proxy
   * - Needs to invoke the currency-exchange microservice passing the 'from' and 'to'
   * - The resultant JSON needs to be mapped to CurrencyCalcuationBean
   *
   * @param from
   * @param to
   * @return
   */</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-exchange/from/{from}/to/{to}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">CurrencyCalculationBean</span> <span class="nf">getExchangeValue</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="verify-lb">Verify LB</h2>

<p>Note that the port of the server servicing the request changes using round-robin algorithm.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get http://localhost:8100/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>

<span class="o">&gt;</span> json-get http://localhost:8100/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8001"</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="api-gateway">API Gateway</h1>

<p>A production deployment shall consist of thousands of micro-services. These micro-services have a lot of <strong>common features</strong> like</p>

<ul>
  <li>Authorisation</li>
  <li>Authentication</li>
  <li>Logging</li>
  <li>Rate Limiting</li>
</ul>

<p>Where do we implement all these features? The typical solution is an <strong>API Gateway</strong> – In spring cloud the gateway used is <code class="language-plaintext highlighter-rouge">Spring Cloud Gateway</code></p>

<blockquote>
  <p>Spring Cloud Gateway aims to provide a simple, yet effective way to  route to APIs and provide cross cutting concerns to them such as:  security, monitoring/metrics, and resiliency.</p>
</blockquote>

<h2 id="gateway-service">Gateway Service</h2>

<h3 id="dependencies-7">Dependencies</h3>

<table>
  <thead>
    <tr>
      <th>Dependency</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Config Client</td>
      <td>Client to connect to SpringCloudConfigServer</td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>LiveReload, Config for enhanced dev</td>
    </tr>
    <tr>
      <td>SpringActuator</td>
      <td>Monitor and manage applications</td>
    </tr>
    <tr>
      <td>Eureka Discovery Client</td>
      <td>Client to connect to naming server</td>
    </tr>
    <tr>
      <td>Gateway</td>
      <td>Route to APIs and provide cross cutting concerns to them such as security, monitoring/metrics, and resiliency.</td>
    </tr>
  </tbody>
</table>

<h3 id="application-properties-5">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">api-gateway</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8765</span>

<span class="c"># API Gateway
# -----------
</span><span class="py">spring.cloud.gateway.discovery.locator.enabled</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.cloud.gateway.discovery.locator.lower-case-service-id</span><span class="p">=</span><span class="s">true</span>

<span class="c"># Config Client: Connect to config server
# ---------------------------------------
</span><span class="py">spring.config.import</span><span class="p">=</span><span class="s">optional:configserver:http://localhost:8888</span>

<span class="c"># Naming Client: Connect to naming server
# ---------------------------------------
# Eureka client dependency is added in the microservice to talk to naming server
</span><span class="py">eureka.client.serviceUrl.defaultZone</span><span class="p">=</span><span class="s">http://localhost:8761/eureka</span>

</code></pre></div></div>

<h3 id="verify-registration-with-naming-server-1">Verify registration with naming server</h3>

<table>
  <thead>
    <tr>
      <th>Application</th>
      <th>AMIs</th>
      <th>Availability Zones</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>**API-GATEWAY**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[192.168.0.107:api-gateway:8765](http://192.168.0.107:8765/actuator/info)</td>
    </tr>
    <tr>
      <td>**CURRENCY-CALCULATION-SERVICE**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[192.168.0.107:currency-calculation-service:8100](http://192.168.0.107:8100/actuator/info)</td>
    </tr>
    <tr>
      <td>**CURRENCY-EXCHANGE-SERVICE**</td>
      <td>**n/a** (2)</td>
      <td>(2)</td>
      <td>[192.168.0.107:currency-exchange-service:8000](http://192.168.0.107:8000/actuator/info) <br />[192.168.0.107:currency-exchange-service:8001](http://192.168.0.107:8001/actuator/info)</td>
    </tr>
  </tbody>
</table>

<h3 id="verify-access-via-gateway">Verify access via Gateway</h3>

<p>The client shall send request via the gateway (localhost:8765 in this case) which shall in-turn route request to corresponding mircoservice.</p>

<p>The common features can be now implemented as part of the gateway. For example, we could have <strong>authentication enabled for certain URLs</strong> in the API gateway</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># CURRENCY-CALCULATION-SERVICE (to lower-case) is the name as registered with Eureka</span>
json-get http://localhost:8765/currency-calculation-service/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200 OK
Content-Type: application/json
transfer-encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8001"</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="routes">Routes</h2>

<h3 id="simple-redirection">Simple Redirection</h3>

<p>When the browser sends a request to “/get” of the APIGateway, it shall be routed to <code class="language-plaintext highlighter-rouge">http://httpbin.org</code>. The resultant request shall be <code class="language-plaintext highlighter-rouge">http://httpbin.org:80/get</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.apigateway</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIGatewayConfiguration</span>
<span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RouteLocator</span> <span class="nf">gatewayRouter</span><span class="o">(</span><span class="nc">RouteLocatorBuilder</span> <span class="n">builder</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">routes</span><span class="o">()</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/get"</span><span class="o">).</span><span class="na">uri</span><span class="o">(</span><span class="s">"http://httpbin.org:80"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="filters">Filters</h3>

<p>When the browser sends a request to <code class="language-plaintext highlighter-rouge">/get</code> of the APIGateway, it shall add custom headers, query parameters and then route it to <code class="language-plaintext highlighter-rouge">http://httpbin.org:80</code>. The resultant request shall be  <code class="language-plaintext highlighter-rouge">http://httpbin.org:80/get?name=Raghu</code> (with header <code class="language-plaintext highlighter-rouge">MyName: Raghu</code>)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIGatewayConfiguration</span>
<span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RouteLocator</span> <span class="nf">gatewayRouter</span><span class="o">(</span><span class="nc">RouteLocatorBuilder</span> <span class="n">builder</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">routes</span><span class="o">()</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/get"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filters</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">addRequestHeader</span><span class="o">(</span><span class="s">"MyName"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">).</span><span class="na">addRequestParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"http://httpbin.org:80"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get <span class="s2">"http://localhost:8765/get"</span>
Status: HTTP/1.1 200 OK
Access-Control-Allow-Credentials: <span class="nb">true
</span>Access-Control-Allow-Origin: <span class="k">*</span>
content-length: 590
Content-Type: application/json

<span class="o">{</span>
  <span class="s2">"args"</span>: <span class="o">{</span>
    <span class="s2">"name"</span>: <span class="s2">"Raghu"</span>
  <span class="o">}</span>,
  <span class="s2">"headers"</span>: <span class="o">{</span>
    <span class="s2">"Accept"</span>: <span class="s2">"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"</span>,
    <span class="s2">"Content-Length"</span>: <span class="s2">"0"</span>,
    <span class="s2">"Forwarded"</span>: <span class="s2">"proto=http;host=</span><span class="se">\"</span><span class="s2">localhost:8765</span><span class="se">\"</span><span class="s2">;for=</span><span class="se">\"</span><span class="s2">127.0.0.1:58390</span><span class="se">\"</span><span class="s2">"</span>,
    <span class="s2">"Host"</span>: <span class="s2">"httpbin.org"</span>,
    <span class="s2">"Myname"</span>: <span class="s2">"Raghu"</span>,
    <span class="s2">"Otdclientid"</span>: <span class="s2">"9b63fdd1-e8b6-4a23-aa3e-8a70433ad019"</span>,
    <span class="s2">"User-Agent"</span>: <span class="s2">"Java/1.8.0_261"</span>,
    <span class="s2">"X-Amzn-Trace-Id"</span>: <span class="s2">"Root=1-60a915c0-54c6fee834199ccc5973026e"</span>,
    <span class="s2">"X-Forwarded-Host"</span>: <span class="s2">"localhost:8765"</span>
  <span class="o">}</span>,
  <span class="s2">"origin"</span>: <span class="s2">"127.0.0.1, 124.123.81.169"</span>,
  <span class="s2">"url"</span>: <span class="s2">"http://localhost:8765/get?name=Raghu"</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="filters-to-rewrite-uri">Filters to rewrite URI</h3>

<p>The URI <code class="language-plaintext highlighter-rouge">/snoop</code> was rewritten as <code class="language-plaintext highlighter-rouge">/DukeApp/Snoop.jsp</code>. The request to API Gateway host was sent to <code class="language-plaintext highlighter-rouge">localhost:18801</code> (Tomcat is running here with DukeApp deployed)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIGatewayConfiguration</span>
<span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RouteLocator</span> <span class="nf">gatewayRouter</span><span class="o">(</span><span class="nc">RouteLocatorBuilder</span> <span class="n">builder</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">routes</span><span class="o">()</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/get"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filters</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">addRequestHeader</span><span class="o">(</span><span class="s">"MyClientId"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">).</span><span class="na">addRequestParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"http://httpbin.org"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/snoop"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filters</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">rewritePath</span><span class="o">(</span><span class="s">"/snoop"</span><span class="o">,</span> <span class="s">"/DukeApp/Snoop.jsp"</span><span class="o">).</span><span class="na">addRequestHeader</span><span class="o">(</span><span class="s">"MyClientId"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">).</span><span class="na">addRequestParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"http://localhost:18801"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Verify request/response</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> jget <span class="nt">-u</span> http://localhost:8765/snoop
<span class="c"># -----------------------------------------------</span>
<span class="c"># Method</span>
<span class="c"># -----------------------------------------------</span>
<span class="nv">Method</span><span class="o">=</span>GET
<span class="nv">ClientIP</span><span class="o">=</span>127.0.0.1
<span class="nv">RequestURL</span><span class="o">=</span>http://MS1:18801/DukeApp/Snoop.jsp
<span class="nv">IsSecure</span><span class="o">=</span>HTTP
<span class="nv">ServerName</span><span class="o">=</span>null

<span class="c"># -----------------------------------------------</span>
<span class="c"># Request Headers</span>
<span class="c"># -----------------------------------------------</span>

<span class="nv">accept</span><span class="o">=</span>text/html, image/gif, image/jpeg, <span class="k">*</span><span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2, <span class="k">*</span>/<span class="k">*</span><span class="p">;</span> <span class="nv">q</span><span class="o">=</span>.2
<span class="nv">otdclientid</span><span class="o">=</span>e2eb448a-c55e-4db2-933a-47922ed4429c
user-agent<span class="o">=</span>Java/1.8.0_261
<span class="nv">myclientid</span><span class="o">=</span>Raghu
<span class="nv">forwarded</span><span class="o">=</span><span class="nv">proto</span><span class="o">=</span>http<span class="p">;</span><span class="nv">host</span><span class="o">=</span><span class="s2">"localhost:8765"</span><span class="p">;</span><span class="k">for</span><span class="o">=</span><span class="s2">"127.0.0.1:58598"</span>
x-forwarded-for<span class="o">=</span>127.0.0.1
x-forwarded-proto<span class="o">=</span>http
x-forwarded-port<span class="o">=</span>8765
x-forwarded-host<span class="o">=</span>localhost:8765
<span class="nv">host</span><span class="o">=</span>localhost:18801
content-length<span class="o">=</span>0

<span class="c"># -----------------------------------------------</span>
<span class="c"># Parameters</span>
<span class="c"># -----------------------------------------------</span>
<span class="nv">name</span><span class="o">=</span>Raghu
</code></pre></div></div>

<h3 id="simplify-uri-to-services">Simplify URI to services</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.apigateway</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIGatewayConfiguration</span>
<span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RouteLocator</span> <span class="nf">gatewayRouter</span><span class="o">(</span><span class="nc">RouteLocatorBuilder</span> <span class="n">builder</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">routes</span><span class="o">()</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/get"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">filters</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">addRequestHeader</span><span class="o">(</span><span class="s">"MyName"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">).</span><span class="na">addRequestParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Raghu"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"http://httpbin.org"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/currency-calculator/**"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"lb://currency-calculation-service"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">route</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/currency-exchange/**"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"lb://currency-exchange-service"</span><span class="o">))</span>
      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Verify request/response via API Gateway</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> json-get http://localhost:8765/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200 OK
Content-Type: application/json
transfer-encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8001"</span>
<span class="o">}</span>

<span class="o">&gt;</span> json-get http://localhost:8765/currency-exchange/from/USD/to/INR
Status: HTTP/1.1 200 OK
Content-Type: application/json
transfer-encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8001"</span>
<span class="o">}</span>

</code></pre></div></div>

<h1 id="resilience4j">Resilience4J</h1>

<p>Microservices could be wired in such a way that there is a chain of dependent mircoservices as shown below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MS1 ---&gt; MS2 --&gt; MS3 ---&gt; MS4 ---&gt; MS5
</code></pre></div></div>

<p>Here, say <code class="language-plaintext highlighter-rouge">MS3</code> has become slow or unreliable. This will affect the entire chain. Circuit breaker provides several ways to work around such issues. For example, in this case</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MS2</code> can be configured to retry for <code class="language-plaintext highlighter-rouge">n</code> attempts, for certain requests, before returning failure response.</li>
  <li><code class="language-plaintext highlighter-rouge">MS2</code> can be configured to return a default response for certain requests, after ‘n’ failed attempts.</li>
</ul>

<h2 id="retry-with-fallback">Retry with fallback</h2>

<p>Following is configured for <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code></p>

<h3 id="dependencies-8">Dependencies</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Circuit Breaker --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.github.resilience4j<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>resilience4j-spring-boot2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h3 id="controller-4">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencyexchangeservice</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircuitBreakerController</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test-retry"</span><span class="o">)</span>
  <span class="nd">@Retry</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"test-retry"</span><span class="o">,</span> <span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">"fallbackResponse"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testRetry</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inside testRetry"</span><span class="o">);</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">entityNotFound</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">().</span><span class="na">getForEntity</span><span class="o">(</span><span class="s">"http://localhost:8080/doesNotExist"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">entityNotFound</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="cm">/**
   * This method shall be invoked if maximum retry attempts fail
   */</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">fallbackResponse</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Hey, server is busy. Eat an apple and be back."</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="application-properties-6">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">currency-exchange-service</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8000</span>
<span class="err">...</span>
<span class="err">...</span>

<span class="c"># Resilience4j: Retry
# -------------------
# Number of retry attempts for service by name 'test-retry'
</span><span class="py">resilience4j.retry.instances.test-retry.max-attempts</span><span class="p">=</span><span class="s">3</span>

<span class="c"># Time to wait before the next retry
</span><span class="py">resilience4j.retry.instances.test-retry.wait-duration</span><span class="p">=</span><span class="s">2s</span>

<span class="c"># The next retry attempt will not be after a linear interval (like 2s wait-duration as configured above) but
# shall exponentially increase using the wait-duration as a parameter. For example, it could be 2, 4, 8 and so on.
</span><span class="py">resilience4j.retry.instances.test-retry.enable-exponential-backoff</span><span class="p">=</span><span class="s">true</span>
</code></pre></div></div>

<h2 id="circuit-breaker">Circuit Breaker</h2>

<h3 id="dependencies-9">Dependencies</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Circuit Breaker --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>io.github.resilience4j<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>resilience4j-spring-boot2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h3 id="controller-5">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencyexchangeservice</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircuitBreakerController</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test-retry"</span><span class="o">)</span>
  <span class="nd">@Retry</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"test-retry"</span><span class="o">,</span> <span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">"fallbackResponse"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testRetry</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inside testRetry"</span><span class="o">);</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">entityNotFound</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">().</span><span class="na">getForEntity</span><span class="o">(</span><span class="s">"http://localhost:8080/doesNotExist"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">entityNotFound</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test-circuit-breaker"</span><span class="o">)</span>
  <span class="nd">@CircuitBreaker</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"test-circuit-breaker"</span><span class="o">,</span> <span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">"fallbackResponse"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testCircuitBreaker</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inside testCircuitBreaker"</span><span class="o">);</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">entityNotFound</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">().</span><span class="na">getForEntity</span><span class="o">(</span><span class="s">"http://localhost:8080/doesNotExist"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">entityNotFound</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="cm">/**
   * This method shall be invoked if maximum retry attempts fail
   */</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">fallbackResponse</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Hey, server is busy. Eat an apple and be back."</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="working-of-circuit-breaker">Working of Circuit Breaker</h3>

<p>Lets say we send multiple requests to  <code class="language-plaintext highlighter-rouge">/test-circuit-breaker</code>  using the command <code class="language-plaintext highlighter-rouge">watch -n 0.1 http://localhost:8000/test-circuit-breaker</code>. The watch command sends a request every 100ms, or 10 requests/second.</p>

<ul>
  <li>After continuous failures reach a point, the request is no more sent to <code class="language-plaintext highlighter-rouge">testCircuitBreaker</code> method, the fall back response directly is sent.</li>
  <li>This raises the question, how will the circuit breaker know if the <code class="language-plaintext highlighter-rouge">testCircuitBreaker</code> is back on track? The below state diagram explains this.</li>
</ul>

<blockquote>
  <p>A circuit breaker prevents a microservice from getting bombarded with more requests when it is already loaded.
However, it is also smart enough to switch back when the service is back on track.</p>
</blockquote>

<p><img src="/assets/images/spring/CircuitBreaker.jpg" alt="H2DBLogin" /></p>

<table>
  <thead>
    <tr>
      <th>State</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CLOSED</td>
      <td>Circuit is connected. The requests are sent to target service.</td>
    </tr>
    <tr>
      <td>OPEN</td>
      <td>Circuit is broken. None of the requests are sent to target service. All of them are sent fallback response.</td>
    </tr>
    <tr>
      <td>HALF_OPEN</td>
      <td>A configured percentage of requests are sent to target service, others are sent fallback response.</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>The circuit starts by being in CLOSED state and requests are sent to target service.</li>
  <li>Once the failure rate crosses threshold, the circuit switches to OPEN state.</li>
  <li>Once in the OPEN state, it remains in the state for a wait-duration during which all requests receive fallback response.</li>
  <li>After the wait-duration is over, the circuit switches to HALF_OPEN state.</li>
  <li>In the HALF_OPEN state, a configured number of requests shall be sent to target service, others will receive fallback response
    <ul>
      <li>If threshold requests sent to target service succeed, the circuit shall switch to CLOSED state</li>
      <li>If threshold requests sent to target service fail, the circuit shall switch to OPEN state</li>
    </ul>
  </li>
</ul>

<h2 id="rate-limiter">Rate Limiter</h2>

<p>Limit the number of requests a service can be loaded within a given time interval (Eg: 10 requests per second, 3 requests in 10 seconds). Requests exceeding the limit shall be rejected.</p>

<h3 id="controller-6">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencyexchangeservice</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircuitBreakerController</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>

  <span class="o">...</span>
  <span class="o">...</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test-rate-limiter"</span><span class="o">)</span>
  <span class="nd">@RateLimiter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"test-rate-limiter"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testRateLimiter</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Hello from rate limiter"</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="cm">/**
   * This method shall be invoked if maximum retry attempts fail
   */</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">fallbackResponse</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Hey, server is busy. Eat an apple and be back."</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="application-properties-7">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Resilience4j: Rate Limiter
# --------------------------
</span>
<span class="c"># Here, only limit-for-period requests shall be allowed every limit-refresh-period seconds.
# That is, if limit-for-period=2 and limit-refresh-period=1s then the rate allowed is 2 request/second
</span><span class="py">resilience4j.ratelimiter.instances.test-rate-limiter.limit-for-period</span><span class="p">=</span><span class="s">2</span>
<span class="py">resilience4j.ratelimiter.instances.test-rate-limiter.limit-refresh-period</span><span class="p">=</span><span class="s">10s</span>
</code></pre></div></div>

<h2 id="bulkhead">Bulkhead</h2>

<p>Limit the number of concurrent calls to a service.</p>

<h3 id="controller-7">Controller</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.github.cafeduke.learn.microservices.currencyexchangeservice</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircuitBreakerController</span>
<span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test-bulk-head"</span><span class="o">)</span>
  <span class="nd">@Bulkhead</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"test-bulk-head"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testBulkHead</span><span class="o">()</span>
  <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Hello from bulk head"</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="application-properties-8">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Resilience4j: Bulkhead
# ----------------------
# Only allow a maximum of 10 concurrent calls
</span><span class="py">resilience4j.bulkhead.instances.test-bulk-head.max-concurrent-calls</span><span class="p">=</span><span class="s">10</span>
</code></pre></div></div>

<h1 id="microservices-with-docker">Microservices with Docker</h1>

<h2 id="distributed-tracing-service">Distributed tracing service</h2>

<p><a href="https://zipkin.io">Zipkin</a> provides distributed tracing service. It helps gather timing data needed to troubleshoot latency problems in service architectures. Features include both the collection and lookup of this data. The zipkin docker image is available <a href="https://hub.docker.com/r/openzipkin/zipkin">here</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker run <span class="nt">--detach</span> <span class="nt">--name</span> zipkin <span class="nt">--publish</span> 9411:9411 <span class="nt">--detach</span> openzipkin/zipkin:2.23
</code></pre></div></div>

<p>The services (<code class="language-plaintext highlighter-rouge">APIGateway</code>, <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code>, <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code>) shall be sending out information (using HTTP) to a queue (RabbitMQ) which shall in-turn be sent to distributed tracing server (<code class="language-plaintext highlighter-rouge">Zipkin</code>).</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">Zipkin</code> provides a UI to query and trace the information. In this case (http://localhost:9411/zipkin/)</li>
  <li>The tracing information includes requests that are routed to multiple microservices.</li>
  <li><code class="language-plaintext highlighter-rouge">RabbitMQ</code> can queue (store) messages even when <code class="language-plaintext highlighter-rouge">Zipkin</code> is temporarily down, thus avoiding information loss.</li>
  <li>Tracing every request will be a huge performance overload, hence we need to configure sampling – Trace only a percentage of requests.</li>
  <li>Unique tracing id metadata shall be added to messages logged by the services (using java.util.Logger). The tracing-id can be used to gather logs related across microservices.</li>
</ul>

<p><img src="/assets/images/spring/ZipkinRabbit.jpg" alt="ZipkinRabbit" /></p>

<h3 id="dependencies-10">Dependencies</h3>

<p>Following dependencies are added to <code class="language-plaintext highlighter-rouge">APIGateway</code>, <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> and <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
  ...
  <span class="c">&lt;!-- Distributed Tracing Server --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-sleuth<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-sleuth-zipkin<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.amqp<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-rabbit<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<h3 id="application-properties-9">Application Properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># DistributedTracingServer: Zipkin
# -----------------------------------------------
# SamplingConfiguration: This will sample 50% of the requests
</span><span class="py">spring.sleuth.sampler.probability</span><span class="p">=</span><span class="s">0.5</span>

<span class="c"># Location of Zipkin
</span><span class="py">spring.zipkin.base-url</span><span class="p">=</span><span class="s">http://localhost:9411</span>

</code></pre></div></div>

<h2 id="build-docker-image-using-maven">Build Docker image using Maven</h2>

<h3 id="update-plugin-configuration">Update plugin configuration</h3>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code> can be configured to build Docker images for spring boot</p>
</blockquote>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project&gt;</span>
  <span class="nt">&lt;dependencies&gt;</span>
    ...
    ...
  <span class="nt">&lt;/dependencies&gt;</span>

  <span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
      <span class="nt">&lt;plugin&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
        <span class="c">&lt;!-- Build Docker image --&gt;</span>
        <span class="nt">&lt;configuration&gt;</span>
          <span class="nt">&lt;image&gt;</span>
            <span class="nt">&lt;name&gt;</span>raghubs81/learn-${project.artifactId}:${project.version}<span class="nt">&lt;/name&gt;</span>
          <span class="nt">&lt;/image&gt;</span>
          <span class="nt">&lt;pullPolicy&gt;</span>IF_NOT_PRESENT<span class="nt">&lt;/pullPolicy&gt;</span>
        <span class="nt">&lt;/configuration&gt;</span>
      <span class="nt">&lt;/plugin&gt;</span>
    <span class="nt">&lt;/plugins&gt;</span>
  <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<h3 id="make-mvn-accessible-as-root">Make <code class="language-plaintext highlighter-rouge">mvn</code> accessible as root</h3>

<p>In this section, we build image for <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code> using <code class="language-plaintext highlighter-rouge">maven</code> . Add <code class="language-plaintext highlighter-rouge">mvn</code> to <code class="language-plaintext highlighter-rouge">PATH</code> for <code class="language-plaintext highlighter-rouge">root</code> user</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check mvn is on PATH for root user. Here, it is not</span>
<span class="o">&gt;</span> <span class="nb">sudo </span>which mvn
<span class="o">&gt;</span>

<span class="c"># If mvn is not known for root because Maven was installed on custom folder then do this</span>
<span class="o">&gt;</span> <span class="nb">sudo ln</span> <span class="nt">-s</span> &lt;path to mvn&gt; /usr/local/bin

<span class="c"># Now mvn is accessible as root</span>
<span class="o">&gt;</span> <span class="nb">sudo </span>which mvn
/usr/local/bin/mvn

<span class="o">&gt;</span> <span class="nb">ls</span> <span class="nt">-l</span> /usr/local/bin/mvn
lrwxrwxrwx 1 root root 34 May 28 21:01 /usr/local/bin/mvn -&gt; /home/raghu/Programs/Maven/bin/mvn
</code></pre></div></div>

<h3 id="execute-the-build-image-goal-of-spring-boot-plugin">Execute the <code class="language-plaintext highlighter-rouge">build-image</code> goal of <code class="language-plaintext highlighter-rouge">spring-boot</code> plugin</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">cd </span>Learn/JavaEE/Spring/WebService/L02_Mircoservice/currency-exchange-service
<span class="o">&gt;</span> <span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span><span class="s2">"unix:///var/run/docker.sock"</span>
<span class="o">&gt;</span> <span class="nb">sudo </span>mvn spring-boot:build-image <span class="nt">-DskipTests</span>
</code></pre></div></div>

<h3 id="start-docker-container-for-currencyexchangeservice">Start docker container for <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker run <span class="nt">--detach</span> <span class="nt">--publish</span> 8000:8000 raghubs81/learn-currency-exchange-service
<span class="o">&gt;</span> docker run <span class="nt">--detach</span> <span class="nt">--publish</span> 8001:8000 raghubs81/learn-currency-exchange-service

<span class="o">&gt;</span> json-get http://localhost:8000/currency-exchange/from/USD/to/INR
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>

<span class="o">&gt;</span> json-get http://localhost:8001/currency-exchange/from/USD/to/INR
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="manage-services-using-docker-compose">Manage services using docker-compose</h2>

<p>Install <a href="https://docs.docker.com/compose/install/">docker-compose</a> – A development tool to build and manage containers easily. A docker compose is an easy alternative to running multiple docker commands. The default input file for docker-compose is <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> file in current directory.</p>

<h3 id="yaml-file">YAML file</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>

  <span class="na">currency-exchange</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-currency-exchange-service:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8000:8000"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-exchange-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>

  <span class="na">currency-calculation</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-currency-calculation-service:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8100:8100"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-calculation-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>

  <span class="na">naming-server</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-naming-server:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8761:8761"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>

  <span class="na">api-gateway</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-api-gateway:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8765:8765"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-calculation-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>

  <span class="na">zipkin-server</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">openzipkin/zipkin:2.23</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">300m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9411:9411"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="c1">#Restart if there is a problem starting up</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">currency-network</span><span class="pi">:</span>
</code></pre></div></div>

<h3 id="start-all-containers">Start all containers</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker-compose up <span class="nt">--detach</span>
Building with native build. Learn about native build <span class="k">in </span>Compose here: https://docs.docker.com/go/compose-native-build/
Starting l02_mircoservice_naming-server_1 ... <span class="k">done
</span>Starting l02_mircoservice_currency-exchange_1    ... <span class="k">done
</span>Creating l02_mircoservice_currency-calculation_1 ... <span class="k">done</span>
</code></pre></div></div>

<h3 id="verify-requests">Verify requests</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>json-get http://localhost:8100/currency-calculator/from/USD/to/INR/quantity/3
Status: HTTP/1.1 200
Content-Type: application/json
Transfer-Encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 3,
  <span class="s2">"totalCalculatedAmount"</span>: 195,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="verify-registration-in-eureka">Verify registration in Eureka</h3>

<table>
  <thead>
    <tr>
      <th>Application</th>
      <th>AMIs</th>
      <th>Availability Zones</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>**CURRENCY-CALCULATION-SERVICE**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[a696d46a1ff5:currency-calculation-service:8100](http://a696d46a1ff5:8100/actuator/info)</td>
    </tr>
    <tr>
      <td>**CURRENCY-EXCHANGE-SERVICE**</td>
      <td>**n/a** (1)</td>
      <td>(1)</td>
      <td>[d025265c4b6b:currency-exchange-service:8000](http://d025265c4b6b:8000/actuator/info)</td>
    </tr>
  </tbody>
</table>

<h2 id="rabbitmq-service">RabbitMQ Service</h2>

<p>All microservices will communicate with <code class="language-plaintext highlighter-rouge">Distributed Tracing Server -- Zipkin</code> over <code class="language-plaintext highlighter-rouge">RabbitMQ</code> (Message Queue)</p>

<h3 id="dependency">Dependency</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.amqp<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-rabbit<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h3 id="application-properties-10">Application Properties</h3>

<p>The property needs to be configured in all microservices using <code class="language-plaintext highlighter-rouge">Zipkin</code> that is <code class="language-plaintext highlighter-rouge">CurrencyExchangeService</code>, <code class="language-plaintext highlighter-rouge">CurrencyCalculationService</code> and <code class="language-plaintext highlighter-rouge">APIGateway</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Make miroservices contact Zipkin over RabbitMQ
</span><span class="py">spring.zipkin.sender.type</span><span class="p">=</span><span class="s">rabbit</span>
</code></pre></div></div>

<h3 id="docker-compose">Docker Compose</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.7'</span>
<span class="na">services</span><span class="pi">:</span>

  <span class="na">currency-exchange</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-currency-exchange-service:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8000:8000"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-exchange-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>
      <span class="pi">-</span> <span class="s">SPRING_ZIPKIN_SENDER_TYPE=rabbit</span>
      <span class="pi">-</span> <span class="s">SPRING_RABBITMQ_HOST=rabbitmq</span>
      <span class="c1"># The format is amqp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</span>
      <span class="pi">-</span> <span class="s">RABBIT_URI=amqp://guest:guest@rabbitmq:5672</span>

  <span class="na">currency-calculation</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-currency-calculation-service:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8100:8100"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-calculation-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>
      <span class="pi">-</span> <span class="s">SPRING_ZIPKIN_SENDER_TYPE=rabbit</span>
      <span class="pi">-</span> <span class="s">SPRING_RABBITMQ_HOST=rabbitmq</span>
      <span class="c1"># The format is amqp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</span>
      <span class="pi">-</span> <span class="s">RABBIT_URI=amqp://guest:guest@rabbitmq:5672</span>

  <span class="na">naming-server</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-naming-server:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8761:8761"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>

  <span class="na">api-gateway</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">raghubs81/learn-api-gateway:0.0.1-SNAPSHOT</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">700m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8765:8765"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">naming-server</span>
      <span class="pi">-</span> <span class="s">zipkin-server</span>
    <span class="c1"># Properties configured for currency-calculation-servcie in application.properties are overridden using the following env variable.</span>
    <span class="c1"># The name of the property is in upper-case.</span>
    <span class="c1"># Note that the value uses the service-name (naming-server) as hostname.</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA.CLIENT.SERVICEURL.DEFAULTZONE=http://naming-server:8761/eureka</span>
      <span class="pi">-</span> <span class="s">SPRING.ZIPKIN.BASEURL=http://zipkin-server:9411</span>
      <span class="pi">-</span> <span class="s">SPRING_ZIPKIN_SENDER_TYPE=rabbit</span>
      <span class="pi">-</span> <span class="s">SPRING_RABBITMQ_HOST=rabbitmq</span>
      <span class="c1"># The format is amqp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</span>
      <span class="pi">-</span> <span class="s">RABBIT_URI=amqp://guest:guest@rabbitmq:5672</span>

  <span class="na">zipkin-server</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">openzipkin/zipkin:2.23</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">300m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9411:9411"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">rabbitmq</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="c1"># The format is amqp://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;</span>
      <span class="pi">-</span> <span class="s">RABBIT_URI=amqp://guest:guest@rabbitmq:5672</span>

    <span class="c1">#Restart if there is a problem starting up</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>

  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3.8.12-management</span>
    <span class="na">mem_limit</span><span class="pi">:</span> <span class="s">300m</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5672:5672"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">15672:15672"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">currency-network</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">currency-network</span><span class="pi">:</span>
</code></pre></div></div>

<h3 id="verify-requests-1">Verify requests</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Requst via API Gateway</span>
<span class="o">&gt;</span> json-get http://localhost:8765/currency-calculator/from/USD/to/INR/quantity/10
Status: HTTP/1.1 200 OK
Content-Type: application/json
transfer-encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"quantity"</span>: 10,
  <span class="s2">"totalCalculatedAmount"</span>: 650,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>

<span class="c"># Requst via API Gateway</span>
<span class="o">&gt;</span> json-get http://localhost:8765/currency-exchange/from/USD/to/INR
Status: HTTP/1.1 200 OK
Content-Type: application/json
transfer-encoding: chunked

<span class="o">{</span>
  <span class="s2">"id"</span>: 101,
  <span class="s2">"from"</span>: <span class="s2">"USD"</span>,
  <span class="s2">"to"</span>: <span class="s2">"INR"</span>,
  <span class="s2">"conversionMultiple"</span>: 65,
  <span class="s2">"env"</span>: <span class="s2">"ServerPort=8000"</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="spring" /><summary type="html"><![CDATA[Table of Contents Introduction Spring Boot Starter Package Configuration access by microservice Overview Git Repo Spring Could Config Server Dependencies Application Properties Application Verify working Limits Service Dependencies Application Properties Controller Configuration Bean Talking Microservices Currency Exchange Service Dependencies SQL file to populate data Application Properties Database Console Controller Service Entity Bean REST Request Currency Calculation Service Dependencies Application Properties Controller Java Bean REST Request Talking Microservices via Feign Currency Calculation Service Dependencies Feign Client Proxy Controller REST Request Naming service Naming service server Dependencies ApplicationProperties Eureka Dashboard Registering with naming server Dependencies Application Properties Currency Calculation Service Currency Exchange Service Eureka Dashboard Load balancing services Start multiple instances of services Verify registration with naming server Configure LB via Feign Verify LB API Gateway Gateway Service Dependencies Application Properties Verify registration with naming server Verify access via Gateway Routes Simple Redirection Filters Filters to rewrite URI Simplify URI to services Resilience4J Retry with fallback Dependencies Controller Application Properties Circuit Breaker Dependencies Controller Working of Circuit Breaker Rate Limiter Controller Application Properties Bulkhead Controller Application Properties Microservices with Docker Distributed tracing service Dependencies Application Properties Build Docker image using Maven Update plugin configuration Make mvn accessible as root Execute the build-image goal of spring-boot plugin Start docker container for CurrencyExchangeService Manage services using docker-compose YAML file Start all containers Verify requests Verify registration in Eureka RabbitMQ Service Dependency Application Properties Docker Compose Verify requests]]></summary></entry><entry><title type="html">Docker</title><link href="/cloud/2021/01/16/docker.html" rel="alternate" type="text/html" title="Docker" /><published>2021-01-16T00:00:00+00:00</published><updated>2021-01-16T00:00:00+00:00</updated><id>/cloud/2021/01/16/docker</id><content type="html" xml:base="/cloud/2021/01/16/docker.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#install" id="markdown-toc-install">Install</a></li>
  <li><a href="#terminologies" id="markdown-toc-terminologies">Terminologies</a>    <ol>
      <li><a href="#understanding-using-a-workflow" id="markdown-toc-understanding-using-a-workflow">Understanding using a workflow</a></li>
      <li><a href="#docker-container" id="markdown-toc-docker-container">Docker container</a></li>
    </ol>
  </li>
  <li><a href="#docker-core-commands" id="markdown-toc-docker-core-commands">Docker core commands</a>    <ol>
      <li><a href="#core-workflow" id="markdown-toc-core-workflow">Core workflow</a></li>
      <li><a href="#core-container-operations" id="markdown-toc-core-container-operations">Core container operations</a>        <ol>
          <li><a href="#running-a-container" id="markdown-toc-running-a-container">Running a container</a></li>
          <li><a href="#start-stop-and-check-container-logs" id="markdown-toc-start-stop-and-check-container-logs">Start, stop and check container logs</a></li>
          <li><a href="#login-into-a-running-container" id="markdown-toc-login-into-a-running-container">Login into a running container</a></li>
          <li><a href="#cleanup" id="markdown-toc-cleanup">Cleanup</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#playing-with-docker-run" id="markdown-toc-playing-with-docker-run">Playing with docker run</a>    <ol>
      <li><a href="#remove-container-after-exit" id="markdown-toc-remove-container-after-exit">Remove container after exit</a></li>
      <li><a href="#interactive-shell" id="markdown-toc-interactive-shell">Interactive shell</a></li>
    </ol>
  </li>
  <li><a href="#docker-image" id="markdown-toc-docker-image">Docker Image</a>    <ol>
      <li><a href="#dockerfile-v1" id="markdown-toc-dockerfile-v1">Dockerfile v1</a>        <ol>
          <li><a href="#build-a-fresh-image" id="markdown-toc-build-a-fresh-image">Build a fresh image</a></li>
          <li><a href="#rebuilding-the-image" id="markdown-toc-rebuilding-the-image">Rebuilding the image</a></li>
        </ol>
      </li>
      <li><a href="#dockerfile-v2" id="markdown-toc-dockerfile-v2">Dockerfile v2</a></li>
    </ol>
  </li>
  <li><a href="#data-persistence" id="markdown-toc-data-persistence">Data persistence</a>    <ol>
      <li><a href="#why-persist" id="markdown-toc-why-persist">Why persist?</a></li>
      <li><a href="#docker-volumes" id="markdown-toc-docker-volumes">Docker volumes</a>        <ol>
          <li><a href="#unnamed-volumes" id="markdown-toc-unnamed-volumes">Unnamed volumes</a></li>
          <li><a href="#named-volumes" id="markdown-toc-named-volumes">Named volumes</a></li>
        </ol>
      </li>
      <li><a href="#bind-mount" id="markdown-toc-bind-mount">Bind mount</a>        <ol>
          <li><a href="#bind-mount-tomcat-app" id="markdown-toc-bind-mount-tomcat-app">Bind mount tomcat app</a></li>
          <li><a href="#bind-mount-github-website" id="markdown-toc-bind-mount-github-website">Bind mount GitHub website</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#docker-network" id="markdown-toc-docker-network">Docker Network</a>    <ol>
      <li><a href="#bridge-network" id="markdown-toc-bridge-network">Bridge network</a>        <ol>
          <li><a href="#default" id="markdown-toc-default">Default</a></li>
          <li><a href="#custom" id="markdown-toc-custom">Custom</a></li>
        </ol>
      </li>
      <li><a href="#overlay-network" id="markdown-toc-overlay-network">Overlay network</a></li>
    </ol>
  </li>
  <li><a href="#swarm-single-node" id="markdown-toc-swarm-single-node">Swarm single node</a>    <ol>
      <li><a href="#managing-swarm" id="markdown-toc-managing-swarm">Managing swarm</a>        <ol>
          <li><a href="#initialise-a-swarm" id="markdown-toc-initialise-a-swarm">Initialise a swarm</a></li>
          <li><a href="#join-a-swarm" id="markdown-toc-join-a-swarm">Join a swarm</a></li>
          <li><a href="#leave-a-swarm" id="markdown-toc-leave-a-swarm">Leave a swarm</a></li>
        </ol>
      </li>
      <li><a href="#managing-nodes" id="markdown-toc-managing-nodes">Managing nodes</a>        <ol>
          <li><a href="#list-nodes" id="markdown-toc-list-nodes">List nodes</a></li>
          <li><a href="#promotedemote-nodes" id="markdown-toc-promotedemote-nodes">Promote/demote nodes</a></li>
          <li><a href="#list-tasks-running-a-node" id="markdown-toc-list-tasks-running-a-node">List tasks running a node</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#swarm-service" id="markdown-toc-swarm-service">Swarm service</a>    <ol>
      <li><a href="#core-service-operations" id="markdown-toc-core-service-operations">Core service operations</a>        <ol>
          <li><a href="#create-service" id="markdown-toc-create-service">Create service</a></li>
          <li><a href="#list-services" id="markdown-toc-list-services">List services</a></li>
          <li><a href="#scale-up" id="markdown-toc-scale-up">Scale up</a></li>
          <li><a href="#scale-down" id="markdown-toc-scale-down">Scale down</a></li>
          <li><a href="#task-resilience" id="markdown-toc-task-resilience">Task resilience</a></li>
          <li><a href="#remove-a-service" id="markdown-toc-remove-a-service">Remove a service</a></li>
        </ol>
      </li>
      <li><a href="#docker-service-across-overlay-network" id="markdown-toc-docker-service-across-overlay-network">Docker service across overlay network</a></li>
    </ol>
  </li>
  <li><a href="#swarm-stack-single-node" id="markdown-toc-swarm-stack-single-node">Swarm stack single node</a>    <ol>
      <li><a href="#create-a-stack-yaml" id="markdown-toc-create-a-stack-yaml">Create a stack YAML</a></li>
      <li><a href="#deploy-list-services-tasks-and-containers" id="markdown-toc-deploy-list-services-tasks-and-containers">Deploy, list services, tasks and containers</a></li>
      <li><a href="#verify-tasks-communicate-using-service-name" id="markdown-toc-verify-tasks-communicate-using-service-name">Verify tasks communicate using service name</a></li>
      <li><a href="#verify-routing-mesh" id="markdown-toc-verify-routing-mesh">Verify routing mesh</a>        <ol>
          <li><a href="#ips-from-networks" id="markdown-toc-ips-from-networks">IPs from networks</a></li>
          <li><a href="#verify-load-balancing" id="markdown-toc-verify-load-balancing">Verify load balancing</a></li>
          <li><a href="#verify-vip" id="markdown-toc-verify-vip">Verify VIP</a></li>
        </ol>
      </li>
      <li><a href="#cleanup-stack" id="markdown-toc-cleanup-stack">Cleanup Stack</a></li>
      <li><a href="#stack-lb-apache-tomcat" id="markdown-toc-stack-lb-apache-tomcat">Stack lb-apache-tomcat</a>        <ol>
          <li><a href="#stack-directory-structure" id="markdown-toc-stack-directory-structure">Stack directory structure</a></li>
          <li><a href="#stack-compose-file" id="markdown-toc-stack-compose-file">Stack compose file</a></li>
          <li><a href="#build-images-of-the-stack" id="markdown-toc-build-images-of-the-stack">Build images of the stack</a></li>
          <li><a href="#deploy-using-docker-stack-deploy" id="markdown-toc-deploy-using-docker-stack-deploy">Deploy using docker stack deploy</a></li>
          <li><a href="#update-stack-using-docker-stack-deploy" id="markdown-toc-update-stack-using-docker-stack-deploy">Update stack using docker stack deploy</a></li>
          <li><a href="#access-pages-and-verify-working" id="markdown-toc-access-pages-and-verify-working">Access pages and verify working</a></li>
          <li><a href="#verify-service-is-running-with-the-expected-latest-version" id="markdown-toc-verify-service-is-running-with-the-expected-latest-version">Verify service is running with the expected <strong>latest</strong> version</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#swarm-multi-node" id="markdown-toc-swarm-multi-node">Swarm multi node</a>    <ol>
      <li><a href="#installation" id="markdown-toc-installation">Installation</a>        <ol>
          <li><a href="#docker-machine" id="markdown-toc-docker-machine">Docker machine</a></li>
          <li><a href="#install-oracle-virtualbox" id="markdown-toc-install-oracle-virtualbox">Install Oracle VirtualBox</a></li>
        </ol>
      </li>
      <li><a href="#create-and-manage-nodes" id="markdown-toc-create-and-manage-nodes">Create and manage nodes</a></li>
      <li><a href="#update-docker-client-to-point-to-node" id="markdown-toc-update-docker-client-to-point-to-node">Update docker client to point to node</a></li>
      <li><a href="#manage-nodes" id="markdown-toc-manage-nodes">Manage nodes</a>        <ol>
          <li><a href="#make-node1-the-lonely-leader" id="markdown-toc-make-node1-the-lonely-leader">Make node1 the lonely Leader</a></li>
          <li><a href="#make-node2-join-the-swarm-as-worker" id="markdown-toc-make-node2-join-the-swarm-as-worker">Make node2 join the swarm as worker</a>            <ol>
              <li><a href="#verify-that-worker-cannot-viewmodify-swarm-cluster" id="markdown-toc-verify-that-worker-cannot-viewmodify-swarm-cluster">Verify that worker cannot view/modify swarm cluster</a></li>
              <li><a href="#verify-that-we-now-have-two-nodes-in-the-swarm" id="markdown-toc-verify-that-we-now-have-two-nodes-in-the-swarm">Verify that we now have two nodes in the swarm</a></li>
            </ol>
          </li>
          <li><a href="#promote-node2" id="markdown-toc-promote-node2">Promote node2</a></li>
          <li><a href="#make-node3-join-the-swarm-directly-as-manager" id="markdown-toc-make-node3-join-the-swarm-directly-as-manager">Make node3 join the swarm directly as manager</a></li>
          <li><a href="#verify-node1-is-no-more-lonely" id="markdown-toc-verify-node1-is-no-more-lonely">Verify node1 is no more lonely</a></li>
          <li><a href="#demote-node1" id="markdown-toc-demote-node1">Demote node1</a></li>
          <li><a href="#restore-status" id="markdown-toc-restore-status">Restore status</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#swarm-stack-on-multi-node" id="markdown-toc-swarm-stack-on-multi-node">Swarm stack on multi-node</a>    <ol>
      <li><a href="#stack-lb-apache-tomcat-1" id="markdown-toc-stack-lb-apache-tomcat-1">Stack lb-apache-tomcat</a>        <ol>
          <li><a href="#access-pages-and-verify-working-1" id="markdown-toc-access-pages-and-verify-working-1">Access pages and verify working</a></li>
          <li><a href="#verify-routing-mesh-1" id="markdown-toc-verify-routing-mesh-1">Verify routing mesh</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

</nav>

<h1 id="install">Install</h1>

<p>Follow the instructions in <a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></p>

<p>Verify Install</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Short version</span>
<span class="o">&gt;</span> docker <span class="nt">--version</span>
Docker version 20.10.1, build 831ebea

<span class="c"># Detailed version</span>
<span class="o">&gt;</span> docker version                                                                                                                                                                          ✔
Client: Docker Engine - Community
 Version:           19.03.13
 API version:       1.40
 ...
 ...

Server: Docker Engine - Community
 Engine:
  Version:          19.03.13
  API version:      1.40 <span class="o">(</span>minimum version 1.12<span class="o">)</span>
 ...
 ...

 <span class="c"># Help -- Note commads are grouped into 'Management Commands' and 'Commands'</span>
 <span class="o">&gt;</span> docker <span class="nb">help</span>
 ...

 Management Commands:
 ...
 ...

 Commands:
</code></pre></div></div>

<h1 id="terminologies">Terminologies</h1>

<table>
  <thead>
    <tr>
      <th>Term</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Docker Container</td>
      <td>A container is a standard unit of software that packages up code and all its dependencies, so the application (app) runs quickly and reliably from one  computing environment to another.</td>
    </tr>
    <tr>
      <td>Docker Image</td>
      <td>A Docker image is a lightweight, standalone, executable  package of software that includes everything needed to run an  application: code, runtime, system tools, system libraries and settings.</td>
    </tr>
    <tr>
      <td>Docker Hub</td>
      <td>A Docker hub (https://hub.docker.com) is repository of docker images.</td>
    </tr>
    <tr>
      <td>Docker Engine</td>
      <td>A Docker engine is a service (daemon process) that runs on a host. <br />A Docker service is started using <code class="language-plaintext highlighter-rouge">sudo systemctl start docker</code></td>
    </tr>
    <tr>
      <td>Docker Client</td>
      <td>The docker commands are executed using <code class="language-plaintext highlighter-rouge">/usr/bin/docker</code> binary. This is the docker client. <br />The docker client connects with a docker engine (that could be running on local or remote host) to perform operations specified.</td>
    </tr>
  </tbody>
</table>

<h2 id="understanding-using-a-workflow">Understanding using a workflow</h2>

<p><strong>Steps for running a software</strong></p>

<ul>
  <li>We check to see if we have an existing setup binary for the desired version we want to install.
    <ul>
      <li>If found we use the existing setup binary</li>
      <li>If not, we shall download the setup from the internet.</li>
    </ul>
  </li>
  <li>We install the software which shall extract the runtime, libraries, dependencies etc into a location on the disk.</li>
  <li>We start the software which shall launch it.</li>
</ul>

<p><strong>An analogous docker workflow</strong></p>

<ul>
  <li>We check to see if we have an existing docker image for the desired version we want to install. ( <code class="language-plaintext highlighter-rouge">docker image ls</code>)
    <ul>
      <li>If found, we shall use the existing image</li>
      <li>If not, we shall download the setup from the <a href="https://hub.docker.com">docker-hub</a> (<code class="language-plaintext highlighter-rouge">docker image pull [&lt;userid&gt;/]&lt;image-name&gt;[:&lt;version-tag&gt;]</code>)</li>
      <li>Note that a docker image is of the format <code class="language-plaintext highlighter-rouge">[&lt;userid&gt;/]&lt;image-name&gt;[:&lt;version-tag&gt;]</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">userid</code>: The docker login ID of the user who created the image. This is empty for official docker images.</li>
          <li><code class="language-plaintext highlighter-rouge">image-name</code>: The name of the docker image</li>
          <li><code class="language-plaintext highlighter-rouge">tag</code>: A tag differentiates two images and is typically a version string.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>We install the image to create a container (<code class="language-plaintext highlighter-rouge">docker container create --name &lt;container-name&gt; &lt;image&gt; </code>)</li>
  <li>We list containers. (<code class="language-plaintext highlighter-rouge">docker container ls -a</code>)</li>
  <li>We start container. (<code class="language-plaintext highlighter-rouge">docker container start &lt;contianer-name&gt; </code>)</li>
</ul>

<p>From the above analogy we see that</p>

<ul>
  <li>A docker image is analogous to setup binary</li>
  <li>A docker-hub is analogous to website hosting setup binary</li>
  <li>A docker container is analogous to a software installed on disk.</li>
</ul>

<h2 id="docker-container">Docker container</h2>

<p>A container is a standard unit of software that packages up code and all its dependencies, so the application (app) runs quickly and reliably from one  computing environment to another.</p>

<blockquote>
  <p>An app feels like it running inside a machine of its own with its own resources (RAM, harddisk, CPU and network). A container is analogous to a womb for an app.</p>
</blockquote>

<h1 id="docker-core-commands">Docker core commands</h1>

<h2 id="core-workflow">Core workflow</h2>

<p>The following commands demo a typical docker workflow using which we are introduced to docker image, container</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Download an image hello-world</span>
<span class="o">&gt;</span> docker image pull hello-world

<span class="c"># List download image</span>
<span class="o">&gt;</span> docker image <span class="nb">ls
</span>hello-world           latest    bf756fb1ae65   12 months ago   13.3kB

<span class="c"># Create a container</span>
<span class="o">&gt;</span> docker container create <span class="nt">--name</span> my_hello hello-world

<span class="c"># List all containers</span>
<span class="o">&gt;</span> docker container <span class="nb">ls</span> <span class="nt">-a</span>
CONTAINER ID   IMAGE     COMMAND             CREATED        STATUS          PORTS                     NAMES
d4a7ed8470f9   hello-world  <span class="s2">"/hello"</span>         3 weeks ago    Exited <span class="o">(</span>0<span class="o">)</span>                                my_hello

<span class="c"># Start a container</span>
<span class="o">&gt;</span> docker container start my_hello <span class="nt">-i</span>
Hello from Docker!
...
</code></pre></div></div>

<h2 id="core-container-operations">Core container operations</h2>

<h3 id="running-a-container">Running a container</h3>

<p>A <code class="language-plaintext highlighter-rouge">docker run</code> command  does all the operations described in the docker workflow.</p>

<ul>
  <li>If we execute the <code class="language-plaintext highlighter-rouge">docker run</code> command multiple times we would land up creating multiple copies of the same container with random names (assigned by docker).</li>
  <li>This is similar to installing the same software multiple times in random directories. By providing a name (using <code class="language-plaintext highlighter-rouge">--name</code>) trying to create another container with same name fails – This way, we rather re-use an existing container.</li>
  <li>The <code class="language-plaintext highlighter-rouge">--rm</code> option removes a container after it’s stopped. This way we have the flexibility of using <code class="language-plaintext highlighter-rouge">docker run</code> all the time without piling up replicas of containers.</li>
</ul>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The command has an empty output since the container was started, did its job of saying hello and then shutdown.</span>
<span class="c"># If it were a server like tomcat then the container would be running until it is stopped.</span>
&gt; docker container ls
CONTAINER ID   IMAGE                       COMMAND                  CREATED         STATUS         PORTS     NAMES

<span class="c"># Lets run a tomcat with a volume mapping (we will see later, for now we are mapping a dir in local with that in container)</span>
<span class="c"># We see that we are able get a response to our app</span>
&gt; cp duke.war ~/work/web-app
&gt; cd ~/work/web-app
&gt; docker run --rm --name my_tommy --detach --publish 18801:8080 --volume ~/work/web-app:/usr/local/tomcat/webapps tomcat:9
&gt; curl -s -I http://localhost:18801/duke/Snoop.jsp | head -1
HTTP/1.1 200

<span class="c"># List running containers</span>
&gt; docker container ls
CONTAINER ID   IMAGE      COMMAND             CREATED              STATUS              PORTS                     NAMES
64326d1e2f4d   tomcat:9   "catalina.sh run"   About a minute ago   Up About a minute   0.0.0.0:18801-&gt;8080/tcp   my_tommy

</code></pre></div></div>

<h3 id="start-stop-and-check-container-logs">Start, stop and check container logs</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Stop container</span>
<span class="o">&gt;</span> docker container stop my_tommy
my_tommy

<span class="c"># Start container</span>
<span class="o">&gt;</span> docker container start my_tommy

<span class="c"># Show the last 3 lines from logs</span>
<span class="o">&gt;</span> docker container logs <span class="nt">-n</span> 3 my_tommy
21-Jan-2021 06:20:48.369 INFO <span class="o">[</span>main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory <span class="o">[</span>/usr/local/tomcat/webapps/duke] has finished <span class="k">in</span> <span class="o">[</span>718] ms
21-Jan-2021 06:20:48.376 INFO <span class="o">[</span>main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler <span class="o">[</span><span class="s2">"http-nio-8080"</span><span class="o">]</span>
21-Jan-2021 06:20:48.414 INFO <span class="o">[</span>main] org.apache.catalina.startup.Catalina.start Server startup <span class="k">in</span> <span class="o">[</span>865] milliseconds

</code></pre></div></div>

<h3 id="login-into-a-running-container">Login into a running container</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker container <span class="nb">exec</span> <span class="nt">-it</span> my_tommy sh
<span class="c"># hostname</span>
4286b5cec5b8
<span class="c"># cd /usr/local/tomcat</span>
</code></pre></div></div>

<h3 id="cleanup">Cleanup</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Remove containers</span>
docker container <span class="nb">rm</span> &lt;container name ...&gt;

<span class="c"># Remove images</span>
docker image <span class="nb">rm</span> &lt;image <span class="nb">id</span> ...&gt;

<span class="c"># Remove dangling images (no container is referencing them)</span>
docker image prune
</code></pre></div></div>

<h1 id="playing-with-docker-run">Playing with docker run</h1>

<h2 id="remove-container-after-exit">Remove container after exit</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run a command on the container. Remove container when done.</span>
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> cafeduke/busybox <span class="nb">cat</span> /etc/hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.2	a37c77eb628d
</code></pre></div></div>

<h2 id="interactive-shell">Interactive shell</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Get an interactive shell to a container</span>
docker container run <span class="nt">--rm</span> <span class="nt">-it</span> cafeduke/busybox sh <span class="nt">-l</span>
Sourcing /root/.profile
172.17.0.2 /&gt; <span class="nb">hostname
</span>0be6321def2b
172.17.0.2 /&gt;
</code></pre></div></div>

<h1 id="docker-image">Docker Image</h1>

<p>A custom docker image can be built in one of the following ways. The default name of the file having build instructions is <code class="language-plaintext highlighter-rouge">Dockerfile</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># File &lt;path-to-build-dir&gt;/Dockerfile is the file having build instructions</span>
docker build &lt;path-to-build-dir&gt; <span class="nt">--tag</span> &lt;tag-name&gt;

<span class="c"># File &lt;path-to-file&gt; is the file having build instructions</span>
docker build <span class="nt">--file</span> &lt;path-to-file&gt; <span class="nt">--tag</span> &lt;tag-name&gt;
</code></pre></div></div>

<h2 id="dockerfile-v1">Dockerfile v1</h2>

<p>A Dockerfile consists of a <strong>directive</strong> like <code class="language-plaintext highlighter-rouge">FROM, RUN, WORKDIR</code> etc and corresponding arguments as documented in <a href="https://docs.docker.com/engine/reference/builder/#parser-directives">docs.docker.com</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">cd </span>Learn/Docker/01-image/image-hello
<span class="o">&gt;</span> <span class="nb">cat </span>Dockerfile

<span class="c"># 1. Use alpine as the base</span>
FROM alpine:latest

<span class="c"># 2. Run update and install bash</span>
RUN /bin/sh <span class="nt">-c</span> <span class="s1">'apk update; \
apk add bash'</span>

<span class="c"># 3. Change pwd to /home</span>
WORKDIR /home

<span class="c"># 4. Copy arg.sh to WORKDIR</span>
COPY arg.sh <span class="nb">.</span>

<span class="c"># 5. Set entry point as shell script</span>
ENTRYPOINT <span class="o">[</span><span class="s2">"/home/arg.sh"</span><span class="o">]</span>

<span class="c"># 6. Supply HelloWorld as the argument</span>
CMD <span class="o">[</span><span class="s2">"HelloWorld!"</span><span class="o">]</span>
</code></pre></div></div>

<h3 id="build-a-fresh-image">Build a fresh image</h3>

<ul>
  <li>Docker builds an image incrementally. Each <strong>step</strong> corresponds to the directive and its arguments. For example, the above <code class="language-plaintext highlighter-rouge">Dockerfile</code> has 6 directives that corresponds to 6 steps.</li>
  <li>After completing <code class="language-plaintext highlighter-rouge">Step1</code> the resultant <strong>layer</strong> (partial image) is cached.</li>
  <li>After completing <code class="language-plaintext highlighter-rouge">Step2</code> the resultant layer which is an aggregate of performing directives in step 1 and 2 is also cached.</li>
  <li>After completing <code class="language-plaintext highlighter-rouge">Step3</code> the resultant layer which is an aggregate of performing directives in step 1, 2 and 3 is also cached and so on.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build a fresh image and note the steps</span>
<span class="c"># --------------------------------------</span>
<span class="o">&gt;</span> docker image build <span class="nb">.</span> <span class="nt">--tag</span> raghubs81/test-entrypoint
Sending build context to Docker daemon  16.38kB

Step 1/6 : FROM alpine:latest
latest: Pulling from library/alpine
Digest: sha256:08d6ca16c60fe7490c03d10dc339d9fd8ea67c6466dea8d558526b1330a85930
Status: Downloaded newer image <span class="k">for </span>alpine:latest
 <span class="nt">---</span><span class="o">&gt;</span> e50c909a8df2

Step 2/6 : RUN /bin/sh <span class="nt">-c</span> <span class="s1">'apk update; apk add bash'</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>535d373026c8
fetch https://dl-cdn.alpinelinux.org/alpine/v3.13/main/x86_64/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.13/community/x86_64/APKINDEX.tar.gz
v3.13.1-78-gb575f39b62 <span class="o">[</span>https://dl-cdn.alpinelinux.org/alpine/v3.13/main]
v3.13.1-79-g25eb590247 <span class="o">[</span>https://dl-cdn.alpinelinux.org/alpine/v3.13/community]
OK: 13878 distinct packages available
<span class="o">(</span>1/4<span class="o">)</span> Installing ncurses-terminfo-base <span class="o">(</span>6.2_p20210109-r0<span class="o">)</span>
<span class="o">(</span>2/4<span class="o">)</span> Installing ncurses-libs <span class="o">(</span>6.2_p20210109-r0<span class="o">)</span>
<span class="o">(</span>3/4<span class="o">)</span> Installing readline <span class="o">(</span>8.1.0-r0<span class="o">)</span>
<span class="o">(</span>4/4<span class="o">)</span> Installing bash <span class="o">(</span>5.1.0-r0<span class="o">)</span>
Executing bash-5.1.0-r0.post-install
Executing busybox-1.32.1-r2.trigger
OK: 8 MiB <span class="k">in </span>18 packages
Removing intermediate container 535d373026c8
 <span class="nt">---</span><span class="o">&gt;</span> 6b57a2f9e0b7

Step 3/6 : WORKDIR /home
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>0a2c88268315
Removing intermediate container 0a2c88268315
 <span class="nt">---</span><span class="o">&gt;</span> 566d0edc5325

Step 4/6 : COPY arg.sh <span class="nb">.</span>
 <span class="nt">---</span><span class="o">&gt;</span> 641ce9651e38

Step 5/6 : ENTRYPOINT <span class="o">[</span><span class="s2">"/home/arg.sh"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>02868bd4468a
Removing intermediate container 02868bd4468a
 <span class="nt">---</span><span class="o">&gt;</span> 6a811329a8b2

Step 6/6 : CMD <span class="o">[</span><span class="s2">"HelloWorld!"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>54137bb598bc
Removing intermediate container 54137bb598bc
 <span class="nt">---</span><span class="o">&gt;</span> 91572d7dbec3

Successfully built 91572d7dbec3
Successfully tagged raghubs81/test-entrypoint:latest

<span class="o">&gt;</span> docker image <span class="nb">ls
</span>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE
raghubs81/test-entrypoint   latest    91572d7dbec3   3 minutes ago   9.74MB
</code></pre></div></div>

<h3 id="rebuilding-the-image">Rebuilding the image</h3>

<p>When image is rebuilt relevant layer (if available)  is picked from cache.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Rebuild image and note the steps</span>
<span class="c"># --------------------------------------</span>
<span class="o">&gt;</span> docker image build <span class="nb">.</span> <span class="nt">--tag</span> raghubs81/test-entrypoint
Sending build context to Docker daemon  16.38kB
Step 1/6 : FROM alpine:latest
 <span class="nt">---</span><span class="o">&gt;</span> e50c909a8df2

Step 2/6 : RUN /bin/sh <span class="nt">-c</span> <span class="s1">'apk update; apk add bash'</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 6b57a2f9e0b7

Step 3/6 : WORKDIR /home
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 566d0edc5325

Step 4/6 : COPY arg.sh <span class="nb">.</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 641ce9651e38

Step 5/6 : ENTRYPOINT <span class="o">[</span><span class="s2">"/home/arg.sh"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 6a811329a8b2

Step 6/6 : CMD <span class="o">[</span><span class="s2">"HelloWorld!"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 91572d7dbec3

Successfully built 91572d7dbec3
Successfully tagged raghubs81/test-entrypoint:latest
</code></pre></div></div>

<h2 id="dockerfile-v2">Dockerfile v2</h2>

<p>The version 2 of the <code class="language-plaintext highlighter-rouge">Dockerfile</code> adds a new line as <code class="language-plaintext highlighter-rouge">Step5</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. Use alpine as the base</span>
FROM alpine:latest

<span class="c"># 2. Run update and install bash</span>
RUN /bin/sh <span class="nt">-c</span> <span class="s1">'apk update; \
apk add bash'</span>

<span class="c"># 3. Change pwd to /home</span>
WORKDIR /home

<span class="c"># 4. Copy arg.sh to WORKDIR</span>
COPY arg.sh <span class="nb">.</span>

<span class="c"># 5. Set environment variable</span>
ENV <span class="nv">MY_FRUIT</span><span class="o">=</span>Mango

<span class="c"># 6. Set entry point as shell script</span>
ENTRYPOINT <span class="o">[</span><span class="s2">"/home/arg.sh"</span><span class="o">]</span>

<span class="c"># 7. Supply HelloWorld as the argument</span>
CMD <span class="o">[</span><span class="s2">"HelloWorld!"</span><span class="o">]</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Note that step #1-4 is taken from cache</span>
<span class="c"># ---------------------------------------</span>

Sending build context to Docker daemon  19.46kB
Step 1/7 : FROM alpine:latest
 <span class="nt">---</span><span class="o">&gt;</span> e50c909a8df2

Step 2/7 : RUN /bin/sh <span class="nt">-c</span> <span class="s1">'apk update; apk add bash'</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 6b57a2f9e0b7

Step 3/7 : WORKDIR /home
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 566d0edc5325

Step 4/7 : COPY arg.sh <span class="nb">.</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 641ce9651e38

<span class="c"># Note that step #5 onwards cannot be picked from cache</span>
<span class="c"># -----------------------------------------------------</span>
Step 5/7 : ENV <span class="nv">MY_FRUIT</span><span class="o">=</span>Mango
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>ea8ce6432a5d
Removing intermediate container ea8ce6432a5d
 <span class="nt">---</span><span class="o">&gt;</span> df5c8d46ba8d

Step 6/7 : ENTRYPOINT <span class="o">[</span><span class="s2">"/home/arg.sh"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>ed8fb46999b1
Removing intermediate container ed8fb46999b1
 <span class="nt">---</span><span class="o">&gt;</span> a59793774e20

Step 7/7 : CMD <span class="o">[</span><span class="s2">"HelloWorld!"</span><span class="o">]</span>
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>7638301279db
Removing intermediate container 7638301279db
 <span class="nt">---</span><span class="o">&gt;</span> d19781e107ce

Successfully built d19781e107ce
Successfully tagged raghubs81/test-entrypoint:latest
</code></pre></div></div>

<blockquote>
  <p>If the <strong>n</strong>th directive in a docker file  is modified then only n-1 layers can be picked from cache.</p>
</blockquote>

<h1 id="data-persistence">Data persistence</h1>

<p>Persistence of data is achieved by either using volumes or bind mount. However, bind mount is used only during development. Docker volumes is the persistence mechanism in production.</p>

<h2 id="why-persist">Why persist?</h2>

<p>The data generated by the container is lost when the container is removed. However, in several cases (like database, configuration of server, blogs hosted by server) we would want to retain the data. This can be achieved using persistence.</p>

<h2 id="docker-volumes">Docker volumes</h2>

<h3 id="unnamed-volumes">Unnamed volumes</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build a custom image (We will see more details later)</span>
<span class="nb">cd </span>Learn/Docker/02-volume/volume-tomcat
<span class="o">&gt;</span> docker build <span class="nb">.</span> <span class="nt">--tag</span> cafeduke/tomcat:latest

<span class="c"># Run the tomcat with custom app (Do NOT use --rm)</span>
<span class="o">&gt;</span> docker run <span class="nt">--name</span> duke_tommy <span class="nt">--detach</span> <span class="nt">--publish</span> 18801:8080 cafeduke/tomcat:latest
<span class="o">&gt;</span> curl <span class="nt">-s</span> <span class="s2">"http://localhost:18801/duke/"</span>
             ___________
            /           |
      __   <span class="o">(</span>   Welcome! |
  ___<span class="o">(</span> o<span class="o">)&gt;</span>  <span class="se">\_</span>__________|
  <span class="se">\ </span>&lt;_. <span class="o">)</span>
   <span class="sb">`</span><span class="nt">---</span><span class="s1">'
# Inspect container
#   - The webapps at '</span>/usr/local/tomcat/webapps<span class="s1">' reffered by container are actually mounted at /var/lib/docker/volumes/14a5...440f/_data
# 	- The mount type is '</span>volume<span class="s1">'
&gt; docker inspect duke_tommy | grep -A 10 Mounts
        "Mounts": [
            {
                "Type": "volume",
                "Name": "14a5c567cde9318ad0cd5fe8787abcb093bf97483841494937979872af7d440f",
                "Source": "/var/lib/docker/volumes/14a5c567cde9318ad0cd5fe8787abcb093bf97483841494937979872af7d440f/_data",
                "Destination": "/usr/local/tomcat/webapps",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }

# Note that the volume exists
&gt; docker volume ls
DRIVER    VOLUME NAME
local     5b251e51b2c59c86ca6e4045d234c9061fced260fda769e40a47769143080450
local     10a6711080b655fb3d062c11e4bf3d5af9c9b63722caa65a3c6446ecb3125bca
local     14a5c567cde9318ad0cd5fe8787abcb093bf97483841494937979872af7d440f

# Stop  and remove the container
&gt; docker stop duke_tommy; docker rm duke_tommy

# Ensure volume exists after container is removed
docker volume ls | grep 14a5c567cde9318ad0cd5fe8787abcb093bf97483841494937979872af7d440f
local     14a5c567cde9318ad0cd5fe8787abcb093bf97483841494937979872af7d440f
</span></code></pre></div></div>

<h3 id="named-volumes">Named volumes</h3>

<p>Named volumes cannot be created by the container itself (As part of Dockerfile) and needs to be explicitly specified by the user using  <code class="language-plaintext highlighter-rouge">docker container run --volume &lt;name&gt;:&lt;path in container&gt;</code>. This is because for a given host, the name of the volume is unique. So, it is up to the user to ensure providing a unique volume name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build image</span>
<span class="nb">cd </span>Learn/Docker/02-volume/volume-tomcat
<span class="o">&gt;</span> docker build <span class="nb">.</span> <span class="nt">--tag</span> cafeduke/tomcat:latest

<span class="c"># Start container with named volume</span>
<span class="o">&gt;</span> docker run <span class="nt">--name</span> duke_tommy <span class="nt">--detach</span> <span class="nt">--publish</span> 18801:8080 <span class="nt">--volume</span> duke_tommy_volume:/usr/local/tomcat/webapps cafeduke/tomcat:latest

<span class="c"># Note that volume exists</span>
docker volume <span class="nb">ls</span> | <span class="nb">grep </span>tommy
<span class="nb">local     </span>duke_tommy_volume

<span class="c"># Stop  and remove the container</span>
<span class="o">&gt;</span> docker stop duke_tommy<span class="p">;</span> docker <span class="nb">rm </span>duke_tommy

<span class="c"># Ensure volume exists after container is removed</span>
docker volume <span class="nb">ls</span> | <span class="nb">grep </span>tommy
<span class="nb">local     </span>duke_tommy_volume

</code></pre></div></div>

<h2 id="bind-mount">Bind mount</h2>

<p>A bind mount maps a directory in the host to a directory in the container.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Bind mount is only for development  -- A container cannot be programmed (via Dockerfile) to bind mount.
- Bind mount is very useful during development -- For example, change app server pages, refresh the browser page to check working.
</code></pre></div></div>

<h3 id="bind-mount-tomcat-app">Bind mount tomcat app</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Creat a dir and copy the .war file to be deployed</span>
<span class="o">&gt;</span> <span class="nb">mkdir</span> ~/work/test-bind-mount
<span class="o">&gt;</span> <span class="nb">cp </span>duke.war ~/work/test-bind-mount
<span class="o">&gt;</span> <span class="nb">cd</span> ~/work/test-bind-mount

<span class="c"># Map the current directory to the webapps dir of tomcat</span>
<span class="o">&gt;</span> docker run <span class="nt">--name</span> duke_tommy <span class="nt">--detach</span> <span class="nt">--publish</span> 18801:8080 <span class="nt">--volume</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/usr/local/tomcat/webapps cafeduke/tomcat:latest

<span class="c"># We are able do dynamically add files to duke and see changes.</span>
<span class="o">&gt;</span> <span class="nb">echo</span> <span class="s2">"Hello"</span> <span class="o">&gt;</span> hello.txt
<span class="o">&gt;</span> <span class="nb">sudo mv </span>hello.txt DukeApp
<span class="o">&gt;</span> curl <span class="nt">-s</span> <span class="s2">"http://localhost:18801/duke/hello.txt"</span>
Hello
</code></pre></div></div>

<h3 id="bind-mount-github-website">Bind mount GitHub website</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Access the jekyll website at localhost:8080</span>
<span class="o">&gt;</span> git clone https://github.com/cafeduke/cafeduke.github.io DukeWebSite
<span class="o">&gt;</span> <span class="nb">cd </span>DukeWebSite
<span class="o">&gt;</span> docker container run <span class="nt">--detach</span> <span class="nt">--name</span> duke_site <span class="nt">--publish</span> 4000:4000 <span class="nt">--volume</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/srv/jekyll jekyll/jekyll:builder jekyll serve

<span class="c"># Ensure site is running</span>
<span class="c"># Access the site at http://localhost:4000</span>
<span class="o">&gt;</span> docker container ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED         STATUS         PORTS                                                  NAMES
77ba8d869e75   jekyll/jekyll:builder   <span class="s2">"/usr/jekyll/bin/ent…"</span>   5 seconds ago   Up 4 seconds   0.0.0.0:4000-&gt;4000/tcp, :::4000-&gt;4000/tcp, 35729/tcp   duke_site

<span class="c"># We can now start/stop and verify working of the site locally before pushing changes to server</span>
<span class="o">&gt;</span> docker container stop duke_site
<span class="o">&gt;</span> docker container start duke_site
</code></pre></div></div>

<h1 id="docker-network">Docker Network</h1>

<p>One of the reasons Docker containers and services are so powerful is that you can connect them together. Docker’s networking subsystem is pluggable, using drivers. Several drivers exist by default, and provide core networking functionality.</p>

<blockquote>
  <p>A network:container relationship is m:n – A network can have multiple containers connected to it. A container can be connected to multiple networks.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Network Driver</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bridge</td>
      <td>The default network driver. If you don’t specify a driver, this is the type of network you are creating.<br />Bridge network allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network.<br />**User-defined bridges provide automatic DNS resolution between containers**</td>
    </tr>
    <tr>
      <td>Overlay</td>
      <td>The <code class="language-plaintext highlighter-rouge">overlay</code> network driver creates a distributed network among multiple Docker daemon hosts. This network sits on top of (overlays) the host-specific networks.<br />Services or containers can be connected to more than one network at a time. Services or containers can only communicate across networks they are each connected to.</td>
    </tr>
  </tbody>
</table>

<h2 id="bridge-network">Bridge network</h2>

<h3 id="default">Default</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--tty</span> <span class="nt">--detach</span> <span class="nt">--name</span> my_box.1 cafeduke/busybox
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--tty</span> <span class="nt">--detach</span> <span class="nt">--name</span> my_box.2 cafeduke/busybox

<span class="c"># Inspect default network 'bridge' to find the IP of the containers</span>
<span class="o">&gt;</span> docker inspect bridge | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"bridge"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"my_box.1"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"172.17.0.2/16"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"my_box.2"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"172.17.0.3/16"</span>,

<span class="c"># Attach to a container -- Verify communcation b/w containers in SAME DEFAULT network using IP works.</span>
<span class="o">&gt;</span> docker container <span class="nb">exec</span> <span class="nt">-it</span> my_box.1 sh <span class="nt">-l</span>
172.17.0.2 /&gt; ping <span class="nt">-c</span> 2 172.17.0.3
PING 172.17.0.3 <span class="o">(</span>172.17.0.3<span class="o">)</span>: 56 data bytes
64 bytes from 172.17.0.3: <span class="nb">seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.166 ms
64 bytes from 172.17.0.3: <span class="nb">seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.200 ms

<span class="c"># Attach to a container -- Verify communcation b/w containers in SAME DEFAULT network using hostname FAILS.</span>
172.17.0.2 /&gt; ping <span class="nt">-c</span> 2 my_box.2
ping: bad address <span class="s1">'my_box.2'</span>
</code></pre></div></div>

<h3 id="custom">Custom</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create two networks</span>
<span class="o">&gt;</span> docker network create <span class="nt">--driver</span> bridge my-net-bridge-1
<span class="o">&gt;</span> docker network create <span class="nt">--driver</span> bridge my-net-bridge-2

<span class="c"># Attach two containers to my-net-bridge network.</span>
<span class="c"># Attach third container to my-net-bridge-2 network</span>
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--tty</span> <span class="nt">--detach</span> <span class="nt">--name</span> my_box.1 <span class="nt">--network</span> my-net-bridge-1 cafeduke/busybox
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--tty</span> <span class="nt">--detach</span> <span class="nt">--name</span> my_box.2 <span class="nt">--network</span> my-net-bridge-1 cafeduke/busybox
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--tty</span> <span class="nt">--detach</span> <span class="nt">--name</span> my_box.3 <span class="nt">--network</span> my-net-bridge-2 cafeduke/busybox

<span class="c"># Attach to a container -- Verify communcation b/w containers in SAME CUSTOM network using IP works.</span>
<span class="o">&gt;</span> docker container <span class="nb">exec</span> <span class="nt">-it</span> my_box.1 sh <span class="nt">-l</span>
172.18.0.2 /&gt; ping <span class="nt">-c</span> 2 172.18.0.3
64 bytes from 172.18.0.3: <span class="nb">seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.193 ms
64 bytes from 172.18.0.3: <span class="nb">seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.169 ms

<span class="c"># Attach to a container -- Verify communcation b/w containers in SAME CUSTOM network using hostname works.</span>
172.18.0.2 /&gt; ping <span class="nt">-c</span> 2 my_box.2
64 bytes from 172.18.0.3: <span class="nb">seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.109 ms
64 bytes from 172.18.0.3: <span class="nb">seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.173 ms

<span class="o">&gt;</span> docker inspect network my-net-bridge-2 | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"my-net-bridge-2"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"my_box.3"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"172.19.0.2/16"</span>,

<span class="c"># Attach to a container -- Verify communcation b/w containers in DIFFERENT CUSTOM network using IP/hostname FAILS.</span>
172.18.0.2 /&gt; ping <span class="nt">-c</span> 2 my_box.3
ping: bad address <span class="s1">'my_box.3'</span>

<span class="o">&gt;</span> ping <span class="nt">-c</span> 2 172.19.0.2
PING 172.19.0.2 <span class="o">(</span>172.19.0.2<span class="o">)</span>: 56 data bytes
2 packets transmitted, 0 packets received, 100% packet loss
</code></pre></div></div>

<h2 id="overlay-network">Overlay network</h2>

<p>Overlay network comes into play in docker swarm as we shall see later.</p>

<blockquote>
  <p>Before you can create an overlay network, you need to either initialize your Docker daemon as a swarm manager using <code class="language-plaintext highlighter-rouge">docker swarm init</code> or join it to an existing swarm using <code class="language-plaintext highlighter-rouge">docker swarm join</code>.</p>

  <p>Either of these creates the default <code class="language-plaintext highlighter-rouge">ingress</code> overlay network which is used by swarm services by default. You need to do this even if you never plan to use swarm services. Afterward, you can create additional user-defined overlay networks.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create two attachable overlay network</span>
<span class="o">&gt;</span> docker network create <span class="nt">--driver</span> overlay <span class="nt">--attachable</span> my-net-overlay-1
<span class="o">&gt;</span> docker network create <span class="nt">--driver</span> overlay <span class="nt">--attachable</span> my-net-overlay-2

<span class="c"># Attach my_box.1 to network 'my-net-overlay' and 'my_box.2' to 'my-net-overlay-test'</span>
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--detach</span> <span class="nt">-it</span> <span class="nt">--name</span> my_box.1 <span class="nt">--network</span> my-net-overlay-1 cafeduke/busybox
<span class="o">&gt;</span> docker container run <span class="nt">--rm</span> <span class="nt">--detach</span> <span class="nt">-it</span> <span class="nt">--name</span> my_box.2 <span class="nt">--network</span> my-net-overlay-2 cafeduke/busybox

<span class="c"># Attach to a container -- Verify communcation b/w containers in DIFFERENT CUSTOM OVERLAY network using IP/hostname FAILS.</span>
<span class="o">&gt;</span> docker container <span class="nb">exec</span> <span class="nt">-it</span> my_box.1
172.21.0.2 /&gt; ping <span class="nt">-c</span> 2 my_box.2
ping: bad address <span class="s1">'my_box.2'</span>
172.21.0.2 /&gt; Ctrl-pq <span class="o">(</span>detach<span class="o">)</span>

</code></pre></div></div>

<h1 id="swarm-single-node">Swarm single node</h1>

<p>A docker swarm performs <strong>container orchestration</strong> across multiple nodes. Swarm nodes could be either master nodes or worker nodes.</p>

<blockquote>
  <p>A node is a machine (could be a VM)</p>
</blockquote>

<p>A swarm is a group of nodes that have joined as either manager node or worker node.</p>
<ul>
  <li>A swarm must have at-least one manager.</li>
  <li>A new node can either join as manager or worker.</li>
  <li>The status of a node (manager/worker) can be change.</li>
</ul>

<p>A swarm has security automation</p>
<ul>
  <li>Root Signing certificate is created for the Swarm.</li>
  <li>First manager node is issued a certificate.</li>
  <li>Different join tokens are created for nodes to join as worker.</li>
  <li>Different join tokens are created for nodes to join as manager.</li>
</ul>

<h2 id="managing-swarm">Managing swarm</h2>

<h3 id="initialise-a-swarm">Initialise a swarm</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Initialize swarm and get command to addes nodes as workers</span>
<span class="o">&gt;</span> docker swarm init
Swarm initialized: current node <span class="o">(</span>oo75je2p82824595oznd9tnaf<span class="o">)</span> is now a manager.
To add a worker to this swarm, run the following <span class="nb">command</span>:

    docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1l9bzy4gyvtfhonoug854zdkt296lyalk6chjco40jms0m2nt9-63kvy0s9ocpbgu2e3cuo1d8k4 192.168.0.107:2377

To add a manager to this swarm, run <span class="s1">'docker swarm join-token manager'</span> and follow the instructions.

<span class="c"># Get command to to add nodes as managers</span>
<span class="o">&gt;</span> docker swarm join-token manager
To add a manager to this swarm, run the following <span class="nb">command</span>:

    docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1l9bzy4gyvtfhonoug854zdkt296lyalk6chjco40jms0m2nt9-8qs4tcpdispl1d2tamg7bz2l9 192.168.0.107:2377

</code></pre></div></div>

<ul>
  <li>This adds the current node to the swarm.</li>
  <li>Since this is the only node – It is now the master.</li>
  <li>The <code class="language-plaintext highlighter-rouge">docker swarm join ...</code> command that follows can be run on other nodes, so that they can <strong>join the swarm as worker</strong></li>
  <li>If we want other nodes to join as a manager as well then we run <code class="language-plaintext highlighter-rouge">docker swarm join-token manager</code> – This generates a join command with different token.</li>
</ul>

<p>In essence, we have initialised a swarm and have the join commands to add nodes as either manager or worker.</p>

<h3 id="join-a-swarm">Join a swarm</h3>

<p>As seen in the above section <code class="language-plaintext highlighter-rouge">docker swarm join ...</code> command is used to join a swarm as either manager or worker. However, note that a worker can be promoted and manager can be demoted, later as well!</p>

<h3 id="leave-a-swarm">Leave a swarm</h3>

<p>To leave a swarm execute <code class="language-plaintext highlighter-rouge">docker swarm leave</code> on the corresponding node.</p>

<h2 id="managing-nodes">Managing nodes</h2>

<p>The swarm nodes are managed using <code class="language-plaintext highlighter-rouge">docker node</code> command</p>

<h3 id="list-nodes">List nodes</h3>

<p>List all the nodes of this swarm. Since this is a single node swarm – we will have just one node. Note that the manager status is <strong>Leader</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
oo75je2p82824595oznd9tnaf <span class="k">*</span>   raghu-pc   Ready     Active         Leader           20.10.1
</code></pre></div></div>

<h3 id="promotedemote-nodes">Promote/demote nodes</h3>

<p>Worker nodes can be promoted later by running <code class="language-plaintext highlighter-rouge">docker node promote &lt;node-id...&gt;</code> on the node.
Manager nodes can be demoted later by running <code class="language-plaintext highlighter-rouge">docker node demote &lt;node-id...&gt;</code> on the node.</p>

<h3 id="list-tasks-running-a-node">List tasks running a node</h3>

<p>The <code class="language-plaintext highlighter-rouge">docker node ps [&lt;node-id...&gt;]</code> command is used to list <strong>tasks</strong> running on one or more nodes (defaults to current node). Docker tasks are covered later.</p>

<h1 id="swarm-service">Swarm service</h1>

<p>A docker service exists only in the <strong>swarm world</strong>. A docker service is an abstraction (Similar to Kubernetes cluster) that is used manage a homogeneous cluster of containers.</p>

<ul>
  <li>A docker service is a feature that exists <strong>only</strong> in the context of swarm.</li>
  <li>A docker service can be used to create replicas of tasks, <strong>scale-up</strong> tasks and <strong>scale-down</strong> tasks.</li>
  <li>Each task is a wrapper for a docker container.</li>
  <li>If a task/container gets killed (Eg: node hosting the container goes down) then a swarm service automatically starts the task on another node.</li>
</ul>

<blockquote>
  <p>A docker service can be used to scale the cluster  – Scale up/down tasks across nodes.
A docker service is also maintains the cluster size – If task gets killed it is started on another node.</p>
</blockquote>

<h2 id="core-service-operations">Core service operations</h2>

<p>The below commands demonstrate the advantage of docker service.</p>

<h3 id="create-service">Create service</h3>

<p>The <code class="language-plaintext highlighter-rouge">docker service create</code> command is very similar to the <code class="language-plaintext highlighter-rouge">docker container run</code> command. Here we created a service with <code class="language-plaintext highlighter-rouge">alpine</code> image and provided it with the task of <code class="language-plaintext highlighter-rouge">pinging 8.8.8.8</code>. The <code class="language-plaintext highlighter-rouge">8.8.8.8</code> is a google DNS IP which shall always be there and ping command never returns in Unix. So, the container shall run for ever.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker service create <span class="nt">--name</span> my_box <span class="nt">--tty</span> <span class="nt">--detach</span> cafeduke/busybox:latest sh <span class="nt">-l</span>
u3vu6onvmb6w9mxckdooy8c5v
</code></pre></div></div>

<h3 id="list-services">List services</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List services</span>
<span class="o">&gt;</span> docker service <span class="nb">ls
</span>ID             NAME      MODE         REPLICAS   IMAGE                     PORTS
u3vu6onvmb6w   my_box    replicated   1/1        cafeduke/busybox:latest

<span class="c"># List tasks for a given service</span>
<span class="c">#  - Task name is of the format &lt;service-name&gt;.&lt;task-index&gt;</span>
<span class="c">#  - Task could be running in any node. However, we have only one node here.</span>
<span class="o">&gt;</span> docker service ps my_box
ID             NAME       IMAGE                     NODE       DESIRED STATE   CURRENT STATE            ERROR     PORTS
5vif6wy9ityo   my_box.1   cafeduke/busybox:latest   raghu-pc   Running         Running 46 seconds ago

<span class="c"># List container (Wrapped by task)</span>
<span class="c">#  - A task wraps a container. Hence TaskId is NOT the same as ContainerId</span>
<span class="c">#  - The name of the container wrapped by the task is of the format &lt;service-name&gt;.&lt;task-index&gt;.&lt;task-id&gt;</span>
<span class="o">&gt;</span> docker container <span class="nb">ls
</span>CONTAINER ID   IMAGE                     COMMAND   CREATED              STATUS              PORTS     NAMES
3aae4f88ddf4   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   About a minute ago   Up About a minute             my_box.1.5vif6wy9ityod8xushbs400ew
</code></pre></div></div>

<h3 id="scale-up">Scale up</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Scale up  -- The service from 1 to 5</span>
<span class="o">&gt;</span> docker service scale <span class="nv">my_box</span><span class="o">=</span>5
my_box scaled to 5
overall progress: 5 out of 5 tasks
1/5: running   <span class="o">[==================================================&gt;]</span>
2/5: running   <span class="o">[==================================================&gt;]</span>
3/5: running   <span class="o">[==================================================&gt;]</span>
4/5: running   <span class="o">[==================================================&gt;]</span>
5/5: running   <span class="o">[==================================================&gt;]</span>
verify: Service converged

<span class="c"># Note that all 5 replicas are running</span>
<span class="o">&gt;</span> docker service <span class="nb">ls
</span>ID             NAME      MODE         REPLICAS   IMAGE                     PORTS
u3vu6onvmb6w   my_box    replicated   5/5        cafeduke/busybox:latest

<span class="c"># We have 3 tasks (my_alpine.1 through my_alpine.3)</span>
<span class="o">&gt;</span> docker service ps my_box
ID             NAME       IMAGE                     NODE       DESIRED STATE   CURRENT STATE            ERROR     PORTS
5vif6wy9ityo   my_box.1   cafeduke/busybox:latest   raghu-pc   Running         Running 3 minutes ago
jfevqsv77svc   my_box.2   cafeduke/busybox:latest   raghu-pc   Running         Running 38 seconds ago
eih37w3i9t7w   my_box.3   cafeduke/busybox:latest   raghu-pc   Running         Running 38 seconds ago
w49sb4f8jcij   my_box.4   cafeduke/busybox:latest   raghu-pc   Running         Running 39 seconds ago
w7pob4xku6cx   my_box.5   cafeduke/busybox:latest   raghu-pc   Running         Running 38 seconds ago
</code></pre></div></div>

<h3 id="scale-down">Scale down</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Scale down  -- The service from 3 to 2</span>
<span class="o">&gt;</span> docker service scale <span class="nv">my_box</span><span class="o">=</span>2
my_box scaled to 2
overall progress: 2 out of 2 tasks
1/2: running   <span class="o">[==================================================&gt;]</span>
2/2: running   <span class="o">[==================================================&gt;]</span>
verify: Service converged

<span class="o">&gt;</span> docker service <span class="nb">ls
</span>ID             NAME      MODE         REPLICAS   IMAGE                     PORTS
u3vu6onvmb6w   my_box    replicated   2/2        cafeduke/busybox:latest
</code></pre></div></div>

<h3 id="task-resilience">Task resilience</h3>

<p>If a container goes down, the service ensures it is restarted.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The service has two tasks and are they are running.</span>
<span class="o">&gt;</span> docker service ps my_box
ID             NAME       IMAGE                     NODE       DESIRED STATE   CURRENT STATE                ERROR     PORTS
vyvf0mzqrsvb   my_box.1   cafeduke/busybox:latest   raghu-pc   Running         Running about a minute ago
fvjwtgdfdw51   my_box.2   cafeduke/busybox:latest   raghu-pc   Running         Running about a minute ago

<span class="c"># Following are the corresponding containers for the task.</span>
<span class="c"># Note that tasks abstract containers and medling with containers is really backdoor for a task.</span>
<span class="o">&gt;</span> docker container <span class="nb">ls</span> | <span class="nb">grep </span>my_box
b5eab599c57a   cafeduke/busybox:latest     <span class="s2">"sh -l"</span>                  2 minutes ago   Up 2 minutes             my_box.2.fvjwtgdfdw51s0yuk0ygoekot
738fef75a486   cafeduke/busybox:latest     <span class="s2">"sh -l"</span>                  2 minutes ago   Up 2 minutes             my_box.1.vyvf0mzqrsvb65hxhu1eqepbo

<span class="c"># Stop a container</span>
<span class="o">&gt;</span> docker container stop my_box.2.fvjwtgdfdw51s0yuk0ygoekot

<span class="c"># Note that the task restarts</span>
<span class="c"># On a multi-node env, the task could have been restarted on any node.</span>
<span class="o">&gt;</span> docker service ps my_box
ID             NAME           IMAGE                     NODE       DESIRED STATE   CURRENT STATE           ERROR                         PORTS
vyvf0mzqrsvb   my_box.1       cafeduke/busybox:latest   raghu-pc   Running         Running 3 minutes ago
kbul3mk69cy4   my_box.2       cafeduke/busybox:latest   raghu-pc   Running         Running 8 seconds ago
fvjwtgdfdw51    <span class="se">\_</span> my_box.2   cafeduke/busybox:latest   raghu-pc   Shutdown        Failed 13 seconds ago   <span class="s2">"task: non-zero exit (137)"</span>

<span class="c"># We could filter out the failed tasks and show only the running ones as follows</span>
<span class="o">&gt;</span> docker service ps my_box <span class="nt">--filter</span> desired-state<span class="o">=</span>running
ID             NAME       IMAGE                     NODE       DESIRED STATE   CURRENT STATE           ERROR     PORTS
vyvf0mzqrsvb   my_box.1   cafeduke/busybox:latest   raghu-pc   Running         Running 5 minutes ago
kbul3mk69cy4   my_box.2   cafeduke/busybox:latest   raghu-pc   Running         Running 2 minutes ago
</code></pre></div></div>

<h3 id="remove-a-service">Remove a service</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Remove all services</span>
<span class="c"># This removes all the assiciated tasks</span>
<span class="o">&gt;</span> docker service <span class="nb">rm </span>my_box
</code></pre></div></div>

<h2 id="docker-service-across-overlay-network">Docker service across overlay network</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create two overlay network</span>
<span class="o">&gt;</span> docker network create <span class="nt">--attachable</span> <span class="nt">--driver</span> overlay my-net-overlay-1
<span class="o">&gt;</span> docker network create <span class="nt">--attachable</span> <span class="nt">--driver</span> overlay my-net-overlay-2

<span class="c"># Create two services attached to DIFFERENT network</span>
<span class="o">&gt;</span> docker service create <span class="nt">--name</span> foo_box <span class="nt">--replicas</span><span class="o">=</span>3 <span class="nt">--network</span> my-net-overlay-1 <span class="nt">--tty</span> <span class="nt">--detach</span> cafeduke/busybox:latest sh <span class="nt">-l</span>
<span class="o">&gt;</span> docker service create <span class="nt">--name</span> bar_box <span class="nt">--replicas</span><span class="o">=</span>2 <span class="nt">--network</span> my-net-overlay-2 <span class="nt">--tty</span> <span class="nt">--detach</span> cafeduke/busybox:latest sh <span class="nt">-l</span>

<span class="c"># List containers</span>
<span class="o">&gt;</span> docker container <span class="nb">ls
</span>CONTAINER ID   IMAGE                     COMMAND   CREATED              STATUS          PORTS     NAMES
f22126a42a2f   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   37 seconds ago       Up 36 seconds             bar_box.2.t062uy6zqv26etmh2r01m2xae
06c20eddf648   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   37 seconds ago       Up 36 seconds             bar_box.1.mdxen6tsht4ijhuuonnbieemv
5efe31db796f   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   59 seconds ago       Up 58 seconds             foo_box.1.x49cl1czrm14vn6pfn3bo8uqt
6875c9d8ea87   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   About a minute ago   Up 58 seconds             foo_box.2.k8upsje2qnfcejtldabktnbfd
4089040fe4b2   cafeduke/busybox:latest   <span class="s2">"sh -l"</span>   About a minute ago   Up 58 seconds             foo_box.3.s13r28pgabx8udbadtmqvdfzr

<span class="c"># Verify that container from one network CANNOT communicate with other.</span>
<span class="o">&gt;</span> docker container <span class="nb">exec</span> <span class="nt">-it</span> foo_box.1.x49cl1czrm14vn6pfn3bo8uqt sh <span class="nt">-l</span>
Sourcing /root/.profile
10.0.1.9 /&gt; ping <span class="nt">-c</span> 2 bar_box
ping: bad address <span class="s1">'bar_box'</span>

</code></pre></div></div>

<h1 id="swarm-stack-single-node">Swarm stack single node</h1>

<h2 id="create-a-stack-yaml">Create a stack YAML</h2>
<ul>
  <li>The image used here is ‘hypoport/httpd-cgi’ which is an Apache HTTP server with CGI scripts</li>
  <li>We have ap_foo service and ap_bar service with multiple replicas</li>
</ul>

<blockquote>
  <p>Both services have a common network ‘my_net’ due to which they can communicate with each other using the SERVICE name as DNS</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">cat </span>docker-compose.yml
version: <span class="s2">"3.8"</span>

services:

  ap_foo:
    image: hypoport/httpd-cgi
    ports:
      - 8801:80
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      - my_net_foo
      - my_net

  ap_bar:
    image: hypoport/httpd-cgi
    ports:
      - 8802:80
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - my_net_bar
      - my_net

networks:
  my_net_foo:
  my_net_bar:
  my_net:
</code></pre></div></div>
<h2 id="deploy-list-services-tasks-and-containers">Deploy, list services, tasks and containers</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Deploy the stack using compose file</span>
<span class="o">&gt;</span> docker stack deploy <span class="nt">--compose-file</span> docker-compose.yml mystack
Creating network mystack_my_net_bar
Creating network mystack_my_net_foo
Creating network mystack_my_net
Creating service mystack_ap_foo
Creating service mystack_ap_bar

<span class="c"># List the swarms</span>
<span class="o">&gt;</span> docker stack <span class="nb">ls
</span>NAME      SERVICES   ORCHESTRATOR
mystack   2          Swarm

<span class="c"># List services of a given swarm</span>
<span class="o">&gt;</span> docker stack services mystack
ID             NAME             MODE         REPLICAS   IMAGE                       PORTS
udr6qt5bwvjc   mystack_ap_bar   replicated   2/2        hypoport/httpd-cgi:latest   <span class="k">*</span>:8802-&gt;80/tcp
nc2w6f22eee8   mystack_ap_foo   replicated   3/3        hypoport/httpd-cgi:latest   <span class="k">*</span>:8801-&gt;80/tcp

<span class="c"># List tasks of a given swarm</span>
<span class="o">&gt;</span> docker stack ps mystack
ID             NAME               IMAGE                       NODE       DESIRED STATE   CURRENT STATE           ERROR     PORTS
y8nf79qw9imm   mystack_ap_bar.1   hypoport/httpd-cgi:latest   raghu-pc   Running         Running 4 minutes ago
kc8twgfo8skk   mystack_ap_bar.2   hypoport/httpd-cgi:latest   raghu-pc   Running         Running 4 minutes ago
ihzapy3kdzge   mystack_ap_foo.1   hypoport/httpd-cgi:latest   raghu-pc   Running         Running 4 minutes ago
ix6ix23100yi   mystack_ap_foo.2   hypoport/httpd-cgi:latest   raghu-pc   Running         Running 4 minutes ago
7hxvf0223elq   mystack_ap_foo.3   hypoport/httpd-cgi:latest   raghu-pc   Running         Running 4 minutes ago

<span class="c"># List all containers</span>
<span class="o">&gt;</span> docker container <span class="nb">ls
</span>CONTAINER ID   IMAGE                       COMMAND                  CREATED          STATUS          PORTS     NAMES
5aba92fbd850   hypoport/httpd-cgi:latest   <span class="s2">"/usr/local/apache2/…"</span>   6 seconds ago    Up 3 seconds    80/tcp    mystack_ap_bar.2.kc8twgfo8skk6eknnhhm661te
4927e02f38e0   hypoport/httpd-cgi:latest   <span class="s2">"/usr/local/apache2/…"</span>   6 seconds ago    Up 3 seconds    80/tcp    mystack_ap_bar.1.y8nf79qw9immrlu4ekk2h6fm9
b89c7a2a3a36   hypoport/httpd-cgi:latest   <span class="s2">"/usr/local/apache2/…"</span>   11 seconds ago   Up 9 seconds    80/tcp    mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek
498ff86251e2   hypoport/httpd-cgi:latest   <span class="s2">"/usr/local/apache2/…"</span>   11 seconds ago   Up 9 seconds    80/tcp    mystack_ap_foo.3.7hxvf0223elqxyy6fxqzpyzyq
f55d7e926592   hypoport/httpd-cgi:latest   <span class="s2">"/usr/local/apache2/…"</span>   11 seconds ago   Up 9 seconds    80/tcp    mystack_ap_foo.2.ix6ix23100yi0c9zqy1ad5hgg
</code></pre></div></div>

<h2 id="verify-tasks-communicate-using-service-name">Verify tasks communicate using service name</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># mystack_ap_foo.1 can communicate with one of the tasks among ap_bar using the SERVICE name 'ap_bar' as hostname</span>
<span class="o">&gt;</span> docker <span class="nb">exec </span>mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek curl <span class="nt">-s</span> http://ap_bar/hello
Hello world!

<span class="c"># mystack_ap_bar.1 can communicate with one of the tasks among ap_foo using the SERVICE name 'ap_foo' as hostname</span>
<span class="o">&gt;</span> docker <span class="nb">exec </span>mystack_ap_bar.1.y8nf79qw9immrlu4ekk2h6fm9 curl <span class="nt">-s</span> http://ap_foo/hello
Hello world!
</code></pre></div></div>

<h2 id="verify-routing-mesh">Verify routing mesh</h2>

<h3 id="ips-from-networks">IPs from networks</h3>

<p>Each network the container is associated with gives it an IP.</p>

<blockquote>
  <p>A network acts like an NIC (Network Interface Card) for the container.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker network <span class="nb">ls</span> | <span class="nb">grep </span>mystack
y33ke14moxcw   mystack_my_net       overlay   swarm
vndr6wduxwx9   mystack_my_net_bar   overlay   swarm
i4c3ifvcii4d   mystack_my_net_foo   overlay   swarm

<span class="c"># IPs of ap_foo and ap_bar containers from shared network</span>
<span class="o">&gt;</span> docker network inspect mystack_my_net | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"mystack_my_net"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.3/24"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"mystack_ap_foo.2.ix6ix23100yi0c9zqy1ad5hgg"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.4/24"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"mystack_ap_foo.3.7hxvf0223elqxyy6fxqzpyzyq"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.5/24"</span>,

  <span class="s2">"Name"</span>: <span class="s2">"mystack_ap_bar.1.y8nf79qw9immrlu4ekk2h6fm9"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.8/24"</span>,
  <span class="s2">"Name"</span>: <span class="s2">"mystack_ap_bar.2.kc8twgfo8skk6eknnhhm661te"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.9/24"</span>,

  <span class="s2">"Name"</span>: <span class="s2">"mystack_my_net-endpoint"</span>,
  <span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.9.6/24"</span>,

<span class="c"># IPs of ap_foo containers</span>
<span class="o">&gt;</span> docker network inspect mystack_my_net_foo | egrep <span class="s2">"IPv4"</span>
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.8.5/24"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.8.3/24"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.8.4/24"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.8.6/24"</span>,

<span class="c"># IPs of ap_bar containers</span>
<span class="o">&gt;</span> docker network inspect mystack_my_net_bar | egrep <span class="s2">"IPv4"</span>
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.7.3/24"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.7.4/24"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.7.5/24"</span>,

</code></pre></div></div>

<h3 id="verify-load-balancing">Verify load balancing</h3>

<blockquote>
  <p>Requesting one service from another, using service name as hostname, automatically load-balances (round robin algorithm) among the available tasks.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Request service ap_foo from one of bar containers</span>
docker container <span class="nb">exec</span> <span class="nt">-it</span> mystack_ap_bar.1.y8nf79qw9immrlu4ekk2h6fm9 bash <span class="nt">-c</span> <span class="s1">'for x in {1..10}
&gt; do
&gt;   curl -s http://ap_foo/show_env | grep SERVER_ADDR
&gt; done
&gt; '</span>
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.5
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.4
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.3
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.5
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.4
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.3
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.5
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.4
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.3
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.5

<span class="c"># Request service ap_bar from one of foo containers</span>
<span class="o">&gt;</span> docker container <span class="nb">exec </span>mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek bash <span class="nt">-c</span> <span class="s1">'for x in {1..10}
&gt; do
&gt;   curl -s http://ap_bar/show_env | grep SERVER_ADDR
&gt; done
&gt; '</span>
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.9
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.8
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.9
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.8
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.9
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.8
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.9
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.8
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.9
<span class="nv">SERVER_ADDR</span><span class="o">=</span>10.0.9.8
</code></pre></div></div>

<h3 id="verify-vip">Verify VIP</h3>

<ul>
  <li>The IPs obtained by pinging services <code class="language-plaintext highlighter-rouge">ap_bar</code> and <code class="language-plaintext highlighter-rouge">ap_foo</code> do not belong to any container!</li>
  <li>These are VIPs – There is no container running with this IP  – The swarm manages these IPs</li>
  <li>Tasks/Containers may die and come up with another IP –  The corresponding VIP will keep track.</li>
  <li>The VIP remains and load-balances among the tasks of the service.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker <span class="nb">exec </span>mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek ping <span class="nt">-c</span> 2 ap_bar
PING ap_bar <span class="o">(</span>10.0.9.7<span class="o">)</span>: 56 data bytes
64 bytes from 10.0.9.7: <span class="nb">seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.088 ms
64 bytes from 10.0.9.7: <span class="nb">seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.182 ms

<span class="o">&gt;</span> docker <span class="nb">exec </span>mystack_ap_foo.1.ihzapy3kdzgeskl6qqpm0voek ping <span class="nt">-c</span> 2 ap_foo
PING ap_foo <span class="o">(</span>10.0.9.2<span class="o">)</span>: 56 data bytes
64 bytes from 10.0.9.2: <span class="nb">seq</span><span class="o">=</span>0 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.099 ms
64 bytes from 10.0.9.2: <span class="nb">seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>0.165 ms

<span class="c"># Note that the address returned by the ping to service is not part of any network container</span>
<span class="o">&gt;</span> docker network inspect mystack_my_net mystack_my_net_foo mystack_my_net_bar | <span class="nb">grep </span>10.0.9.2
<span class="o">&gt;</span> docker network inspect mystack_my_net mystack_my_net_foo mystack_my_net_bar | <span class="nb">grep </span>10.0.9.7

</code></pre></div></div>

<h2 id="cleanup-stack">Cleanup Stack</h2>

<p>Note that removing the stack removes all services (all task replicas) and networks.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Removing service mystack_ap_bar
Removing service mystack_ap_foo
Removing network mystack_my_net_foo
Removing network mystack_my_net_bar
Removing network mystack_my_net
</code></pre></div></div>

<h2 id="stack-lb-apache-tomcat">Stack lb-apache-tomcat</h2>

<p>The stack consists of</p>

<ul>
  <li>A load-balancer (lb service) load balances among Apache HTTP servers (apache service).</li>
  <li>Apache hosts static files (like images) under <code class="language-plaintext highlighter-rouge">/duke</code></li>
  <li>Upon receiving request to  prefix <code class="language-plaintext highlighter-rouge">/duke/app</code> the Apache acts as a reverse-proxy routing requests to Tomcat servers (tomcat service).</li>
  <li>Tomcat hosts a web-app <code class="language-plaintext highlighter-rouge">duke.war</code></li>
</ul>

<p>This way any request to a JSP reaches tomcat via load-balancer and apache. The JSP may include several static files (such as images, css, js). While browser renders the HTML (generated by JSP) requests to static files are answered by apache. This way tomcat is better utilised to handle dynamic content.</p>

<h3 id="stack-directory-structure">Stack directory structure</h3>

<p>The load balancer is implemented using a generic image <code class="language-plaintext highlighter-rouge">cafeduke/lb:latest</code>. By generic we mean, it is not specific to this project.</p>

<p>However, the apache and tomcat and specific to this project and we have corresponding <code class="language-plaintext highlighter-rouge">cafeduke-apache</code> and <code class="language-plaintext highlighter-rouge">cafeduke-tomcat</code> directories having files to build the images.</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">cafeduke-apache</code>  routes requests to dynamic prefix <code class="language-plaintext highlighter-rouge">/duke/app</code> to <code class="language-plaintext highlighter-rouge">tomcat</code> service.</li>
  <li>The <code class="language-plaintext highlighter-rouge">cafeduke-apache</code> uses <code class="language-plaintext highlighter-rouge">tomcat</code> service name as DNS resolvable hostname.</li>
  <li>The <code class="language-plaintext highlighter-rouge">cafeduke-tomcat</code> hosts  <code class="language-plaintext highlighter-rouge">duke.war</code> that includes static files. For example, <code class="language-plaintext highlighter-rouge">pic.jsp</code> generates path to image using <code class="language-plaintext highlighter-rouge">&lt;c:url value="relative path to static file"/&gt;</code></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> tree <span class="nt">-P</span> <span class="s2">"docker-compose.yml|Dockerfile"</span>
<span class="nb">.</span>
├── cafeduke-apache
│   ├── conf
│   ├── Dockerfile
│   └── htdocs
│       └── duke
│           └── images
├── cafeduke-tomcat
│   └── Dockerfile
└── docker-compose.yml

<span class="c"># Note: We are using service name 'tomcat' as DNS hostname</span>
<span class="o">&gt;</span> <span class="nb">cat </span>cafeduke-apache/conf/duke.conf
ProxyPass <span class="s2">"/duke/app"</span> <span class="s2">"http://tomcat:8080/duke"</span>
ProxyPassReverse <span class="s2">"/duke/app"</span> <span class="s2">"http://tomcat:8080/duke"</span>

<span class="c"># pic.jsp from duke.war</span>
...
&lt;c:url <span class="nv">value</span><span class="o">=</span><span class="s2">"/images/</span><span class="k">${</span><span class="nv">param</span><span class="p">.name</span><span class="k">}</span><span class="s2">"</span> <span class="nv">var</span><span class="o">=</span><span class="s2">"urlPic"</span> /&gt;
&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">urlPic</span><span class="k">}</span><span class="s2">"</span> <span class="nv">height</span><span class="o">=</span><span class="s2">"200px"</span>/&gt;
...
</code></pre></div></div>

<h3 id="stack-compose-file">Stack compose file</h3>

<p>We have 3 services – lb(2 replicas), apache(3 replicas) and tomcat(3 replicas)</p>

<ul>
  <li>The images for apache (<code class="language-plaintext highlighter-rouge">cafeduke/apache-stack-demo:latest</code>) and tomcat (<code class="language-plaintext highlighter-rouge">cafeduke/tomcat-stack-demo:latest</code>) are built</li>
  <li>Both apache’s and tomcat’s images are tagged <code class="language-plaintext highlighter-rouge">latest</code></li>
  <li>The <code class="language-plaintext highlighter-rouge">build &gt; context</code> YAML element specifies the directory to find <code class="language-plaintext highlighter-rouge">Dockerfile</code></li>
  <li>Service <code class="language-plaintext highlighter-rouge">tomcat</code> is in network <code class="language-plaintext highlighter-rouge">backend</code> and service <code class="language-plaintext highlighter-rouge">lb</code> is in network <code class="language-plaintext highlighter-rouge">front_end</code>. However, service <code class="language-plaintext highlighter-rouge">apache</code> is on both networks <code class="language-plaintext highlighter-rouge">back_end</code> as well as <code class="language-plaintext highlighter-rouge">front_end</code>. This is because <code class="language-plaintext highlighter-rouge">apache</code> needs to route dynamic requests to <code class="language-plaintext highlighter-rouge">tomcat</code>, so they need to have a <strong>network in common</strong>  in order to communicate.</li>
  <li>The <code class="language-plaintext highlighter-rouge">depends_on</code> element ensures the dependent services are started ensuring proper order of bring up the stack.</li>
</ul>

<blockquote>
  <p>Services need a network in common to communicate with each other.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: <span class="s2">"3.8"</span>

services:

  tomcat:
    image: cafeduke/tomcat-stack-demo:latest
    build:
      context: cafeduke-tomcat
    ports:
      - <span class="s2">"18801:8080"</span>
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      back_end:

  apache:
    image: cafeduke/apache-stack-demo:latest
    build:
      context: cafeduke-apache
    ports:
      - <span class="s2">"8801:80"</span>
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      front_end:
      back_end:
    depends_on:
      - tomcat

  lb:
    image: cafeduke/lb:latest
    ports:
      - <span class="s2">"8080:80"</span>
    environment:
      - <span class="nv">ORIGIN_SERVER</span><span class="o">=</span>apache
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      front_end:
    depends_on:
      - apache

networks:
  front_end:
  back_end:
</code></pre></div></div>

<h3 id="build-images-of-the-stack">Build images of the stack</h3>

<p>A docker stack is a feature of swarm that typically manages multiple nodes. A node can go down and corresponding tasks will have to be <strong>automatically</strong> recreated on <strong>other</strong> node(s). Hence, the images used to create these tasks cannot be locally stored on a machine – It has to be uploaded (pushed) to <a href="https://hub.docker.com">docker-hub</a>.</p>

<blockquote>
  <p>A docker stack gives first preference to images uploaded to docker-hub.</p>
</blockquote>

<p>We can use <code class="language-plaintext highlighter-rouge">docker-compose</code> to build all the images specific to the stack in one go. Note that we do not have a <code class="language-plaintext highlighter-rouge">build</code> element for the generic service <code class="language-plaintext highlighter-rouge">lb</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build images for the stack</span>
<span class="o">&gt;</span> <span class="nb">cd </span>Learn/Docker/04-swarm/swarm-stack-lb-apache-tomcat
<span class="o">&gt;</span> docker-compose build

<span class="c"># No build need for lb</span>
lb uses an image, skipping
Building with native build. Learn about native build <span class="k">in </span>Compose here: https://docs.docker.com/go/compose-native-build/

<span class="c"># Service tomcat. Image cafeduke/tomcat-stack-demo:latest</span>
Building tomcat
Sending build context to Docker daemon  268.8kB

Step 1/3 : FROM tomcat:9
 <span class="nt">---</span><span class="o">&gt;</span> 040bdb29ab37
Step 2/3 : WORKDIR /usr/local/tomcat/webapps
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 19e71d584577
Step 3/3 : COPY duke.war <span class="nb">.</span>
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> fdae51fdfe1e
Successfully built fdae51fdfe1e
Successfully tagged cafeduke/tomcat-stack-demo:latest

<span class="c"># Service apache. Image cafeduke/apache-stack-demo:latest</span>
Building apache
Sending build context to Docker daemon  593.9kB

Step 1/4 : FROM hypoport/httpd-cgi:latest
 <span class="nt">---</span><span class="o">&gt;</span> 1cb56ef98369
Step 2/4 : WORKDIR /usr/local/apache2
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 3962d9b56e8e
Step 3/4 : COPY htdocs/ htdocs/
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 031a9b2abcdc
Step 4/4 : COPY conf/ conf/
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> 53aa4cd103a7
Successfully built 53aa4cd103a7
Successfully tagged cafeduke/apache-stack-demo:latest

</code></pre></div></div>
<h3 id="deploy-using-docker-stack-deploy">Deploy using docker stack deploy</h3>

<p>A stack looks first at  <a href="https://hub.docker.com">docker-hub</a> for the image</p>
<ul>
  <li>A stack deploy shall first look for an image (along with tag) in <a href="https://hub.docker.com">docker-hub</a>.</li>
  <li>If found this shall be used (even if a more recent one exists among local machine’s docker images), otherwise the local docker image shall be used warning the user.</li>
</ul>

<p>We begin by creating the stack using <code class="language-plaintext highlighter-rouge">docker stack deploy</code> command. We use the same <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, that is used to build images as well.</p>

<ul>
  <li>The stack creates the necessary networks and tasks</li>
  <li>The networks and services are appended with the stack name (In this case <code class="language-plaintext highlighter-rouge">mystack</code>)</li>
</ul>

<blockquote>
  <p>A single YAML file is used to build images (development) as well as deploy to a stack (production).</p>
</blockquote>

<p>Push images to  <a href="https://hub.docker.com">docker-hub</a></p>

<ul>
  <li>Login using <code class="language-plaintext highlighter-rouge">docker login</code> command</li>
  <li>Push images to  <a href="https://hub.docker.com">docker-hub</a> using <code class="language-plaintext highlighter-rouge">docker push &lt;image&gt;</code> command</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Deploy</span>
<span class="o">&gt;</span> docker stack deploy <span class="nt">--compose-file</span> docker-compose.yml mystack
Ignoring unsupported options: build
Creating network mystack_front_end
Creating network mystack_back_end
Creating service mystack_apache
Creating service mystack_lb
Creating service mystack_tomcat
​<span class="sb">```</span>bash

<span class="c">### Push images to hub.docker.com</span>
​<span class="sb">```</span>bash
<span class="c"># Login using hub.docker.com's login/password</span>
<span class="o">&gt;</span> docker login

<span class="c"># Push images to hub.docker.com</span>
<span class="o">&gt;</span> docker push cafeduke/apache-stack-demo:latest
The push refers to repository <span class="o">[</span>docker.io/cafeduke/apache-stack-demo]
latest: digest: sha256:67cc9a2d7448b4879c9e12cd7b0d9fc5a4554d46a4e51b993376562ade44fdcb size: 2820

<span class="o">&gt;</span> docker push cafeduke/tomcat-stack-demo:latest
The push refers to repository <span class="o">[</span>docker.io/cafeduke/tomcat-stack-demo]
latest: digest: sha256:3b5a80d3ccd8bd385935299071661ca9ef1db397d7ef248d40ca8dbdf2449691 size: 2631
</code></pre></div></div>
<h3 id="update-stack-using-docker-stack-deploy">Update stack using docker stack deploy</h3>
<p>The <code class="language-plaintext highlighter-rouge">docker stack deploy</code> command is used to update the stack as well. The new stack could have new services, scaled up/down replicas of a given service, updated config or even a new tag (version) of the service image. All services shall be updated accordingly.</p>

<blockquote>
  <p>The command to create a stack is used to update the stack as well</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The command to create a stack is used to update the stack as well</span>
<span class="o">&gt;</span> docker stack deploy <span class="nt">--compose-file</span> docker-compose.yml mystack
Ignoring unsupported options: build
Updating service mystack_tomcat <span class="o">(</span><span class="nb">id</span>: s6xdsxghfvbfc8hdlufwf7531<span class="o">)</span>
Updating service mystack_apache <span class="o">(</span><span class="nb">id</span>: lqb65l7h758n7m22mmvtc12qh<span class="o">)</span>
Updating service mystack_lb <span class="o">(</span><span class="nb">id</span>: hwp0r0dqi35v0ylzb00ebqxhh<span class="o">)</span>
</code></pre></div></div>

<h3 id="access-pages-and-verify-working">Access pages and verify working</h3>

<ul>
  <li>Verify working of http://localhost:8080/duke/app/pic.jsp?name=duke.png</li>
  <li>Verify working of http://localhost:8080/duke/app/pic.jsp?name=penguin.png</li>
  <li>Note that the <code class="language-plaintext highlighter-rouge">ServerIP</code> changes among the IPs of the <code class="language-plaintext highlighter-rouge">tomcat</code> server indicating load balancing.</li>
</ul>

<h3 id="verify-service-is-running-with-the-expected-latest-version">Verify service is running with the expected <strong>latest</strong> version</h3>

<p>Consider this</p>
<ul>
  <li>We have an existing stack up and running.</li>
  <li>We now have made changes some of our docker images, built them, tagged them as <strong>latest</strong> and pushed to  <a href="https://hub.docker.com">docker-hub</a></li>
  <li>Now when we execute <code class="language-plaintext highlighter-rouge">docker stack deploy</code> the image of the running service is <code class="language-plaintext highlighter-rouge">&lt;image&gt;:latest</code>, yet it does not have the changes in the <a href="https://hub.docker.com">docker-hub</a>  also tagged <code class="language-plaintext highlighter-rouge">&lt;image&gt;:latest</code>. What will docker do?
    <ul>
      <li>Thanks to <code class="language-plaintext highlighter-rouge">--resolve-image</code> option of <code class="language-plaintext highlighter-rouge">docker stack deploy</code> which is by default <code class="language-plaintext highlighter-rouge">always</code> , docker shall check if the <code class="language-plaintext highlighter-rouge">hash (SHA 256)</code> of the image at <a href="https://hub.docker.com">docker-hub</a> matches the one used by the running service. If they are not the same, the service shall be updated with the  <a href="https://hub.docker.com">docker-hub</a> image.</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check the hash at docker-hub</span>
<span class="c"># -----------------------------------------------------------------------------</span>
<span class="c"># https://hub.docker.com/r/cafeduke/apache-stack-demo/tags)</span>
Note the DIGEST <span class="o">(</span><span class="nb">hash</span><span class="o">)</span>: 67cc9a2d7448b48

<span class="c"># Check the hash of the image built locally</span>
<span class="c"># -----------------------------------------------------------------------------</span>
<span class="o">&gt;</span> docker image <span class="nb">ls</span> <span class="nt">--digests</span> cafeduke/apache-stack-demo | <span class="nb">grep </span>latest
cafeduke/apache-stack-demo   latest    sha256:67cc9a2d7448b4879c9e12cd7b0d9fc5a4554d46a4e51b993376562ade44fdcb   53aa4cd103a7   22 minutes ago   112MB

<span class="c"># Check the hash of the running service 'apache'</span>
<span class="c"># -----------------------------------------------------------------------------</span>
<span class="o">&gt;</span> docker service inspect mystack_apache | <span class="nb">grep</span> <span class="nt">-i</span> sha | <span class="nb">head</span> <span class="nt">-1</span>
<span class="s2">"Image"</span>: <span class="s2">"cafeduke/apache-stack-demo:latest@sha256:67cc9a2d7448b4879c9e12cd7b0d9fc5a4554d46a4e51b993376562ade44fdcb"</span>,

</code></pre></div></div>

<h1 id="swarm-multi-node">Swarm multi node</h1>

<p>Multiple nodes (machines VM/physical) can be simulated using <code class="language-plaintext highlighter-rouge">docker-machine</code> and Oracle VirtualBox softwares.</p>

<h2 id="installation">Installation</h2>

<h3 id="docker-machine">Docker machine</h3>

<ul>
  <li>Install <a href="https://docs.docker.com/machine/install-machine">docker-machine</a></li>
  <li>Verify installation</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker-machine <span class="nt">--version</span>
docker-machine version 0.16.0, build 702c267f
</code></pre></div></div>

<h3 id="install-oracle-virtualbox">Install Oracle VirtualBox</h3>

<ul>
  <li>Install <a href="https://www.virtualbox.org/wiki/Linux_Downloads">Oracle VirtualBox</a></li>
</ul>

<h2 id="create-and-manage-nodes">Create and manage nodes</h2>

<blockquote>
  <p>Each node is like a separate physical machine.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create node</span>
<span class="o">&gt;</span> docker-machine create node1 nod2 node3

<span class="c"># Verify working of node</span>
<span class="o">&gt;</span> docker-machine ssh node1
   <span class="o">(</span> <span class="s1">'&gt;'</span><span class="o">)</span>
  /<span class="o">)</span> TC <span class="o">(</span><span class="se">\ </span>  Core is distributed with ABSOLUTELY NO WARRANTY.
 <span class="o">(</span>/-_--_-<span class="se">\)</span>           www.tinycorelinux.net

<span class="c"># Stop nodes</span>
<span class="o">&gt;</span> docker-machine stop node1 node2 node3

<span class="c"># Start nodes</span>
<span class="o">&gt;</span> docker-machine start node1 node2 node3
docker-machine start node1 node2 node3
Starting <span class="s2">"node3"</span>...
Starting <span class="s2">"node2"</span>...
Starting <span class="s2">"node1"</span>...
...
...
Started machines may have new IP addresses. You may need to re-run the <span class="sb">`</span>docker-machine <span class="nb">env</span><span class="sb">`</span> command.

<span class="c"># List nodes -- Note the IPs of the node</span>
<span class="o">&gt;</span> docker-machine <span class="nb">ls
</span>NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER      ERRORS
node1   -        virtualbox   Running   tcp://192.168.99.100:2376           v19.03.12
node2   -        virtualbox   Running   tcp://192.168.99.101:2376           v19.03.12
node3   -        virtualbox   Running   tcp://192.168.99.102:2376           v19.03.12
</code></pre></div></div>

<blockquote>
  <p>docker-machine ls command lists all nodes along with their IP.</p>
</blockquote>

<h2 id="update-docker-client-to-point-to-node">Update docker client to point to node</h2>

<p>Docker client <code class="language-plaintext highlighter-rouge">docker</code> is just command (binary) that points to a given node based on environment variables.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Run the command to get the list of environent vairalbes to set OR simply run "eval $(docker-machine env node1)"</span>
<span class="o">&gt;</span> docker-machine <span class="nb">env </span>node1
<span class="nb">export </span><span class="nv">DOCKER_TLS_VERIFY</span><span class="o">=</span><span class="s2">"1"</span>
<span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span><span class="s2">"tcp://192.168.99.100:2376"</span>
<span class="nb">export </span><span class="nv">DOCKER_CERT_PATH</span><span class="o">=</span><span class="s2">"/home/raghu/.docker/machine/machines/node1"</span>
<span class="nb">export </span><span class="nv">DOCKER_MACHINE_NAME</span><span class="o">=</span><span class="s2">"node1"</span>
<span class="c"># Run this command to configure your shell:</span>
<span class="c"># eval $(docker-machine env node1)</span>

<span class="c"># Switching to node1</span>
raghu-pc ~/work&gt; <span class="nb">eval</span> <span class="si">$(</span>docker-machine <span class="nb">env </span>node1<span class="si">)</span>
raghu-pc ~/work&gt; bash
Sourcing /home/raghu/.bashrc
Sourcing /home/raghu/.profile

<span class="c"># Note that 'node1' is the new host</span>
node1 ~/work&gt; docker info | <span class="nb">grep </span>Name
 Name: node1
</code></pre></div></div>

<h2 id="manage-nodes">Manage nodes</h2>

<p>A node is like a new physical machine and is not part of any swarm. A node can join a swarm as a <strong>master</strong> or <strong>worker</strong>.</p>

<h3 id="make-node1-the-lonely-leader">Make node1 the lonely Leader</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Switching to node1</span>
raghu-pc ~/work&gt; <span class="nb">eval</span> <span class="si">$(</span>docker-machine <span class="nb">env </span>node1<span class="si">)</span>

<span class="c"># Initalize swarm on the node1 and make it the 'Leader'</span>
node1 ~/work&gt; docker swarm init <span class="nt">--advertise-addr</span> 192.168.99.100
Swarm initialized: current node <span class="o">(</span>qy4muu46yuadq5mgyrojzsp2o<span class="o">)</span> is now a manager.

To add a worker to this swarm, run the following <span class="nb">command</span>:

    docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-5k21hnpwpzuvfjbh44nhnnaol 192.168.99.100:2377

To add a manager to this swarm, run <span class="s1">'docker swarm join-token manager'</span> and follow the instructions.

<span class="c"># Command to add a node as manager</span>
<span class="o">&gt;</span> docker swarm join-token manager
To add a manager to this swarm, run the following <span class="nb">command</span>:

    docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-8qr70bbax49dtienbi9f0e0ao 192.168.99.100:2377


<span class="c"># Currently there is only node1 and it's the 'Leader'</span>
<span class="o">&gt;</span> docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o <span class="k">*</span>   node1      Ready     Active         Leader           19.03.12

</code></pre></div></div>
<p>A node can join as either mananger or worker by executing corresponding command on the node.</p>
<ul>
  <li>Join as worker: Use command <code class="language-plaintext highlighter-rouge">docker swarm join --token SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-5k21hnpwpzuvfjbh44nhnnaol 192.168.99.100:2377</code></li>
  <li>Join as manager: Use command <code class="language-plaintext highlighter-rouge">docker swarm join --token SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-8qr70bbax49dtienbi9f0e0ao 192.168.99.100:2377</code></li>
</ul>

<blockquote>
  <p>Docker swarm initialisation using <code class="language-plaintext highlighter-rouge">docker swarm init</code> gives commands to make nodes join as worker or manager</p>
</blockquote>

<h3 id="make-node2-join-the-swarm-as-worker">Make node2 join the swarm as worker</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>raghu-pc ~/work&gt; <span class="nb">eval</span> <span class="si">$(</span>docker-machine <span class="nb">env </span>node2<span class="si">)</span>

node2 ~/work&gt; docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-5k21hnpwpzuvfjbh44nhnnaol 192.168.99.100:2377
This node joined a swarm as a worker.

</code></pre></div></div>

<h4 id="verify-that-worker-cannot-viewmodify-swarm-cluster">Verify that worker cannot view/modify swarm cluster</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node2 ~/work&gt; docker node <span class="nb">ls
</span>Error response from daemon: This node is not a swarm manager. Worker nodes can<span class="s1">'t be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.
</span></code></pre></div></div>

<h4 id="verify-that-we-now-have-two-nodes-in-the-swarm">Verify that we now have two nodes in the swarm</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 ~/work&gt; docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o <span class="k">*</span>   node1      Ready     Active         Leader           19.03.12
ybw0jqm936fwhwz1gvmnfcgv5     node2      Ready     Active                          19.03.12
</code></pre></div></div>

<h3 id="promote-node2">Promote node2</h3>

<ul>
  <li>The manager status <code class="language-plaintext highlighter-rouge">Reachable</code> indicates that the node is a manager and is reachable.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 ~/work&gt; docker node promote node2
Node node2 promoted to a manager <span class="k">in </span>the swarm.
node1 ~/work&gt; docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o <span class="k">*</span>   node1      Ready     Active         Leader           19.03.12
ybw0jqm936fwhwz1gvmnfcgv5     node2      Ready     Active         Reachable        19.03.12
</code></pre></div></div>

<h3 id="make-node3-join-the-swarm-directly-as-manager">Make node3 join the swarm directly as manager</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node3 ~/work&gt; docker swarm <span class="nb">join</span> <span class="nt">--token</span> SWMTKN-1-1ygd8r5s56qzcph7cm9m0ii0eyp0hiio1gxmiomi5ofkei2l5c-8qr70bbax49dtienbi9f0e0ao 192.168.99.100:2377
This node joined a swarm as a manager.
</code></pre></div></div>

<h3 id="verify-node1-is-no-more-lonely">Verify node1 is no more lonely</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 ~/work&gt; docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o <span class="k">*</span>   node1      Ready     Active         Leader           19.03.12
ybw0jqm936fwhwz1gvmnfcgv5     node2      Ready     Active         Reachable        19.03.12
tr6kf9ec72b3wi4bdn1v39168     node3      Ready     Active         Reachable        19.03.12
</code></pre></div></div>

<h3 id="demote-node1">Demote node1</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Demote node1</span>
node1 ~/work&gt; docker node demote node1
Manager node1 demoted <span class="k">in </span>the swarm.

<span class="c"># Note that node2 is now the Leader</span>
node2 ~/work&gt; docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o     node1      Ready     Active                          19.03.12
ybw0jqm936fwhwz1gvmnfcgv5 <span class="k">*</span>   node2      Ready     Active         Leader           19.03.12
tr6kf9ec72b3wi4bdn1v39168     node3      Ready     Active         Reachable        19.03.12

</code></pre></div></div>

<h3 id="restore-status">Restore status</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># We are promoting node1 back to manager</span>
node2 ~/work&gt; docker node promote node1
Node node1 promoted to a manager <span class="k">in </span>the swarm.

<span class="c"># However, note that node2 remains the 'Leader'</span>
node2 ~/work&gt; docker node <span class="nb">ls
</span>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
qy4muu46yuadq5mgyrojzsp2o     node1      Ready     Active         Reachable        19.03.12
ybw0jqm936fwhwz1gvmnfcgv5 <span class="k">*</span>   node2      Ready     Active         Leader           19.03.12
tr6kf9ec72b3wi4bdn1v39168     node3      Ready     Active         Reachable        19.03.12

</code></pre></div></div>

<h1 id="swarm-stack-on-multi-node">Swarm stack on multi-node</h1>

<h2 id="stack-lb-apache-tomcat-1">Stack lb-apache-tomcat</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> docker stack deploy <span class="nt">--compose-file</span> docker-compose.yml mystack
Creating network mystack_front_end
Creating network mystack_back_end
Creating service mystack_lb
Creating service mystack_tomcat
Creating service mystack_apache

<span class="o">&gt;</span> docker stack <span class="nb">ls
</span>NAME      SERVICES   ORCHESTRATOR
mystack   3          Swarm

<span class="o">&gt;</span> docker stack services mystack
ID             NAME             MODE         REPLICAS   IMAGE                               PORTS
hd9ggc261a2l   mystack_apache   replicated   3/3        cafeduke/apache-stack-demo:latest   <span class="k">*</span>:8801-&gt;80/tcp
59fsvfei7jpm   mystack_lb       replicated   2/2        cafeduke/lb:latest                  <span class="k">*</span>:8080-&gt;80/tcp
emlju8x06l9k   mystack_tomcat   replicated   3/3        cafeduke/tomcat-stack-demo:latest   <span class="k">*</span>:18801-&gt;8080/tcp

<span class="o">&gt;</span> docker service ps mystack_apache mystack_lb mystack_tomcat <span class="nt">--filter</span> desired-state<span class="o">=</span>running
ID             NAME               IMAGE                               NODE      DESIRED STATE   CURRENT STATE           ERROR     PORTS
hsh5ndry3d20   mystack_apache.1   cafeduke/apache-stack-demo:latest   node1     Running         Running 6 minutes ago
j2txqvfi2jrg   mystack_apache.2   cafeduke/apache-stack-demo:latest   node3     Running         Running 7 minutes ago
ynzr9m2s98i4   mystack_apache.3   cafeduke/apache-stack-demo:latest   node2     Running         Running 7 minutes ago
jms3xqe1mvh3   mystack_lb.1       cafeduke/lb:latest                  node1     Running         Running 6 minutes ago
w207xkrcd40x   mystack_lb.2       cafeduke/lb:latest                  node3     Running         Running 7 minutes ago
hpi42q3p3ujo   mystack_tomcat.1   cafeduke/tomcat-stack-demo:latest   node2     Running         Running 6 minutes ago
9pbxttf4chdc   mystack_tomcat.2   cafeduke/tomcat-stack-demo:latest   node3     Running         Running 5 minutes ago
x86x8qze8w2y   mystack_tomcat.3   cafeduke/tomcat-stack-demo:latest   node1     Running         Running 5 minutes ago

</code></pre></div></div>

<h3 id="access-pages-and-verify-working-1">Access pages and verify working</h3>

<ul>
  <li>Get the IPs of nodes using <code class="language-plaintext highlighter-rouge">docker-machine ls</code></li>
  <li>Verify working of http://192.168.99.100:8080/duke/app/pic.jsp?name=duke.png</li>
  <li>Verify working of http://192.168.99.100:8080/duke/app/pic.jsp?name=penguin.png</li>
  <li>Note that the <code class="language-plaintext highlighter-rouge">ServerIP</code> changes among the IPs of the <code class="language-plaintext highlighter-rouge">tomcat</code> server indicating load balancing.</li>
</ul>

<p><strong>Note tomcat IP from each node</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node1 ~/work&gt; docker network inspect mystack_back_end | <span class="nb">grep</span> <span class="nt">-A</span> 4 <span class="s2">"tomcat"</span> | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"mystack_tomcat.3.x86x8qze8w2y1a4k97o04vt16"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.2.5/24"</span>,

node2 ~/work&gt; docker network inspect mystack_back_end | <span class="nb">grep</span> <span class="nt">-A</span> 4 <span class="s2">"tomcat"</span> | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"mystack_tomcat.1.hpi42q3p3ujocefjo6atcuo8n"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.2.3/24"</span>,

node3 ~/work&gt; docker network inspect mystack_back_end | <span class="nb">grep</span> <span class="nt">-A</span> 4 <span class="s2">"tomcat"</span> | egrep <span class="s2">"Name|IPv4"</span>
<span class="s2">"Name"</span>: <span class="s2">"mystack_tomcat.2.9pbxttf4chdch42vcr4k5issd"</span>,
<span class="s2">"IPv4Address"</span>: <span class="s2">"10.0.2.4/24"</span>,
</code></pre></div></div>

<p><strong>Send simultaneous requests and verify load-balancing</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> jget <span class="nt">-u</span> <span class="s2">"http://192.168.99.100:8080/duke/app/Snoop.jsp"</span> <span class="nt">-mode</span> MSC <span class="nt">-n</span> 10 <span class="nt">-o</span> file<span class="p">;</span> <span class="nb">grep </span>ServerIP file<span class="k">*</span>
file0001.html:ServerIP<span class="o">=</span>10.0.2.3
file0002.html:ServerIP<span class="o">=</span>10.0.2.4
file0003.html:ServerIP<span class="o">=</span>10.0.2.3
file0004.html:ServerIP<span class="o">=</span>10.0.2.5
file0005.html:ServerIP<span class="o">=</span>10.0.2.3
file0006.html:ServerIP<span class="o">=</span>10.0.2.5
file0007.html:ServerIP<span class="o">=</span>10.0.2.4
file0008.html:ServerIP<span class="o">=</span>10.0.2.4
file0009.html:ServerIP<span class="o">=</span>10.0.2.4
file0010.html:ServerIP<span class="o">=</span>10.0.2.3
</code></pre></div></div>

<h3 id="verify-routing-mesh-1">Verify routing mesh</h3>

<p>We see that requesting any of the nodes</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>raghu-pc ~/work&gt; curl <span class="nt">-s</span> <span class="nt">-I</span> <span class="s2">"http://192.168.99.100:8080/duke/app/hello.jsp"</span> | <span class="nb">head</span> <span class="nt">-1</span>
HTTP/1.1 200

raghu-pc ~/work&gt; curl <span class="nt">-s</span> <span class="nt">-I</span> <span class="s2">"http://192.168.99.101:8080/duke/app/hello.jsp"</span> | <span class="nb">head</span> <span class="nt">-1</span>
HTTP/1.1 200

raghu-pc ~/work&gt; curl <span class="nt">-s</span> <span class="nt">-I</span> <span class="s2">"http://192.168.99.102:8080/duke/app/hello.jsp"</span> | <span class="nb">head</span> <span class="nt">-1</span>
HTTP/1.1 200
</code></pre></div></div>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="cloud" /><summary type="html"><![CDATA[Table of Contents Install Terminologies Understanding using a workflow Docker container Docker core commands Core workflow Core container operations Running a container Start, stop and check container logs Login into a running container Cleanup Playing with docker run Remove container after exit Interactive shell Docker Image Dockerfile v1 Build a fresh image Rebuilding the image Dockerfile v2 Data persistence Why persist? Docker volumes Unnamed volumes Named volumes Bind mount Bind mount tomcat app Bind mount GitHub website Docker Network Bridge network Default Custom Overlay network Swarm single node Managing swarm Initialise a swarm Join a swarm Leave a swarm Managing nodes List nodes Promote/demote nodes List tasks running a node Swarm service Core service operations Create service List services Scale up Scale down Task resilience Remove a service Docker service across overlay network Swarm stack single node Create a stack YAML Deploy, list services, tasks and containers Verify tasks communicate using service name Verify routing mesh IPs from networks Verify load balancing Verify VIP Cleanup Stack Stack lb-apache-tomcat Stack directory structure Stack compose file Build images of the stack Deploy using docker stack deploy Update stack using docker stack deploy Access pages and verify working Verify service is running with the expected latest version Swarm multi node Installation Docker machine Install Oracle VirtualBox Create and manage nodes Update docker client to point to node Manage nodes Make node1 the lonely Leader Make node2 join the swarm as worker Verify that worker cannot view/modify swarm cluster Verify that we now have two nodes in the swarm Promote node2 Make node3 join the swarm directly as manager Verify node1 is no more lonely Demote node1 Restore status Swarm stack on multi-node Stack lb-apache-tomcat Access pages and verify working Verify routing mesh]]></summary></entry><entry><title type="html">Git Essentials</title><link href="/git/2020/11/12/git-essentials.html" rel="alternate" type="text/html" title="Git Essentials" /><published>2020-11-12T00:00:00+00:00</published><updated>2020-11-12T00:00:00+00:00</updated><id>/git/2020/11/12/git-essentials</id><content type="html" xml:base="/git/2020/11/12/git-essentials.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#setup-git-and-duke-git" id="markdown-toc-setup-git-and-duke-git">Setup git and duke-git</a>    <ol>
      <li><a href="#install-git" id="markdown-toc-install-git">Install git</a></li>
      <li><a href="#install-duke-git" id="markdown-toc-install-duke-git">Install duke-git</a></li>
      <li><a href="#create-your-own-git-project" id="markdown-toc-create-your-own-git-project">Create your own git project</a></li>
      <li><a href="#fork-and-clone-duke-git" id="markdown-toc-fork-and-clone-duke-git">Fork and clone duke-git</a></li>
    </ol>
  </li>
  <li><a href="#different-areas-of-storage" id="markdown-toc-different-areas-of-storage">Different areas of storage</a></li>
  <li><a href="#typical-core-workflow" id="markdown-toc-typical-core-workflow">Typical Core Workflow</a>    <ol>
      <li><a href="#moving-across-areas-of-storage" id="markdown-toc-moving-across-areas-of-storage">Moving across areas of storage</a>        <ol>
          <li><a href="#stage-files" id="markdown-toc-stage-files">Stage files</a></li>
          <li><a href="#restoring-staged-file-to-work-when-needed" id="markdown-toc-restoring-staged-file-to-work-when-needed">Restoring staged file to work, when needed</a></li>
          <li><a href="#commit-files" id="markdown-toc-commit-files">Commit files</a></li>
          <li><a href="#restore-commit-file-to-work-when-needed" id="markdown-toc-restore-commit-file-to-work-when-needed">Restore commit file to work when needed</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#undo-push" id="markdown-toc-undo-push">Undo push</a></li>
  <li><a href="#digging-little-deeper" id="markdown-toc-digging-little-deeper">Digging little deeper</a>    <ol>
      <li><a href="#more-committed" id="markdown-toc-more-committed">More committed</a>        <ol>
          <li><a href="#commits-are-stacked" id="markdown-toc-commits-are-stacked">Commits are stacked</a></li>
        </ol>
      </li>
      <li><a href="#terminologies" id="markdown-toc-terminologies">Terminologies</a>        <ol>
          <li><a href="#git-repository" id="markdown-toc-git-repository">Git Repository</a></li>
          <li><a href="#master" id="markdown-toc-master">Master</a></li>
          <li><a href="#head" id="markdown-toc-head">HEAD</a></li>
          <li><a href="#remote-and-local-repository" id="markdown-toc-remote-and-local-repository">Remote and Local Repository</a></li>
        </ol>
      </li>
      <li><a href="#a-look-a-git-config" id="markdown-toc-a-look-a-git-config">A look a git config</a></li>
      <li><a href="#local-and-remote-commits" id="markdown-toc-local-and-remote-commits">Local and remote commits</a></li>
    </ol>
  </li>
  <li><a href="#hard-reset" id="markdown-toc-hard-reset">Hard reset</a>    <ol>
      <li><a href="#why-hard-reset" id="markdown-toc-why-hard-reset">Why hard reset?</a></li>
    </ol>
  </li>
  <li><a href="#push-git-refresh-and-conflict-resolution" id="markdown-toc-push-git-refresh-and-conflict-resolution">Push, git-refresh and conflict resolution</a>    <ol>
      <li><a href="#push" id="markdown-toc-push">push</a>        <ol>
          <li><a href="#what-commits-are-we-pushing" id="markdown-toc-what-commits-are-we-pushing">What commits are we pushing?</a></li>
          <li><a href="#where-are-we-pushing" id="markdown-toc-where-are-we-pushing">Where are we pushing?</a></li>
        </ol>
      </li>
      <li><a href="#git-refresh--no-conflict" id="markdown-toc-git-refresh--no-conflict">git-refresh – no conflict</a></li>
      <li><a href="#git-refresh--conflict" id="markdown-toc-git-refresh--conflict">git-refresh – conflict</a>        <ol>
          <li><a href="#a-look-at-the-tree-before-refresh" id="markdown-toc-a-look-at-the-tree-before-refresh">A look at the tree before refresh</a></li>
          <li><a href="#refresh-branch" id="markdown-toc-refresh-branch">Refresh branch</a></li>
          <li><a href="#3-way-merge-with-meld" id="markdown-toc-3-way-merge-with-meld">3-way merge with Meld</a></li>
          <li><a href="#a-look-at-the-tree-after-refresh" id="markdown-toc-a-look-at-the-tree-after-refresh">A look at the tree after refresh</a></li>
          <li><a href="#merging-later" id="markdown-toc-merging-later">Merging later</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#branches" id="markdown-toc-branches">Branches</a>    <ol>
      <li><a href="#know-your-branch" id="markdown-toc-know-your-branch">Know your branch</a></li>
      <li><a href="#hopping-branches" id="markdown-toc-hopping-branches">Hopping branches</a>        <ol>
          <li><a href="#hopping-to-a-branch" id="markdown-toc-hopping-to-a-branch">Hopping to a branch</a></li>
          <li><a href="#hoping-to-another-and-back" id="markdown-toc-hoping-to-another-and-back">Hoping to another and back</a></li>
        </ol>
      </li>
      <li><a href="#why-branch" id="markdown-toc-why-branch">Why branch?</a>        <ol>
          <li><a href="#feature-branch" id="markdown-toc-feature-branch">Feature branch</a></li>
        </ol>
      </li>
      <li><a href="#creating-and-persisting-branches" id="markdown-toc-creating-and-persisting-branches">Creating and persisting branches</a>        <ol>
          <li><a href="#update-the-local-master" id="markdown-toc-update-the-local-master">Update the local master</a></li>
          <li><a href="#create-a-local-branch" id="markdown-toc-create-a-local-branch">Create a local branch</a></li>
          <li><a href="#add-commits-to-local-branch" id="markdown-toc-add-commits-to-local-branch">Add commits to local branch</a></li>
          <li><a href="#push-local-branch-and-all-its-commits-to-remote-repository" id="markdown-toc-push-local-branch-and-all-its-commits-to-remote-repository">Push local branch and all its commits to remote repository</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#merge-branches" id="markdown-toc-merge-branches">Merge branches</a>    <ol>
      <li><a href="#fast-forward-merge" id="markdown-toc-fast-forward-merge">Fast forward merge</a>        <ol>
          <li><a href="#a-look-at-the-tree-before-merge" id="markdown-toc-a-look-at-the-tree-before-merge">A look at the tree before merge</a></li>
          <li><a href="#merge-feature-to-master--local-repository" id="markdown-toc-merge-feature-to-master--local-repository">Merge feature to master – local repository</a></li>
          <li><a href="#a-look-at-the-tree-after-merge" id="markdown-toc-a-look-at-the-tree-after-merge">A look at the tree after merge</a></li>
          <li><a href="#persist-merge--push-to-remote" id="markdown-toc-persist-merge--push-to-remote">Persist merge – Push to remote</a></li>
        </ol>
      </li>
      <li><a href="#fork-merge" id="markdown-toc-fork-merge">Fork Merge</a>        <ol>
          <li><a href="#a-look-at-the-tree-before-merge-1" id="markdown-toc-a-look-at-the-tree-before-merge-1">A look at the tree before merge</a></li>
          <li><a href="#merge-feature-to-master--local-repository-1" id="markdown-toc-merge-feature-to-master--local-repository-1">Merge feature to master – local repository</a></li>
          <li><a href="#resolve-conflicts" id="markdown-toc-resolve-conflicts">Resolve conflicts</a></li>
          <li><a href="#3-way-merge" id="markdown-toc-3-way-merge">3-way merge</a></li>
          <li><a href="#a-look-at-the-tree-after-merge-1" id="markdown-toc-a-look-at-the-tree-after-merge-1">A look at the tree after merge</a></li>
          <li><a href="#persist-merge--push-to-remote-1" id="markdown-toc-persist-merge--push-to-remote-1">Persist merge – Push to remote</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>Git is a open-source version control system.</p>

<p>A version control system (like git, ADE, clear-case) is used for distributed software storage, development and versioning. So, a version control provides the following.</p>
<ul>
  <li>Distributed storage – The files (are shard-ed) and stored in multiple servers (using distributed file system)</li>
  <li>Parallel development – Many people can work and add features to the same project</li>
  <li>Distributed development – Two or more developers in different parts of the world can develop software. Eg: Any open source software.</li>
  <li>Conflict management  – If two developers have modified same set of files, then they can resolve the conflict (diff), typically to include both their changes.</li>
  <li>Versioning  – Various versions (stages of development) of the files are stored. So, we have the entire version history stored for each file.</li>
</ul>

<h1 id="setup-git-and-duke-git">Setup git and duke-git</h1>

<h2 id="install-git">Install git</h2>
<p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Getting-Started-Installing-Git</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> which git
/usr/bin/git

<span class="o">&gt;</span> git <span class="nt">--version</span>
git version 2.25.1
</code></pre></div></div>
<h2 id="install-duke-git">Install duke-git</h2>

<p>DukeGit is an open source projects having executable shell scripts that act as wrappers for git commands. DukeGit aims to be easy, intuitive, add-on to git commands.</p>

<p>https://github.com/cafeduke/duke-git</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Ensure duke-git is part of path</span>
<span class="o">&gt;</span> which git-history
/home/raghu/bin/duke-git/git-history
</code></pre></div></div>

<h2 id="create-your-own-git-project">Create your own git project</h2>

<ul>
  <li>Create GIT account on https://github.com/ and login. (Eg: https://github.com/raghubs81)</li>
  <li>Go to Home &gt; Repositories (tab) &gt; New (button)</li>
  <li>Create a repository say “Work” (Eg: https://github.com/raghubs81/Work)</li>
</ul>

<h2 id="fork-and-clone-duke-git">Fork and clone duke-git</h2>

<ul>
  <li>Sign into to your repository at <code class="language-plaintext highlighter-rouge">https://github.com/&lt;my_git_login&gt;</code></li>
  <li>Go to https://github.com/raghubs81/LearnGit</li>
  <li>Click on “Fork button”</li>
  <li>Now this will clone “LearnGit” into your account</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git clone https://github.com/&lt;my_git_login&gt;/LearnGit
</code></pre></div></div>

<h1 id="different-areas-of-storage">Different areas of storage</h1>

<p><img src="/assets/images/git/DukeGitStorageLevel.jpg" alt="Workflow01" /></p>

<table>
  <thead>
    <tr>
      <th>Area</th>
      <th>Alias</th>
      <th>Note</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Work</td>
      <td>Working directory, Working area, Work tree</td>
      <td>Has tracked, but modified files plus untracked files.</td>
    </tr>
    <tr>
      <td>Stage</td>
      <td>Cache, Index</td>
      <td>After reaching a milestone with a file, we save a copy (stage the file) before modifying it further. <br />In case we are not happy with the modifications we can always restore the staged version back to work.</td>
    </tr>
    <tr>
      <td>Local</td>
      <td>Local repo, Local repository</td>
      <td>After finishing a module (a bundle of files), we save the bundle of files into what we call a **commit**.</td>
    </tr>
    <tr>
      <td>Remote</td>
      <td>Remote repo, Remote repository</td>
      <td>Copy commits from local repository to the remove server.</td>
    </tr>
  </tbody>
</table>

<h1 id="typical-core-workflow">Typical Core Workflow</h1>

<p>During development, we modify files. Before we proceed further, we would like to save a copy of these files – This is called <strong>staging</strong> files. In case, we are not happy with current changes we could restore the staged copy.</p>
<ul>
  <li>Files are staged using the <code class="language-plaintext highlighter-rouge">git add &lt;path to file&gt;...</code> command.</li>
  <li>Files are copied from stage to work  using <code class="language-plaintext highlighter-rouge">git-cp-stage-work &lt;file1&gt; [&lt;file2 ... &lt;filen&gt;]</code> command</li>
  <li>Files are moved from stage to work  using <code class="language-plaintext highlighter-rouge">git-cp-stage-work &lt;file1&gt; [&lt;file2 ... &lt;filen&gt;]</code> command. Note that moving staged files, removes them from stage.</li>
</ul>

<blockquote>
  <p>Staging provides a mechanism to save a copy of the files before we make further edits</p>
</blockquote>

<p>Once we reach a milestone (could just be a minor milestone) during the development, we bundle the set of files into what we call a <strong>commit</strong>. We provide a name to the commit, indicating the milestone reached. For example, we could have a commit named “Update usage of all scripts”, “Format files to have right indentation” or “Add option –help to provide help”.</p>

<ul>
  <li>A set of files is committed using <code class="language-plaintext highlighter-rouge">git commit &lt;path to file&gt;...</code></li>
</ul>

<h2 id="moving-across-areas-of-storage">Moving across areas of storage</h2>
<h3 id="stage-files">Stage files</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check the history</span>
<span class="o">&gt;</span> git-history
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Modify fruit.txt and version.txt to add 'Orange' as version 'v4'</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt | column <span class="nt">-t</span>
Apple    v1
Banana  v2
Cherry  v3
Dates    v4
Grapes  v5

<span class="c"># Check status (We have removed unwanted lines lines from output).</span>
<span class="c"># Note that we fruit.txt and version.txt are considered modified, but are yet to be staged.</span>
<span class="o">&gt;</span> git status
Changes not staged <span class="k">for </span>commit:
  modified:   fruit.txt
  modified:   version.txt

<span class="c"># Stage the files</span>
git add version.txt fruit.txt

<span class="c"># Check status. The files are not staged, but are yet to be committed.</span>
<span class="o">&gt;</span> git status
Changes to be committed:
  modified:   fruit.txt
  modified:   version.txt
</code></pre></div></div>
<h3 id="restoring-staged-file-to-work-when-needed">Restoring staged file to work, when needed</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Let say, we messed up fruit.txt</span>
<span class="o">&gt;</span> <span class="nb">cat</span> <span class="o">&gt;</span> fruit.txt
This file got messed up!

<span class="c"># What's the status now?</span>
<span class="c"># We have our staged fruit.txt and version.txt. The fruit.txt in work is messed up.</span>
<span class="o">&gt;</span> git status
Changes to be committed:
  modified:   fruit.txt
  modified:   version.txt

Changes not staged <span class="k">for </span>commit:
  modified:   fruit.txt

<span class="c"># Lets see the one we had staged. This looks good!</span>
<span class="o">&gt;</span> git-cat-stage-file fruit.txt
Apple
Banana
Cherry
Orange

<span class="c"># Lets copy this back to work. There we go</span>
<span class="o">&gt;</span> git-cp-stage-work fruit.txt
<span class="o">&gt;</span> <span class="nb">cat </span>fruit.txt
Apple
Banana
Cherry
Orange
</code></pre></div></div>

<h3 id="commit-files">Commit files</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Status again! We are good to commit</span>
<span class="o">&gt;</span> git status
Changes to be committed:
  <span class="o">(</span>use <span class="s2">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="o">)</span>
  modified:   fruit.txt
  modified:   version.txt

<span class="c"># Lets commit!</span>
<span class="o">&gt;</span> git commit <span class="nt">--all</span> <span class="nt">-m</span> <span class="s2">"Version 5"</span>
<span class="o">[</span>master e9dce6b] Version 5

<span class="c"># Yes! We have "Version 4", a commit with ID 'e9dce6b'</span>
<span class="o">&gt;</span> git-history
e9dce6b  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Push this to the server</span>
<span class="o">&gt;</span> git push
Username <span class="k">for</span> <span class="s1">'https://github.com'</span>: &lt;Enter username&gt;
Password <span class="k">for</span> <span class="s1">'https://&lt;my_git_login&gt;@github.com'</span>: &lt;Enter password&gt;
...
To https://github.com/&lt;my_git_login&gt;/LearnGit

<span class="c"># Lets check the history now!</span>
<span class="o">&gt;</span> git-history
e9dce6b  Version 5        <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
a9a329f  Version 4
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

</code></pre></div></div>

<blockquote>
  <p>Go to<code class="language-plaintext highlighter-rouge"> https://github.com/&lt;my_git_login&gt;/LearnGit</code> and verify you see ‘Orange’</p>
</blockquote>

<h3 id="restore-commit-file-to-work-when-needed">Restore commit file to work when needed</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Let say, we messed up fruit.txt</span>
<span class="o">&gt;</span> <span class="nb">cat</span> <span class="o">&gt;</span> fruit.txt
This file got messed up!

<span class="c"># What's the status now?</span>
<span class="o">&gt;</span> git status
On branch master
Your branch is up to <span class="nb">date </span>with <span class="s1">'origin/master'</span><span class="nb">.</span>

Changes not staged <span class="k">for </span>commit:
  modified:   fruit.txt

<span class="c"># Lets check if the commited file is okay</span>
<span class="o">&gt;</span> git-history
e9dce6b  Version 4        <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
a9a329f  Version 4
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># This commit file looks good!</span>
<span class="c"># Just FYI, we could have accessed the same as 'git-cat-commit-file HEAD fruit.txt'</span>
<span class="o">&gt;</span> git-cat-commit-file e9dce6b fruit.txt
Apple
Banana
Cherry
Dates
Grapes

<span class="c"># Lets restore from commit</span>
<span class="o">&gt;</span> git-cp-commit-work e9dce6b <span class="nt">--</span> fruit.txt
<span class="o">&gt;</span> <span class="nb">cat </span>fruit.txt
Apple
Banana
Cherry
Dates
Grapes
</code></pre></div></div>

<p>In the above workflow, we cloned an existing project, modified existing files, staged them, committed them and pushed it to the remote server. We also saw restoring files from stage and commit. We covered a core portion of the workflow. If you are maintaining a repo on Git as a single contributor, this is probably what you shall most often need. However, this could be considered the “Hello World!” of git :)</p>

<h1 id="undo-push">Undo push</h1>

<p>Lets undo push and understand the commands in later sections. In a new section, we shall assume the stage (similar to a newly forked and cloned repository)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git reset <span class="nt">--hard</span> a9a329f
HEAD is now at a9a329f Version 4

<span class="o">&gt;</span> git-history
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># The regular 'git push' fails</span>
<span class="o">&gt;</span> git push
Username <span class="k">for</span> <span class="s1">'https://github.com'</span>: cafeduke
Password <span class="k">for</span> <span class="s1">'https://cafeduke@github.com'</span>:
...
error: failed to push some refs to <span class="s1">'https://github.com/&lt;my_git_login&gt;/LearnGit'</span>

<span class="c"># Lets do a force push</span>
<span class="o">&gt;</span> git push <span class="nt">--force</span>
Username <span class="k">for</span> <span class="s1">'https://github.com'</span>:
Password <span class="k">for</span> <span class="s1">'https://&lt;my_git_login&gt;@github.com'</span>:
...
To https://github.com/&lt;my_git_login&gt;/LearnGit
</code></pre></div></div>

<h1 id="digging-little-deeper">Digging little deeper</h1>

<h2 id="more-committed">More committed</h2>

<p>In this section lets get to know more about commit. A commit contains a set of files (and directories) that were created, updated or deleted. A commit represents a milestone. A text summary describes (summarises) the milestone.</p>

<blockquote>
  <p>The commit represents a milestone in the journey of developing a feature.</p>
</blockquote>

<p>We see that <code class="language-plaintext highlighter-rouge">git-history</code> lists few commits. Each commit is a seven digit hexadecimal number, along with its description. Few commits have some additional information as well. Lets learn more on these.</p>

<p>Lets take a look at a more detailed history.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git-history <span class="nt">--long</span>
a9a329f06eb46e355d23dce550b91dce5e5187fc  Version 4  Raghunandan.Seshadri  Sun,15-Nov-2020 16:46:18   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c770db3c86e85d5c9d03cd45ebf3b9f08727  Version 3  Raghunandan.Seshadri  Sun,15-Nov-2020 16:45:29
02f7753798193f27bd6bb2c7f75b58d61e58eed8  Version 2  Raghunandan.Seshadri  Sun,15-Nov-2020 16:45:10
691f07d0eecd58f59815098c38abed675e49e802  Version 1  Raghunandan.Seshadri  Sat,12-May-2018 08:37:39
</code></pre></div></div>

<ul>
  <li>A commit is a 160bit (20 byte) SHA1 hash code of the files. The same set of files, with the same change will generate the same hash. So, cloning project duke-git <code class="language-plaintext highlighter-rouge">git clone https://github.com/&lt;my_git_login&gt;/LearnGit</code> will produce the same commit IDs as given above.</li>
  <li>A one line summary of what the commit is all about. Very helpful for someone else to know what the commit is about.</li>
  <li>The author of the commit</li>
  <li>Date of commit</li>
  <li>Optional, meta-data for selected commits.</li>
</ul>

<h3 id="commits-are-stacked">Commits are stacked</h3>

<p>First off, we see that the latest commit is listed first. In other words, latest commit is at the top, followed by older commits.</p>

<h2 id="terminologies">Terminologies</h2>

<h3 id="git-repository">Git Repository</h3>

<p>A repository is a store house of all our commits. Going forward we shall see that a repository with commits is a <code class="language-plaintext highlighter-rouge">Tree</code> data structure, with several <strong>branches</strong>,  where each <code class="language-plaintext highlighter-rouge">Node</code> is a commit. A branch can have one or more <code class="language-plaintext highlighter-rouge">Nodes</code> (commits).</p>

<h3 id="master">Master</h3>
<p>By default, there is only one branch – the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>

<blockquote>
  <p>In git, the default branch is called <strong>master</strong>. Git is now changing the name to <strong>main</strong></p>
</blockquote>

<p>A branch is also a <strong>pointer</strong>, pointing to the latest commit (node) of that branch. We could create several branches (stemming from any node, as we see later) and each branch shall have a name. For example, if we have a branch named <code class="language-plaintext highlighter-rouge">dev_feature1</code> then <code class="language-plaintext highlighter-rouge">dev_feature1</code> shall point to the latest commit on branch <code class="language-plaintext highlighter-rouge">dev_feature1</code></p>

<h3 id="head">HEAD</h3>
<p><code class="language-plaintext highlighter-rouge">HEAD</code> is a pointer as well. HEAD either points to a branch or directly point to a commit. Typically, <code class="language-plaintext highlighter-rouge">HEAD</code> points to a branch. As we know, the branch in-turn points to the latest commit.</p>

<blockquote>
  <p>HEAD determines where the next commit shall be pushed (added). If we have many branches, we need to make sure HEAD is pointing to the right branch!</p>
</blockquote>

<h3 id="remote-and-local-repository">Remote and Local Repository</h3>

<p>A repository is a storehouse of commits where the commits are stored as a <code class="language-plaintext highlighter-rouge">Tree</code> data structure. A local repository stores is our local computer. However, a remote repository stores in remote server where the data is really safe (backed up).</p>

<blockquote>
  <p>Commits are <strong>not really safe</strong> until they are pushed to remote repository.</p>
</blockquote>

<p>The entire tree of commits shall be identical in local and remote repository to begin with. However, during the course of development they shall go out of sync.</p>

<h2 id="a-look-a-git-config">A look a git config</h2>

<p>We have a hidden directory in our base project folder called <code class="language-plaintext highlighter-rouge">.git</code> Lets take a look a section of the configuration stored in <code class="language-plaintext highlighter-rouge">.git/config</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">core</span><span class="pi">]</span>
  <span class="s">...</span>
<span class="pi">[</span><span class="nv">remote "origin"</span><span class="pi">]</span>
  <span class="s">url = https://github.com/&lt;my_git_login&gt;/LearnGit</span>
  <span class="s">...</span>
<span class="pi">[</span><span class="nv">branch "master"</span><span class="pi">]</span>
  <span class="s">remote = origin</span>
  <span class="s">...</span>

</code></pre></div></div>

<ul>
  <li>A remote (remote repository) named <code class="language-plaintext highlighter-rouge">origin</code> is configured with the URL <code class="language-plaintext highlighter-rouge">https://github.com/&lt;my_git_login&gt;/LearnGit</code> – This is the remote server storing our project.</li>
  <li>A branch named <code class="language-plaintext highlighter-rouge">master</code> is configured with remote <code class="language-plaintext highlighter-rouge">origin</code>.</li>
</ul>

<blockquote>
  <p>We address (point to) the remote repository using <strong>origin</strong>.  The URL provides the remote storage location.</p>
</blockquote>

<h2 id="local-and-remote-commits">Local and remote commits</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git-history takes a branch argument that defaults to current branch which is 'master'</span>
<span class="o">&gt;</span> git-history <span class="nt">-h</span>
List commit <span class="nb">history </span>of last <span class="s1">'n'</span> commits. By default, <span class="nv">n</span><span class="o">=</span>25, <span class="nv">branch</span><span class="o">=</span>&lt;current checkout branch&gt;

Usage: git-history <span class="o">[</span><span class="nt">--long</span><span class="o">]</span> <span class="o">[</span>branch] <span class="o">[</span>&lt;number of commits&gt;]

<span class="c"># Git history of master</span>
<span class="o">&gt;</span> git-history master
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Get history of commits on remote repo's master using 'origin/master'</span>
<span class="o">&gt;</span> git <span class="nb">history </span>origin/master
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Now lets add a version 5, Grapes</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt | column <span class="nt">-t</span>
Apple   v1
Banana  v2
Cherry  v3
Dates   v4
Grapes  v5

<span class="c"># Lets add to local repo using commit</span>
<span class="o">&gt;</span> git commit <span class="nt">--all</span> <span class="nt">-m</span> <span class="s2">"Version 5"</span>
<span class="o">[</span>master 991a6bc] Version 5

<span class="c"># NOTE: It reads "Your branch is ahead of 'origin/master' by 1 commit"</span>
<span class="o">&gt;</span> git status
On branch master
Your branch is ahead of <span class="s1">'origin/master'</span> by 1 commit.
...

<span class="c"># Get the history of local branch now</span>
<span class="o">&gt;</span> git <span class="nb">history </span>master
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<p>In the output of <code class="language-plaintext highlighter-rouge">git-history master</code> ,</p>

<ul>
  <li>The local repository’s master branch (or just <code class="language-plaintext highlighter-rouge">master</code> ) as usual points to the latest commit. Now, the latest commit is <code class="language-plaintext highlighter-rouge">991a6bc</code>. So, <code class="language-plaintext highlighter-rouge">master</code> is pointing to this.</li>
  <li>The <code class="language-plaintext highlighter-rouge">HEAD</code> points to the local branch <code class="language-plaintext highlighter-rouge">master</code></li>
  <li>The remote repository’s master branch  <code class="language-plaintext highlighter-rouge">origin/master</code> is pointing to <code class="language-plaintext highlighter-rouge">04c22ee</code> as before.</li>
  <li>The remote repository’s <code class="language-plaintext highlighter-rouge">HEAD</code> pointer is at the same commit <code class="language-plaintext highlighter-rouge">04c22ee</code> as well.</li>
</ul>

<h1 id="hard-reset">Hard reset</h1>
<p>We saw hard reset <code class="language-plaintext highlighter-rouge">reset --hard</code> in the <a href="#undo-push">Undo push</a> section . Using a hard reset we can go back to a desired commit.</p>

<blockquote>
  <p><strong>Warning:</strong> A hard reset deletes all tracked files in stage and work. Untracked files are unaffected.</p>
</blockquote>

<p>There are two common <code class="language-plaintext highlighter-rouge">git reset</code> methods</p>

<ul>
  <li>Relative
    <ul>
      <li>The relative method is relative to a pointer like <code class="language-plaintext highlighter-rouge">HEAD</code></li>
      <li>For example <code class="language-plaintext highlighter-rouge">git rest --hard HEAD~3</code> shall take HEAD down by 3 commits.</li>
    </ul>
  </li>
  <li>Absolute
    <ul>
      <li>Here you provide the Id of the target commit (short or full)</li>
      <li>For example <code class="language-plaintext highlighter-rouge">git reset --hard 02f7753</code> shall take HEAD to this commit “Version 2”</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git-history
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Relative reset.</span>
<span class="c"># Absolute equivalent of the command would be "git reset --hard 02f7753"</span>
<span class="o">&gt;</span> git reset <span class="nt">--hard</span> HEAD~3
HEAD is now at 02f7753 Version 2

<span class="o">&gt;</span> git-history
02f7753  Version 2   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
691f07d  Version 1

<span class="c"># You can reset to a commit not in history! This just undid our previous reset.</span>
<span class="o">&gt;</span> git reset <span class="nt">--hard</span> 991a6bc
HEAD is now at 991a6bc Version 5

<span class="o">&gt;</span> git-history
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<blockquote>
  <p><strong>Warnings</strong></p>

  <ol>
    <li>Hard reset <strong>deletes</strong> all tracked files in work and stage</li>
    <li>Hard reset moves both HEAD and master points to the target commit.</li>
    <li>After HARD reset, the commits that are no more part of history are made available for garbage collection. (Similar to Java objects that have no reference)</li>
    <li>In order to reset to a commit not in history, we need to know the commit ID and hope it is not garbage collected.</li>
  </ol>
</blockquote>

<h2 id="why-hard-reset">Why hard reset?</h2>

<p>One of the typical uses of hard reset is when we are sure, we want to discard everything (in work and stage) and go to a commit (and thus all commits leading to it). Typically this commit is in the history – So, we are sure, we want to discard the top ‘n’ commits.</p>

<p>The reason we are learning hard reset so early-on it is an easy way to test several git usecases as we shall see in subsequent sections.</p>

<h1 id="push-git-refresh-and-conflict-resolution">Push, git-refresh and conflict resolution</h1>

<h2 id="push">push</h2>

<p>As we keep committing to the local repository, the local repository is not only out of sync with remote (in case someone else needs to check on the progress). It is also <strong>not safe</strong>. As we have already seen, we need to push commits to remote.</p>

<blockquote>
  <p>We should periodically push commits to remote</p>
</blockquote>

<h4 id="what-commits-are-we-pushing">What commits are we pushing?</h4>

<p>Git push will NOT push the entire local repository tree to the remote. It will only push the <strong>new commits</strong> of the <strong>current branch</strong>.</p>

<h4 id="where-are-we-pushing">Where are we pushing?</h4>

<p>From <code class="language-plaintext highlighter-rouge">.git/config</code> we see that <code class="language-plaintext highlighter-rouge">master</code> branch uses a remote named <code class="language-plaintext highlighter-rouge">origin</code>. We see <code class="language-plaintext highlighter-rouge">origin</code> uses URL <code class="language-plaintext highlighter-rouge">https://github.com/&lt;my_git_login&gt;/LearnGit</code>. This is the remote destination for the commits.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>remote <span class="s2">"origin"</span><span class="o">]</span>
  url <span class="o">=</span> https://github.com/cafeduke/LearnGit
  ...
<span class="o">[</span>branch <span class="s2">"master"</span><span class="o">]</span>
  remote <span class="o">=</span> origin
</code></pre></div></div>

<h2 id="git-refresh--no-conflict">git-refresh – no conflict</h2>

<p>The remote repo can go ahead of what we are doing. This can be easily simulated using git-reset.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Lets reset to 'Version 2'</span>
<span class="o">&gt;</span> git-history
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="o">&gt;</span> git reset <span class="nt">--hard</span> 02f7753
HEAD is now at 02f7753 Version 2

<span class="c"># We see that our branch is behind by 2 commits</span>
<span class="o">&gt;</span> git status
On branch master
Your branch is behind <span class="s1">'origin/master'</span> by 2 commits, and can be fast-forwarded.

<span class="o">&gt;</span> git-refresh
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Pull latest commits from origin/master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
From https://github.com/&lt;my_git_login&gt;/LearnGit
 <span class="k">*</span> branch            master     -&gt; FETCH_HEAD
Updating ...
Fast-forward
...
...

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">Branch</span><span class="o">=</span>master] Top 10 commits AFTER pull
<span class="nt">---------------------------------------------------------------------------------------------------</span>
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
a9a329f  Version 4
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

</code></pre></div></div>

<h2 id="git-refresh--conflict">git-refresh – conflict</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Lets reset to 'Version 2'</span>
<span class="o">&gt;</span> git-history
991a6bc  Version 5   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="o">&gt;</span> git reset <span class="nt">--hard</span> 02f7753
HEAD is now at 02f7753 Version 2

<span class="c"># Commit with "Cactus" fruit for "Version 3"</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt
Apple    v1
Banana  v2
Cactus  v3

<span class="o">&gt;</span> git commit <span class="nt">--all</span> <span class="nt">-m</span> <span class="s2">"My version 3"</span>
<span class="o">[</span>master 5037c96] My version 3

<span class="c"># We see that the status says branch 'master' has diverged from remote 'origin/master'</span>
<span class="o">&gt;</span> git status
On branch master
Your branch and <span class="s1">'origin/master'</span> have diverged,
and have 1 and 2 different commits each, respectively.
...

<span class="c"># These are the commits on local master</span>
<span class="o">&gt;</span> git-history
5037c96  My version 3   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
02f7753  Version 2
691f07d  Version 1

<span class="c"># These are the commits on remote origin/master</span>
<span class="o">&gt;</span> git-history origin/master
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<p>Here,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git status</code> mentions that <code class="language-plaintext highlighter-rouge">Your branch and 'origin/master' have diverged</code></li>
  <li>The local and remote branches have same commits until “Version 2”. After that we have our own commits while the remote has its own.</li>
</ul>

<h3 id="a-look-at-the-tree-before-refresh">A look at the tree before refresh</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BEFORE refresh</span>
<span class="c"># --------------</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4    <span class="o">(</span>origin/master<span class="o">)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> My_version_3              <span class="o">(</span>master<span class="o">)</span>
</code></pre></div></div>
<h3 id="refresh-branch">Refresh branch</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Execute git-refresh now</span>
<span class="o">&gt;</span> git-refresh
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Pull latest commits from origin/master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
From https://github.com/&lt;my_git_login&gt;/LearnGit
 <span class="k">*</span> branch            master     -&gt; FETCH_HEAD
Removing state_resue.txt
Removing set_state.sh
Auto-merging fruit.txt
CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict <span class="k">in </span>fruit.txt
Removing fruit.3.1.mod.txt
Automatic merge failed<span class="p">;</span> fix conflicts and <span class="k">then </span>commit the result.

<span class="c">###################################################################################################</span>
CAUTION: <span class="k">***</span> Merge conflicts found <span class="k">***</span>
List of conflicts
<span class="c">###################################################################################################</span>
fruit.txt

Open conflicts using meld tool <span class="o">[</span>y]/n ?
</code></pre></div></div>
<p>Here,</p>

<ul>
  <li>There are other files that come as part of <code class="language-plaintext highlighter-rouge">origin/master</code> but we don’t have them so there is no conflict</li>
  <li>However,local and remote have updated <code class="language-plaintext highlighter-rouge">fruit.txt</code> and the changes are different resulting in a conflict.</li>
  <li>Now, you can choose ‘y’ that opens up a UI to merge or choose ‘n’ and do the same later. Lets go with ‘y’</li>
</ul>

<h3 id="3-way-merge-with-meld">3-way merge with Meld</h3>

<p>Meld is a tool that provides a UI for handling merge.</p>

<p><img src="/assets/images/git/DukeGitRefreshConflict.jpg" alt="Refresh Conflict With Meld" /></p>

<ul>
  <li>3-way refresh merge
    <ul>
      <li>A refresh merge is between local and remote branch</li>
      <li>Column-1: fruit_LOCAL: The file as in latest local commit (The content of fruit.txt as per <code class="language-plaintext highlighter-rouge">master</code>)</li>
      <li>Column-3: fruit_REMOTE: The file as in latest remote commit (The content of fruit.txt as per <code class="language-plaintext highlighter-rouge">origin/master</code>)</li>
      <li>Column-2: fruit.txt: The file as per the commit that is common to both local and remote (Commit “Version 2”)</li>
    </ul>
  </li>
  <li>In essence, Column-1 tells us how <strong>we</strong> have modified contents in Column-2 and Column-3 tells us how someone else (remote) has modified contents in Column-2.</li>
  <li>
    <p>Now, we need to update the file <strong>only</strong> in Column-2 by referring the other columns and deciding what we want to keep.</p>
  </li>
  <li>Lets go with following fruits for fruit.txt (Column-2)
    <ul>
      <li>Apple</li>
      <li>Banana</li>
      <li>Cherry Citric</li>
      <li>Dates</li>
    </ul>
  </li>
  <li>Save and close</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Normal merge conflict <span class="k">for</span> <span class="s1">'fruit.txt'</span>:
  <span class="o">{</span><span class="nb">local</span><span class="o">}</span>: modified file
  <span class="o">{</span>remote<span class="o">}</span>: modified file

Normal merge conflict <span class="k">for</span> <span class="s1">'version.txt'</span>:
  <span class="o">{</span><span class="nb">local</span><span class="o">}</span>: modified file
  <span class="o">{</span>remote<span class="o">}</span>: modified file

<span class="c">###################################################################################################</span>
Double check the conflict resolution and execute <span class="s1">'git commit --all -m &lt;commit message&gt;'</span>
<span class="c">###################################################################################################</span>
</code></pre></div></div>

<p>Note that we need to check if the merge is fine and commit the files.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Note:</span>
<span class="c"># - The mesage says conflicts are fixed. Yet, commit is pending.</span>
<span class="c"># - Files are staged</span>
<span class="c"># - There are untracked files fruit.txt.orig and version.txt.orig</span>
<span class="o">&gt;</span> git status
...
...
All conflicts fixed but you are still merging.
  <span class="o">(</span>use <span class="s2">"git commit"</span> to conclude merge<span class="o">)</span>

Changes to be committed:
  modified:   fruit.txt
  modified:   version.txt

Untracked files:
  <span class="o">(</span>use <span class="s2">"git add &lt;file&gt;..."</span> to include <span class="k">in </span>what will be committed<span class="o">)</span>
  fruit.txt.orig
  version.txt.orig

<span class="c"># The untracked file is just a backup of the conflict. Lets discard the untracked file</span>
<span class="o">&gt;</span> git-rm-work
<span class="nt">--------------------------------</span>  Following files shall be deleted  <span class="nt">-------------------------------</span>
Would remove fruit.txt.orig
Would remove version.txt.orig
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Continue <span class="o">[</span>y]/n ?
y
Removing fruit.txt.orig
Removing version.txt.orig

<span class="nt">---------------------------------------------------------------------------------------------------</span>
Status
<span class="nt">---------------------------------------------------------------------------------------------------</span>
...

<span class="c"># Lets check the staged fruit.txt and version.txt</span>
<span class="o">&gt;</span> git-cat-stage-file fruit.txt
Apple
Banana
Cherry Citric
Dates

<span class="o">&gt;</span> git-cat-stage-file version.txt
v1
v2
v3
v4

<span class="o">&gt;</span> git commit <span class="nt">--all</span> <span class="nt">-m</span> <span class="s2">"My merge of version 3"</span>
<span class="o">[</span>master 3a9a9e1] My merge of version 3

<span class="o">&gt;</span> git-history
3a9a9e1  My merge of version 3   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
5037c96  My version 3
a9a329f  Version 4               <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

</code></pre></div></div>

<h3 id="a-look-at-the-tree-after-refresh">A look at the tree after refresh</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BEFORE refresh</span>
master         : Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> My_Version_3
origin/master  : Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4

<span class="c"># AFTER refresh</span>
master         : Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4 <span class="nt">--</span> My_Version_3 <span class="nt">--</span> My_Merge_Of_Version_3

<span class="c"># In General</span>
<span class="c"># ----------</span>

<span class="c"># Before refresh</span>
master        : A <span class="nt">--</span> B <span class="nt">--</span> P
origin/master : A <span class="nt">--</span> B <span class="nt">--</span> C <span class="nt">--</span> D

<span class="c"># After refresh</span>
master        : A <span class="nt">--</span> B <span class="nt">--</span> C <span class="nt">--</span> D <span class="nt">--</span> P <span class="nt">--</span> M1
</code></pre></div></div>

<h3 id="merging-later">Merging later</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Lets go back to that state before refresh</span>
<span class="o">&gt;</span> git reset <span class="nt">--hard</span> 5037c96
HEAD is now at 5037c96 My Version 3

<span class="c"># Now choose 'n'</span>
<span class="o">&gt;</span> git-refresh
...
Open conflicts using meld tool <span class="o">[</span>y]/n ?
n

<span class="c"># Note that the status says we have conflicts</span>
<span class="o">&gt;</span> git status
On branch master
Your branch and <span class="s1">'origin/master'</span> have diverged,
...
You have unmerged paths.
  <span class="o">(</span>fix conflicts and run <span class="s2">"git commit"</span><span class="o">)</span>
...

<span class="c"># Lets list those conflict files</span>
<span class="o">&gt;</span> git-ls-conflict-files
fruit.txt
version.txt

<span class="c"># Lets use meld to merge now</span>
<span class="o">&gt;</span> git mergetool
</code></pre></div></div>

<h1 id="branches">Branches</h1>

<p>A simple git project (to begin with) shall have all nodes (commits) in the same branch (master). However, a tree can and most likely will have several branches with its own nodes.</p>

<h2 id="know-your-branch">Know your branch</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Display local branches</span>
<span class="c"># Star (*) indicates the current branch.</span>
<span class="o">&gt;</span> git branch
<span class="k">*</span> master

<span class="c"># Display current branch</span>
<span class="o">&gt;</span> git branch <span class="nt">--show-current</span>
master

<span class="c"># Display all branches</span>
<span class="o">&gt;</span> git branch <span class="nt">-a</span>
<span class="k">*</span> master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev_jackie
  remotes/origin/dev_mango
  remotes/origin/master
</code></pre></div></div>

<p>Here,</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">remotes/</code> prefix indicates it’s a remote branch. Absence of it indicates it is a local branch.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">remotes/origin</code> indicates that it is a remote branch associated with a remote (remote repository) named <code class="language-plaintext highlighter-rouge">origin</code></p>
  </li>
</ul>

<h2 id="hopping-branches">Hopping branches</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Tree (Used _ intead of space in commit message)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4                    <span class="o">(</span>master<span class="o">)</span>
               |                         |
               |                         +-- Add_Jackie             <span class="o">(</span>dev_jackie<span class="o">)</span>
               |
               +-- Add_Mango <span class="nt">--</span> Add_Raw_Mango                       <span class="o">(</span>dev_mango<span class="o">)</span>

</code></pre></div></div>

<h3 id="hopping-to-a-branch">Hopping to a branch</h3>

<p>We hop to a new branch using <code class="language-plaintext highlighter-rouge">git checkout</code> command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Lets go to an existing branch</span>
<span class="o">&gt;</span> git checkout dev_jackie
Branch <span class="s1">'dev_jackie'</span> <span class="nb">set </span>up to track remote branch <span class="s1">'dev_jackie'</span> from <span class="s1">'origin'</span><span class="nb">.</span>
Switched to a new branch <span class="s1">'dev_jackie'</span>

<span class="c"># A local dev_jackie branch wasn't there. The remote branch was cloned to local repo and we switched.</span>
<span class="o">&gt;</span> git branch <span class="nt">-a</span>
<span class="k">*</span> dev_jackie
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev_jackie
  remotes/origin/dev_mango
  remotes/origin/master

<span class="c"># Node</span>
<span class="c">#  - Local branch 'dev_jackie' and remote branch 'origin/dev_jackie' point to same commit</span>
<span class="c">#  - HEAD points to the local branch 'dev_jackie' now!</span>
<span class="o">&gt;</span> git-history
c2bd70b  Add jackie  <span class="o">(</span>HEAD -&gt; dev_jackie, origin/dev_jackie<span class="o">)</span>
a9a329f  Version 4   <span class="o">(</span>origin/master, origin/HEAD, master<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="c"># Lets check the status</span>
<span class="o">&gt;</span> git status
On branch dev_jackie
Your branch is up to <span class="nb">date </span>with <span class="s1">'origin/dev_jackie'</span><span class="nb">.</span>

nothing to commit, working tree clean

<span class="c"># Lets see contents</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt | column <span class="nt">-t</span>
Apple      v1
Banana     v2
Cherry     v3
Dates      v4
Jackfruit  v5
</code></pre></div></div>

<blockquote>
  <p>When you hop a branch HEAD shall point to the target branch.</p>
</blockquote>

<h3 id="hoping-to-another-and-back">Hoping to another and back</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git checkout dev_mango
Branch <span class="s1">'dev_mango'</span> <span class="nb">set </span>up to track remote branch <span class="s1">'dev_mango'</span> from <span class="s1">'origin'</span><span class="nb">.</span>
Switched to a new branch <span class="s1">'dev_mango'</span>

<span class="o">&gt;</span> git branch <span class="nt">-a</span>
  dev_jackie
<span class="k">*</span> dev_mango
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev_jackie
  remotes/origin/dev_mango
  remotes/origin/master

<span class="c"># Note that this commit has branched after 'Version 2' and has added two more commits</span>
<span class="o">&gt;</span> git-history
3bf806c  Add raw mango   <span class="o">(</span>HEAD -&gt; dev_mango, origin/dev_mango<span class="o">)</span>
1dcae00  Add mango
02f7753  Version 2       <span class="o">(</span>master<span class="o">)</span>
691f07d  Version 1

<span class="o">&gt;</span> git checkout master
Switched to branch <span class="s1">'master'</span>
Your branch is up to <span class="nb">date </span>with <span class="s1">'origin/master'</span><span class="nb">.</span>

<span class="o">&gt;</span> git-history
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<h2 id="why-branch">Why branch?</h2>

<p>There are two broad purposes for having a branch.</p>

<ol>
  <li>Feature branch
    <ul>
      <li>The purpose of this branch is for the developer to add a feature or fix a bug.</li>
      <li>This is the branch we have seen all the while in previous sections.</li>
    </ul>
  </li>
  <li>Release branch
    <ul>
      <li>This is a branch meant for a specific release of the product.</li>
      <li>This branch shall be maintained (bug fixes are supported) as long as the release is supported.</li>
      <li>Typically new features will be added to <code class="language-plaintext highlighter-rouge">master</code> only. The release branch will have only bug fixes that are encountered in this branch.</li>
    </ul>
  </li>
</ol>

<h3 id="feature-branch">Feature branch</h3>

<p>Even as a single developer, we might be working on several bugs and features at the same time. We will have to maintain separate code lines to deal with each of them.</p>

<ul>
  <li>A typical development environment shall have several developers.</li>
  <li>Each developer shall have several branches for each feature/bug being worked on.</li>
  <li>Typically, a development (dev) branch name will be of the format
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&lt;developer id&gt;_bug&lt;bug number&gt;</code> in case of a bug fix.</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;developer id&gt;_&lt;feature&gt;</code> in case of a feature.</li>
    </ul>
  </li>
  <li>Once the branch is ready with all commits and is working fine.
    <ul>
      <li>We will have to test it with new commits (if any) in target branch (<code class="language-plaintext highlighter-rouge">master</code>)</li>
      <li>Merge the dev branch with target branch (<code class="language-plaintext highlighter-rouge">master</code>)</li>
      <li>Test again to make sure everything is working</li>
      <li>Push to remote</li>
    </ul>
  </li>
</ul>

<p>We shall see these in detail in coming sections.</p>

<h2 id="creating-and-persisting-branches">Creating and persisting branches</h2>

<p>A typical feature development or bug fix workflow involves the following steps</p>

<h3 id="update-the-local-master">Update the local master</h3>

<p>Ensure your local <code class="language-plaintext highlighter-rouge">master</code> is up to date with remote master <code class="language-plaintext highlighter-rouge">origin/master</code>. This is to ensure we are branching from the latest commit on master.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git checkout master
<span class="o">&gt;</span> git pull
</code></pre></div></div>

<h3 id="create-a-local-branch">Create a local branch</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># We have created and swtiched to a new branch</span>
<span class="o">&gt;</span> git-mk-branch dev_my_fruit
<span class="o">&gt;</span> git branch <span class="nt">--show-current</span>
dev_my_fruit
</code></pre></div></div>

<h3 id="add-commits-to-local-branch">Add commits to local branch</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add 'Grapes' as our 'Version 5' fruit and commit</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt | column <span class="nt">-t</span>
Apple    v1
Banana  v2
Cherry  v3
Dates    v4
Grapes  v5

<span class="c"># Add 'DryGrapes' as our 'Version 6' fruit and commit</span>
<span class="o">&gt;</span> <span class="nb">paste </span>fruit.txt version.txt  | column <span class="nt">-t</span>
Apple      v1
Banana     v2
Cherry     v3
Dates      v4
Grapes     v5
DryGrapes  v6

<span class="c"># Graph</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4                       <span class="o">(</span>master<span class="o">)</span>
                                         |
                                         +-- Version_5  <span class="nt">--</span> Version_6   <span class="o">(</span>dev_my_fruit<span class="o">)</span>

</code></pre></div></div>

<blockquote>
  <p>The commits as well as the branch added above are <strong>not safe</strong> as they are still in the local repository.</p>
</blockquote>

<h3 id="push-local-branch-and-all-its-commits-to-remote-repository">Push local branch and all its commits to remote repository</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git push origin dev_my_fruit
...
...
remote:
...
 <span class="k">*</span> <span class="o">[</span>new branch]      dev_my_fruit -&gt; dev_my_fruit

<span class="c"># We see a local and remote dev_my_fruit</span>
<span class="o">&gt;</span> git branch <span class="nt">-a</span>
  dev_jackie
  dev_mango
<span class="k">*</span> dev_my_fruit
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev_jackie
  remotes/origin/dev_mango
  remotes/origin/dev_my_fruit
  remotes/origin/master

<span class="c"># List the remote commits of newly created branch</span>
<span class="o">&gt;</span> git <span class="nb">history </span>origin/dev_my_fruit
d7012b1  Version 6        <span class="o">(</span>HEAD -&gt; dev_my_fruit, origin/dev_my_fruit<span class="o">)</span>
d68e9c5  Version 5
a9a329f  Version 4        <span class="o">(</span>origin/master, origin/HEAD, master<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<p>We see branch <code class="language-plaintext highlighter-rouge">origin/dev_my_fruit</code> is clearly ahead of <code class="language-plaintext highlighter-rouge">master</code> by 2 commits. The commits are now safe.</p>

<h1 id="merge-branches">Merge branches</h1>

<p>Typically merging of branches lands us into two situations. Lets take a look at them</p>

<h2 id="fast-forward-merge">Fast forward merge</h2>

<h3 id="a-look-at-the-tree-before-merge">A look at the tree before merge</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BEFORE merge</span>
<span class="c"># ------------</span>
<span class="c"># Tree (Used _ intead of space in commit message)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4                   <span class="o">(</span>master<span class="o">)</span>
                                        |
                                        +-- Add_Jackie             <span class="o">(</span>dev_jackie<span class="o">)</span>
</code></pre></div></div>

<p>Here,</p>

<ul>
  <li>Branch <code class="language-plaintext highlighter-rouge">dev_jackie</code> is branched from commit  <code class="language-plaintext highlighter-rouge">Version_4</code> of <code class="language-plaintext highlighter-rouge">master</code></li>
  <li>No commits are added to <code class="language-plaintext highlighter-rouge">master</code> after this. However, new commits are added to <code class="language-plaintext highlighter-rouge">dev_jackie</code></li>
  <li>In this situation, we say “Branches <code class="language-plaintext highlighter-rouge">master</code>  and <code class="language-plaintext highlighter-rouge">dev_jackie</code> have <strong>not</strong> diverged” (Since they are on the same line without any fork)</li>
</ul>

<h3 id="merge-feature-to-master--local-repository">Merge feature to master – local repository</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Ensure you are the the master branch</span>
<span class="o">&gt;</span> git checkout master

<span class="c"># Merge dev_jackie to it</span>
git-merge-branch dev_jackie

<span class="nt">---------------------------------------------------------------------------------------------------</span>
Pull latest commits from origin/master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Already on <span class="s1">'master'</span>
Your branch is up to <span class="nb">date </span>with <span class="s1">'origin/master'</span><span class="nb">.</span>
Already up to date.

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">TargetBranch</span><span class="o">=</span>master] Top 10 commits
<span class="nt">---------------------------------------------------------------------------------------------------</span>
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">SourceBranch</span><span class="o">=</span>dev_jackie] Top 10 commits
<span class="nt">---------------------------------------------------------------------------------------------------</span>
c2bd70b  Add jackie   <span class="o">(</span>origin/dev_jackie, dev_jackie<span class="o">)</span>
a9a329f  Version 4    <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="nt">---------------------------------------------------------------------------------------------------</span>
Merge dev_jackie <span class="nt">--</span><span class="o">&gt;</span> master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Merge dev_jackie <span class="o">[</span>y]/n ?
y
Updating a9a329f..c2bd70b
Fast-forward
 fruit.txt   | 1 +
 version.txt | 1 +
 2 files changed, 2 insertions<span class="o">(</span>+<span class="o">)</span>

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">Branch</span><span class="o">=</span>master] Top 10 commits AFTER merge
<span class="nt">---------------------------------------------------------------------------------------------------</span>
c2bd70b  Add jackie   <span class="o">(</span>HEAD -&gt; master, origin/dev_jackie, dev_jackie<span class="o">)</span>
a9a329f  Version 4    <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">git-merge-branch</code> did the following</p>

<ul>
  <li>A <code class="language-plaintext highlighter-rouge">git-merge-branch</code> merges source branch onto the target branch. Here, source branch is <code class="language-plaintext highlighter-rouge">dev_jackie</code> and target branch is <code class="language-plaintext highlighter-rouge">master</code> (We have not explicitly provided the target branch. The target branch by default is current branch ,which in this case is <code class="language-plaintext highlighter-rouge">master</code>)</li>
  <li>The current branch <code class="language-plaintext highlighter-rouge">master</code> was updated with it’s remote counter part <code class="language-plaintext highlighter-rouge">origin/master</code></li>
  <li>The top 10 commits of target branch and source branch are displayed.</li>
  <li>There is a confirmation to merge <code class="language-plaintext highlighter-rouge">dev_jackie --&gt; master</code></li>
  <li>Note that the merge is termed ‘<strong>Fast-forward</strong>’</li>
  <li>Finally, the top 10 commits of source branch <code class="language-plaintext highlighter-rouge">master</code> post merge is displayed</li>
</ul>

<h3 id="a-look-at-the-tree-after-merge">A look at the tree after merge</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AFTER merge</span>
<span class="c"># ------------</span>
<span class="c"># Tree (Used _ intead of space in commit message)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4 <span class="nt">--</span> Add_Jackie     <span class="o">(</span>master<span class="o">)</span>
                                        |
                                        +-- Add_Jackie             <span class="o">(</span>dev_jackie<span class="o">)</span>
</code></pre></div></div>

<blockquote>
  <p>The source (parent) branch gets appended with new commits.
The target (child) branch  is <strong>unaffected</strong> by merge (The target branch is neither altered nor removed)</p>
</blockquote>

<h3 id="persist-merge--push-to-remote">Persist merge – Push to remote</h3>

<p>Its not over yet! The merge is only done on local repository. It’s not over until pushed to remote.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git status
On branch master
Your branch is ahead of <span class="s1">'origin/master'</span> by 1 commit.
...

<span class="o">&gt;</span> git push
...

<span class="c"># Now its merged</span>
<span class="o">&gt;</span> git <span class="nb">history </span>origin/master
c2bd70b  Add jackie <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
a9a329f  Version 4
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<h2 id="fork-merge">Fork Merge</h2>

<h3 id="a-look-at-the-tree-before-merge-1">A look at the tree before merge</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BEFORE merge</span>
<span class="c"># ------------</span>
<span class="c"># Tree (Used _ intead of space in commit message)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4                    <span class="o">(</span>master<span class="o">)</span>
               |
               +-- Add_Mango <span class="nt">--</span> Add_Raw_Mango                       <span class="o">(</span>dev_mango<span class="o">)</span>
</code></pre></div></div>

<p>Here,</p>

<ul>
  <li>Branch <code class="language-plaintext highlighter-rouge">dev_mango</code> is branched from commit  <code class="language-plaintext highlighter-rouge">Version_2</code> of <code class="language-plaintext highlighter-rouge">master</code></li>
  <li>New commits are added to <code class="language-plaintext highlighter-rouge">master</code> after the branch. New commits are added to <code class="language-plaintext highlighter-rouge">dev_mango</code> as well.</li>
  <li>In this situation, we say “Branches <code class="language-plaintext highlighter-rouge">master</code> and <code class="language-plaintext highlighter-rouge">dev_mango</code>  <strong>have diverged</strong>” (Since there are two different paths after branching)</li>
</ul>

<h3 id="merge-feature-to-master--local-repository-1">Merge feature to master – local repository</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Ensure you are the the master branch</span>
<span class="o">&gt;</span> git checkout master

<span class="c"># Merge dev_mango with master</span>
<span class="o">&gt;</span> git-merge-branch dev_mango

<span class="nt">---------------------------------------------------------------------------------------------------</span>
Pull latest commits from origin/master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Already on <span class="s1">'master'</span>
Your branch is up to <span class="nb">date </span>with <span class="s1">'origin/master'</span><span class="nb">.</span>
Already up to date.

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">TargetBranch</span><span class="o">=</span>master] Top 10 commits
<span class="nt">---------------------------------------------------------------------------------------------------</span>
a9a329f  Version 4   <span class="o">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1

<span class="nt">---------------------------------------------------------------------------------------------------</span>
<span class="o">[</span><span class="nv">SourceBranch</span><span class="o">=</span>dev_mango] Top 10 commits
<span class="nt">---------------------------------------------------------------------------------------------------</span>
3bf806c  Add raw mango   <span class="o">(</span>origin/dev_mango, dev_mango<span class="o">)</span>
1dcae00  Add mango
02f7753  Version 2
691f07d  Version 1

<span class="nt">---------------------------------------------------------------------------------------------------</span>
Merge dev_mango <span class="nt">--</span><span class="o">&gt;</span> master
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Merge dev_mango <span class="o">[</span>y]/n ?
y
Auto-merging fruit.txt
CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict <span class="k">in </span>fruit.txt
Automatic merge failed<span class="p">;</span> fix conflicts and <span class="k">then </span>commit the result.

<span class="c">###################################################################################################</span>
CAUTION: <span class="k">***</span> Merge conflicts found <span class="k">***</span>
List of conflicts
<span class="c">###################################################################################################</span>
fruit.txt

Open conflicts using meld tool <span class="o">[</span>y]/n ?
n

<span class="c"># Note that merge conflicts are staged</span>
<span class="o">&gt;</span> git status
You have unmerged paths.
  <span class="o">(</span>fix conflicts and run <span class="s2">"git commit"</span><span class="o">)</span>

</code></pre></div></div>

<p>Here,</p>

<ul>
  <li>The current branch <code class="language-plaintext highlighter-rouge">master</code> was updated with it’s remote counter part <code class="language-plaintext highlighter-rouge">origin/master</code></li>
  <li>The top 10 commits of target branch and source branch are displayed.</li>
  <li>There is a confirmation to merge <code class="language-plaintext highlighter-rouge">dev_mango --&gt; master</code></li>
  <li><code class="language-plaintext highlighter-rouge">Automatic merge failed; fix conflicts and then commit the result.</code> After branch if master and branch have altered different files, then auto merge would have succeeded.  However in our case same files are altered. This requires us to manually resolve conflict.</li>
  <li>We have chosen to resolve conflict later.</li>
  <li>A look at the status tells us there are <strong>unmerged paths</strong>.</li>
</ul>

<h3 id="resolve-conflicts">Resolve conflicts</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List files having conflict</span>
<span class="o">&gt;</span> git-ls-conflict-files
fruit.txt

<span class="c"># This shows a text representation of the conflict</span>
<span class="o">&gt;</span> <span class="nb">cat </span>fruit.txt
Apple
Banana
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
Cherry
Dates
<span class="o">=======</span>
Mango
Raw Mango
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> dev_mango

<span class="c"># Lets merge using the UI</span>
<span class="o">&gt;</span> git mergetool
</code></pre></div></div>
<h3 id="3-way-merge">3-way merge</h3>

<p><img src="/assets/images/git/DukeGitMergeConflict.jpg" alt="" /></p>

<p>3-way merge from branch <code class="language-plaintext highlighter-rouge">dev_mango</code> (source) to <code class="language-plaintext highlighter-rouge">master</code> (target/current)</p>

<ul>
  <li>The source branch is merged with the target branch.
    <ul>
      <li>Column-1: fruit_LOCAL: The file fruit.txt as per the latest commit on target branch <code class="language-plaintext highlighter-rouge">master</code></li>
      <li>Column-3: fruit-REMOTE: The file fruit.txt as per the latest commit on source branch <code class="language-plaintext highlighter-rouge">dev_mango</code></li>
      <li>Column-2: fruit.txt: The file fruit.txt as per the commit common to branches  <code class="language-plaintext highlighter-rouge">dev_mango</code> and <code class="language-plaintext highlighter-rouge">master</code></li>
    </ul>
  </li>
  <li>Update Column-2 by referring to Column-1 and Column-3</li>
  <li>Save and Close</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># File after resolving conflict</span>
<span class="o">&gt;</span> <span class="nb">cat </span>fruit.txt
Apple
Banana
Cherry
Dates
Mango
Raw Mango

<span class="c"># Remove temp files in work</span>
<span class="o">&gt;</span> git-rm-work
git-rm-work
<span class="nt">--------------------------------</span>  Following files shall be deleted  <span class="nt">-------------------------------</span>
Would remove fruit.txt.orig
<span class="nt">---------------------------------------------------------------------------------------------------</span>
Continue <span class="o">[</span>y]/n ?
y

<span class="c"># Commit after resolving merge conflicts</span>
<span class="o">&gt;</span> git commit <span class="nt">--all</span> <span class="nt">-m</span> <span class="s2">"Merge dev_jackie"</span>
<span class="o">[</span>master 3e606f2] Merge dev_jackie

<span class="o">&gt;</span> git-history
3e606f2  Merge dev_jackie   <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
3bf806c  Add raw mango      <span class="o">(</span>origin/dev_mango, dev_mango<span class="o">)</span>
1dcae00  Add mango
a9a329f  Version 4          <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<h3 id="a-look-at-the-tree-after-merge-1">A look at the tree after merge</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AFTER merge</span>
<span class="c"># -----------</span>
<span class="c"># Tree (Used _ intead of space in commit message)</span>
Version_1 <span class="nt">--</span> Version_2 <span class="nt">--</span> Version_3 <span class="nt">--</span> Version_4 <span class="nt">--</span> Add_mango <span class="nt">--</span> Add_raw_mango <span class="nt">--</span> Merge_dev_jackie  <span class="o">(</span>master<span class="o">)</span>
               |
               +-- Add_mango <span class="nt">--</span> Add_raw_mango                                                       <span class="o">(</span>dev_mango<span class="o">)</span>
</code></pre></div></div>

<blockquote>
  <p>The source (parent) branch gets appended with new commits. There is an <strong>extra commit</strong> that resolves merge conflicts between the branches.
The target (child) branch  is <strong>unaffected</strong> by merge (The target branch is neither altered nor removed)</p>
</blockquote>

<h3 id="persist-merge--push-to-remote-1">Persist merge – Push to remote</h3>

<p>Following isa crucial difference between fast-forward merge and fork merge.</p>

<p><strong>Fast Forward merge (FF Merge):</strong> No need to test after merge</p>

<ul>
  <li>In case of fast-forward merge we saw earlier, we had tested <code class="language-plaintext highlighter-rouge">master</code> and we had tested <code class="language-plaintext highlighter-rouge">dev_jackie</code> individually before merge.</li>
  <li>There is no need to test after merge, since <code class="language-plaintext highlighter-rouge">dev_jackie</code> is just an extension of <code class="language-plaintext highlighter-rouge">master</code>  (clear super-set).</li>
  <li>Post merge, <code class="language-plaintext highlighter-rouge">master</code> has the exact same commits as <code class="language-plaintext highlighter-rouge">dev_jackie</code>.</li>
  <li>Since <code class="language-plaintext highlighter-rouge">dev_jackie</code> is already tested there is no need to test <code class="language-plaintext highlighter-rouge">master</code> after merge.</li>
</ul>

<p><strong>Fork merge:</strong> MUST test after merge</p>

<ul>
  <li>The working of new commits of <code class="language-plaintext highlighter-rouge">master</code> after branch (<code class="language-plaintext highlighter-rouge">Version_3, Version_4</code>) with commits coming from branch ( <code class="language-plaintext highlighter-rouge">Add_mango Add_raw_mango</code>) plus the merge commit <code class="language-plaintext highlighter-rouge">Merge_dev_jackie</code> has NEVER been tested.</li>
</ul>

<blockquote>
  <p>Ensure all tests succeed on local master before pushing to remote</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> git status
On branch master
Your branch is ahead of <span class="s1">'origin/master'</span> by 1 commit.
...

<span class="o">&gt;</span> git push
...

<span class="c"># Now its merged!</span>
<span class="o">&gt;</span> git <span class="nb">history </span>origin/master
3e606f2  Merge dev_jackie   <span class="o">(</span>origin/master, origin/HEAD<span class="o">)</span>
3bf806c  Add raw mango
1dcae00  Add mango
a9a329f  Version 4
5d95c77  Version 3
02f7753  Version 2
691f07d  Version 1
</code></pre></div></div>

<h1 id="references">References</h1>

<ul>
  <li><a href="https://github.com/firstcontributions/first-contributions">How to contribute to open source</a></li>
  <li><a href="https://gist.github.com/Chaser324/ce0505fbed06b947d962">Pull request workflow</a></li>
</ul>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="git" /><summary type="html"><![CDATA[Table of Contents Introduction Setup git and duke-git Install git Install duke-git Create your own git project Fork and clone duke-git Different areas of storage Typical Core Workflow Moving across areas of storage Stage files Restoring staged file to work, when needed Commit files Restore commit file to work when needed Undo push Digging little deeper More committed Commits are stacked Terminologies Git Repository Master HEAD Remote and Local Repository A look a git config Local and remote commits Hard reset Why hard reset? Push, git-refresh and conflict resolution push What commits are we pushing? Where are we pushing? git-refresh – no conflict git-refresh – conflict A look at the tree before refresh Refresh branch 3-way merge with Meld A look at the tree after refresh Merging later Branches Know your branch Hopping branches Hopping to a branch Hoping to another and back Why branch? Feature branch Creating and persisting branches Update the local master Create a local branch Add commits to local branch Push local branch and all its commits to remote repository Merge branches Fast forward merge A look at the tree before merge Merge feature to master – local repository A look at the tree after merge Persist merge – Push to remote Fork Merge A look at the tree before merge Merge feature to master – local repository Resolve conflicts 3-way merge A look at the tree after merge Persist merge – Push to remote References]]></summary></entry><entry><title type="html">Machine Translation</title><link href="/dl-rnn/2018/10/22/machine-translation.html" rel="alternate" type="text/html" title="Machine Translation" /><published>2018-10-22T00:00:00+00:00</published><updated>2018-10-22T00:00:00+00:00</updated><id>/dl-rnn/2018/10/22/machine-translation</id><content type="html" xml:base="/dl-rnn/2018/10/22/machine-translation.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ol>
      <li><a href="#language-model-vs-machine-translation" id="markdown-toc-language-model-vs-machine-translation">Language Model Vs Machine Translation</a></li>
      <li><a href="#why-greedy-search-algorithm-is-not-the-best" id="markdown-toc-why-greedy-search-algorithm-is-not-the-best">Why greedy search algorithm is not the best?</a></li>
    </ol>
  </li>
  <li><a href="#beam-search-algorithm" id="markdown-toc-beam-search-algorithm">Beam search algorithm</a>    <ol>
      <li><a href="#working" id="markdown-toc-working">Working</a></li>
      <li><a href="#refinement---length-normalization" id="markdown-toc-refinement---length-normalization">Refinement - Length Normalization</a>        <ol>
          <li><a href="#numerical-underflow" id="markdown-toc-numerical-underflow">Numerical Underflow</a></li>
          <li><a href="#unnatural-preference-to-short-sentence" id="markdown-toc-unnatural-preference-to-short-sentence">Unnatural preference to short sentence</a></li>
        </ol>
      </li>
      <li><a href="#beam-width" id="markdown-toc-beam-width">Beam Width</a></li>
      <li><a href="#refined-beam-search" id="markdown-toc-refined-beam-search">Refined Beam Search</a></li>
    </ol>
  </li>
  <li><a href="#attention-model" id="markdown-toc-attention-model">Attention Model</a>    <ol>
      <li><a href="#attention-model-for-a-single-time-step" id="markdown-toc-attention-model-for-a-single-time-step">Attention model for a single time step</a></li>
      <li><a href="#calculating-alpha" id="markdown-toc-calculating-alpha">Calculating $$\alpha$$</a>        <ol>
          <li><a href="#property-of-alpha" id="markdown-toc-property-of-alpha">Property of $$\alpha$$</a></li>
          <li><a href="#what-is-betaprec-t-i-succ-" id="markdown-toc-what-is-betaprec-t-i-succ-">What is $$\beta^{\prec t, i \succ}$$ ?</a></li>
          <li><a href="#calculating-betaprec-t-i-succ" id="markdown-toc-calculating-betaprec-t-i-succ">Calculating $$\beta^{\prec t, i \succ}$$</a></li>
        </ol>
      </li>
      <li><a href="#computational-cost" id="markdown-toc-computational-cost">Computational Cost</a></li>
    </ol>
  </li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>A machine translation is expected to output the most likely</p>

<ul>
  <li>Translation of sentence from one language (say French) to another (say English).</li>
  <li>Transcript for an audio clip.</li>
  <li>Caption for an input image.</li>
</ul>

<p>A RNN model of type N:M many-to-many is used for the purpose. The network used is also known as an encoder-decoder network or sequence-to-sequence network.</p>

<h2 id="language-model-vs-machine-translation">Language Model Vs Machine Translation</h2>

<p><strong>Language Model</strong>: A trained language model can generate novel sentences. The model is fed a zero vectors for $$a^{\prec 0 \succ}$$  and $$x^{\prec 1 \succ}$$.    The output $$y^{\prec t \succ}$$  is sampled and fed as input in the next step. Thus $$x^{\prec t \succ} = y^{\prec t-1 \succ}$$</p>

<p><img src="/assets/images/dl/RNN_LanguageModel.png" alt="RNN_LanguageModel" /></p>

<p><strong>Machine Translation:</strong> A machine translation is a concatenation of two networks $$-$$ encoder and decoder. The decoder is very similar to the language model where it operates based on a input encoding. The input encoding comes from an encoder which is a module in itself.</p>

<p><img src="/assets/images/dl/RNN_MachineTranslation.png" alt="RNN_MachineTranslation" /></p>

<p>Consider image captioning, where a caption needs to be generated for an input image. Here, the encoder module could be a CNN model such as AlexNet which generates an encoding for an input image. The encoding is fed to the decoder (purple) to generate the caption.</p>

<p>While this mechanism does address the problem, it may not provide the best translation possible for a given input sentence or the best caption possible for a given input image. Below section mention why the above solution is not the best and how to improvise.</p>

<h2 id="why-greedy-search-algorithm-is-not-the-best">Why greedy search algorithm is not the best?</h2>

<p>Consider a greedy search for machine translation, of a sentence in French to English. The encodings of the French sentence is fed to a decoder. The decoder in the first time step  predicts $$y^{\prec 1 \succ}$$.  A softmax classifier shall be used to pick the word that has the highest probability. Thus, we picked the best first word. We now input this into the next time step and pick the best second word and so on. A sentence thus generated is said be generated using <strong>“greedy search”</strong>. Why is this not the best translation?</p>

<p>Consider the following two translations</p>

<ol>
  <li>
    <p>Jane is visiting Africa in September.</p>
  </li>
  <li>
    <p>Jane is going to be visiting Africa in September.</p>
  </li>
</ol>

<p>The first translation is better than the second. Let $$x$$ be the encodings of the French sentence.  Probability $$P( “visiting” | “Jane \ is”, x)  &lt; P( “going” | “Jane \  is”, x)$$, hence the greedy search picked “going” over “visiting”.  However, when we consider the entire sentence or a much larger sentence the probability shall reverse. Probability $$ P( “Jane \ is \ visiting \ Africa” |  x)  &gt; P( “Jane \ is \ going \ to \ be \ visiting \ Africa” | x)$$.</p>

<p>In essence the best solution is the one that maximizes the following probability
$$
Maximize: \ P(y^{\prec 1 \succ},\ y^{\prec 2 \succ},\ y^{\prec 3 \succ} …\ y^{\prec n \succ} | x)
$$</p>

<h1 id="beam-search-algorithm">Beam search algorithm</h1>

<p>A greedy search does the job but is not good enough. Beam search provides a much better translation. The beam algorithm defines a parameter called <strong>beam width</strong> $$-$$ The number of top probabilities the algorithm will consider at each time step. Note that  <em>with a beam-width=1, beam search algorithm is same as greedy</em>.</p>

<h2 id="working">Working</h2>

<p>Time step $$t_1$$</p>

<ul>
  <li>Similar to greedy search, beam search takes the input encoding $$x$$ to predict the first word (among 10K words in dictionary).</li>
  <li>The greedy search would pick the highest probability word as first word and move to the next step. The beam search defines a parameter called  <strong>beam width</strong>.  If beam width is 3, the top 3 words and their probabilities ( <code class="language-plaintext highlighter-rouge">p1 = &lt;vector of 3 probabilities&gt;</code>) are stored before moving to the next time step.</li>
</ul>

<p>Time step $$ t_2 $$</p>

<ul>
  <li>
    <p>The objective of the greedy algorithm for the time step would be to just find $$ P(y^{\prec 2 \succ} | \ y^{\prec 1 \succ}, x)$$. Pick the word with the top probability.</p>
  </li>
  <li>
    <p>The objective of the beam algorithm for the time step is to maximize the following equation</p>
  </li>
</ul>

<p>$$
P(y^{\prec 1 \succ}, y^{\prec 2 \succ} | x)
$$</p>

<ul>
  <li>Probability theorem states the following</li>
</ul>

<p>$$
P(A,B | x) = P(A | x) * P(B | A,x)
$$</p>

<ul>
  <li>Applying the probability theorem, we get the following formula.</li>
</ul>

<p>$$
  P(y^{\prec 1 \succ}, y^{\prec 2 \succ} | x) = P(y^{\prec 1 \succ} | x) * P(y^{\prec 2 \succ} | x, y^{\prec 1 \succ})
$$</p>

<ul>
  <li>
    <p>The $$ t_2 $$ of the decoder outputs $$P(y^{\prec 2 \succ} | x,y^{\prec 1 \succ}) $$. That is probability for all the words in the dictionary (<code class="language-plaintext highlighter-rouge">p2 = &lt;vector of 10K probabilities&gt;</code>).</p>
  </li>
  <li>
    <p>The $$ t_1 $$ has given us $$P(y^{\prec 1 \succ} | x)$$. We just need to multiply the two. However $$ t_1 $$, in case of beam (with beam-width = 3) has given us top 3 probabilities (<code class="language-plaintext highlighter-rouge">p1</code>).</p>
  </li>
  <li>
    <p>To get all combinations, we create a vector of (3 * 10K = 30K) probabilities. <code class="language-plaintext highlighter-rouge">p1.dot(p2.T).reshape(-1, 1)</code>. In this huge vector the first 10K correspond to the top word in $$ t_1 $$, the next 10K correspond to the second topper from $$ t_1 $$ and so on.</p>
  </li>
  <li>
    <p>We now sort entire 30K and pick only top 3 words and their probabilities for the next time step.</p>
  </li>
</ul>

<blockquote>
  <p>At $$t_2$$, we are picking top 3 (beam-width=3) words with highest probability of $$P(y^{\prec 1 \succ}, y^{\prec 2 \succ} | x) $$.  In essence, at any given point of time there are only beam width copies of the network.</p>
</blockquote>

<h2 id="refinement---length-normalization">Refinement - Length Normalization</h2>

<h3 id="numerical-underflow">Numerical Underflow</h3>

<p>We define beam algorithm to maximize the collective probability of choosing all the words.</p>

<p>$$
\begin{aligned}
Maximize &amp;= \ P(y^{\prec 1 \succ},\ y^{\prec 2 \succ},\ y^{\prec 3 \succ} …\ y^{\prec n \succ} | x) <br />
         &amp;= 
 P(y^{\prec 1 \succ}|x) * 
 P(y^{\prec 2 \succ}|x,y^{\prec 1 \succ}) * 
 P(y^{\prec 3 \succ}|x,y^{\prec 2 \succ},y^{\prec 1 \succ}) \ …
 P(y^{\prec n \succ}|x,y^{\prec n-1 \succ}, … y^{\prec 2 \succ},y^{\prec 1 \succ}) \</p>

<p>\end{aligned}
$$</p>

<p>Multiplying a lot of probabilities (a number between 0 and 1) will result in a very small number resulting in <strong>numerical underflow</strong> $$-$$ The floating point representation of the computer cannot store a very small number accurately. Hence a $$log$$ of the probabilities is taken. By applying the logarithmic principles we see that the log of probabilities get summed instead of being multiplied.</p>

<p>$$
\begin{aligned}
Maximize &amp;= \ log \left[ P(y^{\prec 1 \succ},\ y^{\prec 2 \succ},\ y^{\prec 3 \succ} …\ y^{\prec n \succ} | x) \right] \</p>

<p>&amp;= log \left[
 P(y^{\prec 1 \succ}|x) * 
 P(y^{\prec 2 \succ}|x,y^{\prec 1 \succ}) * 
 P(y^{\prec 3 \succ}|x,y^{\prec 2 \succ},y^{\prec 1 \succ}) *\ … *<br />
 P(y^{\prec n \succ}|x,y^{\prec n-1 \succ}, … y^{\prec 2 \succ},y^{\prec 1 \succ})
\right] \</p>

<p>&amp;= 
 log \left[P(y^{\prec 1 \succ}|x)\right]  + 
 log \left[P(y^{\prec 2 \succ}|x,y^{\prec 1 \succ})\right] + 
 log \left[P(y^{\prec 3 \succ}|x,y^{\prec 2 \succ},y^{\prec 1 \succ})\right] + … + 
 log \left[P(y^{\prec n \succ}|x,y^{\prec n-1 \succ}, … y^{\prec 2 \succ},y^{\prec 1 \succ})\right] \</p>

<p>&amp;= \Sigma_{t=1}^{T_y} log \left[ P(y^{\prec t \succ}|x,y^{\prec 1 \succ},y^{\prec 2 \succ}, ….,y^{\prec t-1 \succ}) \right]
\end{aligned}
$$</p>

<h3 id="unnatural-preference-to-short-sentence">Unnatural preference to short sentence</h3>

<p>Despite applying log to the probability calculation as in the above section, an issue exists.</p>

<ul>
  <li>A longer sentence will have more <code class="language-plaintext highlighter-rouge">log(&lt;probability&gt;)</code> terms added. A shorter sentence will have fewer terms.</li>
  <li>Probability ranges from 0 to 1. A log of probability ranges from $$-\infty$$ to 0. Hence, a longer sentence is more negative.</li>
</ul>

<p>In essence, the algorithm shall unnaturally prefer a shorter translation to a larger translation! To normalize the magnitude of the negative number, the following formula is used. This is called <strong>Normalized log probability score</strong>
$$
Maximize = \frac{1}{(T_y)^{\alpha}} \Sigma_{t=1}^{T_y} log \left[ P(y^{\prec t \succ}|x,y^{\prec 1 \succ},y^{\prec 2 \succ}, ….,y^{\prec t-1 \succ}) \right]
$$
By dividing the equation by $$T_y$$ which is the number of words in the translation, the effect of unnatural preference is normalized. Here, $$\alpha$$ is a hyper parameter that ranges from 0 to 1 based on heuristic. Higher the $$\alpha​$$ greater the normalization effect.</p>

<h2 id="beam-width">Beam Width</h2>

<p>A large beam width gives better results but consumes more memory and is computationally expensive. A smaller beam width will be faster but will be closer to greedy search.</p>

<p>Production system uses beam width anywhere from 10 to 100 and even 1000. The gains taking beam width from say 1000 to 3000 may not be much (compared to going from 3 to 10).</p>

<p>An error analysis (next topic) shall give a better indication of where the algorithm needs fix. Does increasing beam width help OR does the encoder RNN (encoding the source language) needs fix.</p>

<h2 id="refined-beam-search">Refined Beam Search</h2>

<p>As we run beam search, we may encounter several sentences (translations) of varied lengths ranging from 1 words to say 30 words.  This means the algorithm runs for 30 time steps. In each time step the algorithm keeps track of beam-width number of possibilities. Finally, for all the sentences (of varied lengths) shortlisted, calculate the normalized probability score. The sentence with the maximum score is selected.</p>

<h1 id="attention-model">Attention Model</h1>

<p>In the previous sections, we have seen an encoder-decoder model for machine translation. Consider providing the model with a lengthy sentence. The encoder module of the model is expected to encode the <strong>entire</strong> sentence. The decoder module is then expected to decode/translate the entire sentence. This is against how a human would address a long sentence translation. A human would translate couple of words at a time. The efficiency of translation in case of encoder-decoder model, is high for short sentences and reduces for  longer sentences (20-30 words). It is hard for a network to memorize a long sentence as well. The issue is addressed using a attention model.</p>

<h2 id="attention-model-for-a-single-time-step">Attention model for a single time step</h2>

<p>The below diagram details a single time step ($$t$$) of the attention model.</p>

<p><img src="/assets/images/dl/RNN_AttensionModel.png" alt="RNN_AttensionModel" /></p>

<p>The model consists of two layers stacked on top of each other.</p>

<ul>
  <li>
    <p>Bottom Layer $$-$$ A bidirectional recurrent neural network (BRNN) without the output $$y^{\prec t \succ}$$. The forward activation $$\overrightarrow{a}^{\prec i \succ}$$  and the backward activation $$\overleftarrow{a}^{\prec i \succ}$$ are concatenated into a single vector $$a^{\prec i \succ} = (\overrightarrow{a}^{\prec i \succ}, \overleftarrow{a}^{\prec i \succ})$$</p>
  </li>
  <li>
    <p>Top Layer $$-$$ The top layer consists of a forward only RNN (similar to a decoder) that tracks the states. The activations of the top layer are denoted by $$s^{\prec t \succ}$$. The output of the top layer $$y^{\prec t \succ}$$ predicts the translated word.</p>
  </li>
  <li>
    <p>Connections $$-$$ The $$a^{\prec i \succ}$$ from the bottom layer is multiplied with corresponding $$\alpha^{\prec t, i \succ}$$ and fed to the aggregation unit (+). The $$\alpha$$  stands for <strong>attention model weight</strong> and it’s value indicates how much <strong>attention</strong> should be paid to corresponding $$a$$. The aggregation is performed by the <strong>context vector</strong> $$c^{\prec t \succ}$$, that is calculated as follows</p>
  </li>
</ul>

<p>$$
c^{\prec t \succ} = \Sigma_{i=1}^{T_x} \left[ \alpha^{\prec t, i \succ} a^{\prec i \succ}  \right]
$$</p>

<h2 id="calculating-alpha">Calculating $$\alpha$$</h2>

<p>$$\alpha^{\prec t, i \succ}$$ is the <strong>attention model weight</strong> that indicates how much <strong>attention</strong> needs to be given to the activation $$a^{\prec i \succ} = (\overrightarrow{a}^{\prec i \succ}, \overleftarrow{a}^{\prec i \succ})$$  to eventually calculate $$y^{\prec t \succ}$$.</p>

<h3 id="property-of-alpha">Property of $$\alpha$$</h3>

<p>As a property, all the $$\alpha$$ in a given time step must add up to one. 
$$
\Sigma_{i=1}^{T_x} \left[ \alpha^{\prec t,i \succ} \right] = 1
$$</p>

<p>$$\alpha^{\prec t, i \succ}$$ is calculated as follows. This is essentially the softmax calculation to ensure the values add up to 1.
$$
\alpha^{\prec t, i \succ} = \frac{exp(\beta^{\prec t, i \succ})} {\Sigma_{i=1}^{T_x} exp(\beta^{\prec t, i \succ})}
$$</p>

<h3 id="what-is-betaprec-t-i-succ-">What is $$\beta^{\prec t, i \succ}$$ ?</h3>

<p>Before answering that, lets reiterate that $$\alpha^{\prec t,i \succ}$$ is a value (weight) that is used to multiply with $$a^{\prec i \succ}$$. Higher the value greater the <strong>attention</strong> given to $$a^{\prec i \succ}$$. In essence, we are calculating the worth of $$a^{\prec i \succ}$$. This can be determined only by examining $$a^{\prec i \succ}$$ itself as well as $$s^{\prec t-1 \succ}$$ which is the previous state.</p>

<p>Now, $$\beta^{\prec t, i \succ}$$ is the value determined after examining $$a^{\prec i \succ}$$ and $$s^{\prec t-1 \succ}$$. Basically, $$\alpha$$ is a function of $$\beta$$ which in turn is a function of $$s$$ and $$a$$.</p>

<h3 id="calculating-betaprec-t-i-succ">Calculating $$\beta^{\prec t, i \succ}$$</h3>

<p>A simple NN perhaps with a single hidden layer is used to determine the value of $$\beta^{\prec t, i \succ}$$. That is, the input layer shall consists of concatenated vectors  $$a^{\prec i \succ}$$ and $$s^{\prec t-1 \succ}$$. The input layer is multiplied by weights to finally output $$\beta^{\prec t, i \succ}$$. The weights are adjusted by back propagation and gradient descent.</p>

<blockquote>
  <p>$$\alpha^{\prec t, 1 \succ}, \alpha^{\prec t, 2 \succ}, …, \alpha^{\prec t, T_x \succ} $$ are required for a single time step. Another set of all of them is required for the next time step.</p>
</blockquote>

<h2 id="computational-cost">Computational Cost</h2>

<p>Below is the total number of attention weight parameter $$\alpha$$ required for each time step.</p>

<p>$$
t_1 : \alpha^{\prec 1, 1 \succ}, \alpha^{\prec 1, 2 \succ}, …, \alpha^{\prec 1, T_x \succ} <br />
t_2 : \alpha^{\prec 2, 1 \succ}, \alpha^{\prec 2, 2 \succ}, …, \alpha^{\prec 2, T_x \succ} <br />
… <br />
… <br />
… <br />
t_{T_y} : \alpha^{\prec T_y, 1 \succ}, \alpha^{\prec T_y, 2 \succ}, …, \alpha^{\prec T_y, T_x \succ} <br />
… <br />
$$</p>

<p>With a input sentence having $$T_x$$ words and a translation having $$T_y$$ words we need $$T_x \times T_y$$ attention weight parameters. It runs in <strong>quadratic cost</strong>.</p>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="dl-rnn" /><summary type="html"><![CDATA[Table of Contents Introduction Language Model Vs Machine Translation Why greedy search algorithm is not the best? Beam search algorithm Working Refinement - Length Normalization Numerical Underflow Unnatural preference to short sentence Beam Width Refined Beam Search Attention Model Attention model for a single time step Calculating $$\alpha$$ Property of $$\alpha$$ What is $$\beta^{\prec t, i \succ}$$ ? Calculating $$\beta^{\prec t, i \succ}$$ Computational Cost]]></summary></entry><entry><title type="html">Word Representation</title><link href="/dl-rnn/2018/10/16/word-representation.html" rel="alternate" type="text/html" title="Word Representation" /><published>2018-10-16T00:00:00+00:00</published><updated>2018-10-16T00:00:00+00:00</updated><id>/dl-rnn/2018/10/16/word-representation</id><content type="html" xml:base="/dl-rnn/2018/10/16/word-representation.html"><![CDATA[<p>DRAFT</p>

<hr />

<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ol>
      <li><a href="#notation-reference" id="markdown-toc-notation-reference">Notation Reference</a></li>
      <li><a href="#representation-type" id="markdown-toc-representation-type">Representation Type</a>        <ol>
          <li><a href="#one-hot-representation" id="markdown-toc-one-hot-representation">One-Hot representation</a></li>
          <li><a href="#feature-representation-word-embedding" id="markdown-toc-feature-representation-word-embedding">Feature representation (Word embedding)</a></li>
        </ol>
      </li>
      <li><a href="#word-embedding-vs-one-hot" id="markdown-toc-word-embedding-vs-one-hot">Word embedding Vs One-Hot</a></li>
      <li><a href="#transfer-learning" id="markdown-toc-transfer-learning">Transfer learning</a></li>
      <li><a href="#word-embedding-vs-cnn-face-encoding" id="markdown-toc-word-embedding-vs-cnn-face-encoding">Word embedding Vs CNN Face encoding</a></li>
      <li><a href="#application---solve-analogy" id="markdown-toc-application---solve-analogy">Application - Solve analogy</a>        <ol>
          <li><a href="#how-to-solve-an-analogy-problem" id="markdown-toc-how-to-solve-an-analogy-problem">How to solve an analogy problem?</a></li>
          <li><a href="#similarity-between-vectors" id="markdown-toc-similarity-between-vectors">Similarity between vectors</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#learning-word-embedding" id="markdown-toc-learning-word-embedding">Learning Word Embedding</a>    <ol>
      <li><a href="#context-target-nn-model" id="markdown-toc-context-target-nn-model">Context-Target NN Model</a>        <ol>
          <li><a href="#previous-4-model" id="markdown-toc-previous-4-model">Previous-4 model</a></li>
          <li><a href="#left-4-right-4-model" id="markdown-toc-left-4-right-4-model">Left-4, right-4 model</a></li>
          <li><a href="#previous-1-model" id="markdown-toc-previous-1-model">Previous-1 model</a></li>
          <li><a href="#nearby-1-word-skip-gram-model" id="markdown-toc-nearby-1-word-skip-gram-model">Nearby-1 word (Skip gram model)</a></li>
        </ol>
      </li>
      <li><a href="#word2vec" id="markdown-toc-word2vec">Word2Vec</a>        <ol>
          <li><a href="#working" id="markdown-toc-working">Working</a></li>
          <li><a href="#cost-function" id="markdown-toc-cost-function">Cost function</a></li>
          <li><a href="#hierarchical-softmax-classifier" id="markdown-toc-hierarchical-softmax-classifier">Hierarchical Softmax Classifier</a></li>
        </ol>
      </li>
      <li><a href="#negative-sampling" id="markdown-toc-negative-sampling">Negative Sampling</a>        <ol>
          <li><a href="#training-set-creation" id="markdown-toc-training-set-creation">Training set creation</a></li>
          <li><a href="#supervised-learning-problem" id="markdown-toc-supervised-learning-problem">Supervised learning problem</a></li>
          <li><a href="#working-1" id="markdown-toc-working-1">Working</a></li>
          <li><a href="#selecting-negative-targets" id="markdown-toc-selecting-negative-targets">Selecting negative targets</a></li>
        </ol>
      </li>
      <li><a href="#glove-global-vectors-algorithm" id="markdown-toc-glove-global-vectors-algorithm">GloVe (Global Vectors) Algorithm</a>        <ol>
          <li><a href="#cost-function-1" id="markdown-toc-cost-function-1">Cost function</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#applications-of-word-embedding" id="markdown-toc-applications-of-word-embedding">Applications of word embedding</a>    <ol>
      <li><a href="#sentiment-classification" id="markdown-toc-sentiment-classification">Sentiment Classification</a>        <ol>
          <li><a href="#simple-sentiment-classification-model" id="markdown-toc-simple-sentiment-classification-model">Simple sentiment classification model</a></li>
          <li><a href="#rnn-sentiment-classification-model" id="markdown-toc-rnn-sentiment-classification-model">RNN sentiment classification model</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>Algorithms such as RNN, GRU and LSTM can be applied to Natural Language Processing (NLP).</p>

<p>One of the key ideas is <strong>word embedding</strong>  which helps learn relationship between words, such as <em>Man:Women :: King:Queen. However, it is also important to *debias</em> these learnings, to reduce bias (like say, ethnicity) which the algorithm can pickup.</p>

<h2 id="notation-reference">Notation Reference</h2>

<table>
  <thead>
    <tr>
      <th>Notation</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>$$E$$</td>
      <td>Embedding matrix of (web embeddings x dictionary words)</td>
    </tr>
    <tr>
      <td>$$O_{i}$$</td>
      <td>$$i^{th}$$  one-hot vector representation of the word.</td>
    </tr>
    <tr>
      <td>$$e_i$$</td>
      <td>$$i^{th}$$ feature vector representation of the word (word encoding).</td>
    </tr>
  </tbody>
</table>

<h2 id="representation-type">Representation Type</h2>

<p>In RNN, LSTM and GRU algorithms, we used a one-hot representation for dictionary words. This section details the limitation of one-hot and an alternative representation.</p>

<h3 id="one-hot-representation">One-Hot representation</h3>

<p>A one-hot vector for representing the index of a word in a dictionary (any one-hot for that matter, including one-hot for representing category), gives an advantage of not judging by the numeric value of the index. However, it also equates all words. Hence, the distance between one-hot representation of any two words is the same.</p>

<ol>
  <li>I want a glass of orange ___</li>
  <li>I want a glass of apple ___</li>
</ol>

<p>Even if the algorithm has learnt that ‘juice’ is likely to go with word ‘orange’, it cannot apply this learning to ‘apple’. This is because, as long as the algorithm is concerned, ‘apple’ is as good as any other word (say ‘sky’).</p>

<h3 id="feature-representation-word-embedding">Feature representation (Word embedding)</h3>

<p>Consider a table with different features (like gender, age, royalty, food, noun, verb, action, edible, etc) as rows and all words in a dictionary as columns. Each cell will have a value ranging from say -1 to 1 to indicate how appropriate a feature applies to the word.</p>

<p><img src="/assets/images/dl/RNN_WordEmbedding.png" alt="RNN_WordEmbedding" /></p>

<p>A vector for a word like “orange”, will have value closer to 1 for features like “is fruit” and a value closer to “-1” for features like “royalty”. So, “orange” and “apple” are likely to have similar features compared to “orange” and “king”. Hence, using feature representation (also called <strong>word embedding</strong>) can help apply learnings for “orange” to say “apple”.</p>

<blockquote>
  <p>Embedding signifies trying to place a given word in n-dimensional space of features</p>
</blockquote>

<p><strong>Visual representation:</strong> Lets say we have around 300 features for a word. Mapping it to a 3D/2D space (with algorithm like t-SNE) will help visualize the grouping of similar words.</p>

<h2 id="word-embedding-vs-one-hot">Word embedding Vs One-Hot</h2>

<ul>
  <li>One-hot for all words in a dictionary shall be huge. With word embedding, we could have a much small feature set.</li>
  <li>One-hot is extremely sparse compared to word embedding.</li>
  <li>One-hot cannot to used to understand similarities between words while a word embedding can.</li>
</ul>

<h2 id="transfer-learning">Transfer learning</h2>

<p>The performance of the algorithm that uses feature representation (word embedding) depends on the <strong>extensive training</strong>. For example, an algorithm that understands the feature similarities between ‘orange’ and ‘apple’, may not recognize ‘durian’  (and hence apply any learning) as it is unlikely, to have come across ‘durian’, during training.</p>

<p>One of the ways of dealing with a small training dataset is <strong>transfer learning</strong>.</p>

<ul>
  <li>An existing model, pre-trained on billions of words, from various sentences/books can be used.</li>
  <li>Train the model on the small dataset and continue to adjust the word embeddings (Adjustment not recommended unless the dataset is significantly large)</li>
</ul>

<h2 id="word-embedding-vs-cnn-face-encoding">Word embedding Vs CNN Face encoding</h2>

<p>A CNN Face encoding model was trained to take <strong>any image</strong> as input and generate a vector of encodings. This could be compared with the encodings of <strong>any</strong> other image, to judge the similarity between these images. The images that are likely to be encountered in the real word is an ever expanding infinite set while words are more or less finite. We could work on word embeddings for all words in the dictionary, store and reuse in applications.</p>

<blockquote>
  <p>As a terminology, encodings generated for a word are called embeddings</p>
</blockquote>

<h2 id="application---solve-analogy">Application - Solve analogy</h2>

<p>One of the properties of word embedding is solving analogies such as <em>“Man : Woman :: King : ? “</em>. Solving an analogy determines learning relation between words.</p>

<h3 id="how-to-solve-an-analogy-problem">How to solve an analogy problem?</h3>

<ul>
  <li>Calculate the vector distance between embedding vectors for man and woman  $$ \parallel e_{man}  - e_{woman} \parallel $$</li>
  <li>Find out which vector has the closest distance with $$e_{king}$$</li>
</ul>

<p>$$
\begin{aligned}
e_{man} - e_{woman} &amp;\approx e_{king} - e_{x} <br />
e_{x} &amp;\approx e_{king} - e_{man} + e_{woman} <br />
Solve \ for &amp;: similarity \ (e_{x},\ e_{king} - e_{man} + e_{woman}) <br />
\end{aligned}
$$</p>

<h3 id="similarity-between-vectors">Similarity between vectors</h3>

<p>The most commonly used similarity function is called <strong>cosine similarity</strong>. Cosine similarity between two vectors <code class="language-plaintext highlighter-rouge">u</code> and <code class="language-plaintext highlighter-rouge">v</code> is defined as follows.</p>

<p>$$
Cosine \ similarity \ (u, v) \ = \ \frac{ \parallel \ u^T \ v \ \parallel }{ \parallel u \parallel \ \parallel v \parallel }
$$</p>

<h1 id="learning-word-embedding">Learning Word Embedding</h1>

<p>In the section below, by training a context-target (predict target from context) model we achieve two things</p>

<ol>
  <li>Language modeling $$-$$ Predict the target given the context</li>
  <li>Learning word embedding $$-$$ Generate the embedding matrix $$E$$.</li>
</ol>

<h2 id="context-target-nn-model">Context-Target NN Model</h2>

<p>The problem is similar to <em>fill in the blanks</em>. The words given are collectively called <strong>context</strong> and the blank to be filled is called <strong>target</strong>.</p>

<h3 id="previous-4-model">Previous-4 model</h3>

<p>This section solves the language modeling problem using classic NN.  Consider the following NN that takes previous 4 words to predict the next word.</p>

<ul>
  <li>Lets say the each word embedding is a vector of size $$(300,1)$$</li>
  <li>Since we are using last 4 words as input, the input layer $$x$$ will be a vector $$(4\times300, 1) = (1200,1)$$</li>
  <li>Lets say the hidden layer $$L1$$ has 100 neurons, the weight matrix $$W1 = (100 \times 1200) $$</li>
  <li>Lets say the output layer $$L2$$ is a softmax to identify 10K classes (words of dictionary).</li>
  <li>The matrix $$E$$ having the word embeddings for all words is also a parameter (weight)</li>
</ul>

<p>Working</p>

<ul>
  <li>Back propagation used to perform gradient descent, adjust weights to learn word embeddings</li>
  <li>A algorithm should land up having similar word embeddings(feature vectors ) for ‘apple’ and ‘orange’ to minimize cost.</li>
</ul>

<blockquote>
  <p>The Previous-4 model is best suited for language modeling (Validating a sentence, Predicting next word accurately) as primary objective. For just learning word embedding the below simpler models can, very well, be used.</p>
</blockquote>

<h3 id="left-4-right-4-model">Left-4, right-4 model</h3>

<p>The training set is created by</p>

<ul>
  <li>Picking a target word.</li>
  <li>Context will be 4 words to the left + 4 words to the right of the target</li>
</ul>

<h3 id="previous-1-model">Previous-1 model</h3>

<p>The training set is created by</p>

<ul>
  <li>Picking a target word.</li>
  <li>Context will be the word before the target.</li>
</ul>

<h3 id="nearby-1-word-skip-gram-model">Nearby-1 word (Skip gram model)</h3>

<p>The training set is created by</p>

<ul>
  <li>Picking a target word.</li>
  <li>Context will be a single word that is nearby, i.e in a range of, say 1-5 words, before/after the target.</li>
</ul>

<h2 id="word2vec">Word2Vec</h2>

<p>Word2Vec is an algorithm to train a model to perform language modeling and learning word embeddings. However, the primary purpose of this algorithm is to learn word embeddings (not concerned about accuracy of the model during language modeling). The supervised learning problem that is being solved here is to predict the target given the context.</p>

<h3 id="working">Working</h3>

<ul>
  <li>Choose a random context ($$c = $$  input word).</li>
  <li>Choose a random, but nearby (1-5 words before/after context)  as  target ($$t =$$ word to be predicted).</li>
  <li>Calculate the softmax probability vector (probabilities must add up to 1) as follows.</li>
</ul>

<h3 id="cost-function">Cost function</h3>

<p>$$
Softmax \ Probability(t|c) = \frac{ e^{w_t^T \ e_c} }{ \Sigma_{j=1}^{10K} e^{w_j^T \ e_c} }
$$</p>

<p>Here,</p>

<ul>
  <li>$$e_c$$ encodings of the context word</li>
  <li>$$w_t$$ weights for the target encoding</li>
  <li>$$w_j$$ weight of the $$j^{th}$$ word in the dictionary</li>
</ul>

<p><strong>Note on the equation</strong></p>

<ul>
  <li>Numerator: Multiplies weights associated with the <strong>target</strong> $$w_t$$ with the encodings of the <strong>context</strong> $$e_c$$</li>
  <li>Denominator: sums weights from all the words multiplied with the encodings of <strong>context</strong> $$e_c$$</li>
  <li>The model is slow as it requires computing using all words in the dictionary.</li>
</ul>

<h3 id="hierarchical-softmax-classifier">Hierarchical Softmax Classifier</h3>

<p>Consider a hierarchy of binary classifiers. The root classifier takes context as input and directs to left/right classifier to find the target word. This continues down the tree until the leaf classifier points to the target word.</p>

<h2 id="negative-sampling">Negative Sampling</h2>

<p>Similar to WordVec, Negative sampling also has the objective of learning word embeddings. Unlike WordVec, the supervised learning problem here is different. A sample training set may look as follows</p>

<table>
  <thead>
    <tr>
      <th>Context</th>
      <th>Target</th>
      <th>Label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>orange</td>
      <td>juice</td>
      <td>1</td>
    </tr>
    <tr>
      <td>orange</td>
      <td>king</td>
      <td>0</td>
    </tr>
    <tr>
      <td>orange</td>
      <td>of</td>
      <td>0</td>
    </tr>
    <tr>
      <td>orange</td>
      <td>book</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<h4 id="training-set-creation">Training set creation</h4>

<ul>
  <li>Create a (context, target) word pair from the sentence and label this pair as <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>A label of <code class="language-plaintext highlighter-rouge">1</code> indicates target matches context. A label of <code class="language-plaintext highlighter-rouge">0</code> indicates mismatch.</li>
  <li>Create K negative target samples
    <ul>
      <li>Pick a random word from the dictionary</li>
      <li>Create the pair (context, random-word) and label this pair as <code class="language-plaintext highlighter-rouge">0</code></li>
      <li>Since we are picking a random word, it is possible (though less likely) that the random word is actually a match to the context.</li>
    </ul>
  </li>
  <li>This way we have chosen one positive example and generated K negative examples.</li>
</ul>

<p>In essence, a single set will have (K+1) word pairs. We shall have several such sets in the training dataset.</p>

<h3 id="supervised-learning-problem">Supervised learning problem</h3>

<p>The supervised learning problem here is to take input $$X$$ consisting of word pairs and predict the corresponding label $$y$$ (<code class="language-plaintext highlighter-rouge">1/0</code>).
$$
P(y=1 | c,t) = sigmoid (w_t^T \ e_c)
$$</p>

<h3 id="working-1">Working</h3>

<ul>
  <li>In general, a binary classifier takes input features $$x$$, has weights $$w$$ to predicts a binary $$y_cap$$. Based on expected $$y$$, the weights $$w$$ are adjusted. This is how the binary classifier <strong>learns</strong>.</li>
  <li>Consider 10K binary classifiers, one for each word in the dictionary.</li>
  <li>A single binary classifier for a word say ‘king’, takes input features (encoding of a word $$e_{i}$$), has weights $$w_{king}$$ and shall predict a binary $$y_cap$$ . <code class="language-plaintext highlighter-rouge">1</code> if the encodings match with the ‘king’. <code class="language-plaintext highlighter-rouge">0</code> if input encodings do not match with the ‘king’.</li>
  <li>Lets say we input encodings of ‘orange’ $$e_{orange}$$ to ‘king’ and ‘juice’ classifiers
    <ul>
      <li>We go to the ‘king’ classifier and say, <em>“I have a word, that is high on fruit and low on royalty. Will you be the target?”</em>. The ‘king’ classifier says <em>“Not a chance, No”</em>.</li>
      <li>We go to the ‘juice’ classifier and say, <em>“I have a word, that is high on fruit and low on royalty. Will you be the target?”</em>. The ‘juice’ classifier says <em>“I am already impressed, Yes”</em>.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>In essence, for each set of (K+1) examples, the same context encoding is given to (K+1) classifiers. Only one is expected to say ‘yes’ and others are expected to say ‘no’. Since we have a labeled set, the weights of the classifiers are accordingly adjusted , thus training these (K+1) classifiers per set.</p>
</blockquote>

<h3 id="selecting-negative-targets">Selecting negative targets</h3>

<p>Using empirical frequency of words (Frequency of occurrence in real world) as-is will have more words like ‘the’, ‘of’, ‘is’, etc. So, below formula is used.</p>

<p>Let,</p>

<ul>
  <li>f(w) be represent the empirical frequency for word ‘w’.</li>
  <li>$$P(w)$$ be the probability of choosing word ‘w’</li>
</ul>

<p>$$
P(w_i) = \frac{f(w_i)^{3/4}}{\Sigma_1^{10K} \  f(w_j)^{3/4}}
$$</p>

<h2 id="glove-global-vectors-algorithm">GloVe (Global Vectors) Algorithm</h2>

<p>GloVe algorithm, short for, Global Vectors for vector representation, is not used as much as Word2Vec, but it is simpler.</p>

<p>A crucial element of the glove algorithm defines is the matrix $$X_{ij}$$</p>

<ul>
  <li>The number of times the $$i^{th}$$ word (context) appears <strong>in the context of</strong> the $$j^{th}$$ word (target) in the corpus (large number of sentences).</li>
  <li>It depends on the definition of the <strong>context</strong>
    <ul>
      <li>If context is defined as one word being in proximity (1-10 words range) of the other, then $$X_{ij} = X_{ji}$$ . Checking the number of times ‘orange’ appears in context of ‘juice’ would be same as checking the number of times ‘juice’ appears in the context of ‘orange’.</li>
      <li>If context is defined as $$i^{th}$$ word appearing just before the $$j^{th}$$ word, then $$X_{ij}$$ is not symmetric.</li>
    </ul>
  </li>
</ul>

<h3 id="cost-function-1">Cost function</h3>

<p>$$
J = \Sigma_{i=1}^{10K} \  \Sigma_{j=1}^{10K} \left[ \ f(X_{ij})  ( w_i \ e_j + b_i - b_j - log(X_{ij}) ) \ \right]
$$</p>

<p>Here,</p>

<ul>
  <li>$$X_{ij}$$ measures how many times the $$i^{th}$$ word appears in context of $$j^{th}$$ word. If this value is closer to the product $$w_i e_j$$ then cost $$J$$ reduces.</li>
  <li>The equation means how <strong>related</strong> are words $$i$$ and $$j$$ as measured by how <strong>often</strong> they occur with each other.</li>
  <li>$$f(X_{ij})$$ is the weighting term
    <ul>
      <li>$$X_{ij}$$  could be zero and $$ log(0) = -\infin$$ , in this case, $$f(X_{ij})$$ will be zero.</li>
      <li>Based on various heuristics the weights of very frequent words like ‘it’, ‘and’, ‘the’ or very rare words like ‘durian’ are calculated.</li>
    </ul>
  </li>
  <li>$$w$$ and $$e$$ play symmetric roles. So, finally the encodings are calculated as $$ e_i := \frac{e_i + w_i}{2}$$</li>
</ul>

<h1 id="applications-of-word-embedding">Applications of word embedding</h1>

<h2 id="sentiment-classification">Sentiment Classification</h2>

<p>Sentiment classification is about analyzing a text and rating it. For example, the model could be analyzing the review of a restaurant and outputting a start rating from 1 to 5.</p>

<h3 id="simple-sentiment-classification-model">Simple sentiment classification model</h3>

<p><strong>Working</strong></p>

<ul>
  <li>Use a pre-trained word embedding matrix $$E$$ (Trained over billions of words from various books/docs/newspapers)</li>
  <li>Get the word embeddings, for each word, in the given input review text</li>
  <li>Average all the word embeddings to create a single vector of word embedding (<code class="language-plaintext highlighter-rouge">np.mean(E_sub, axis=1)</code>)</li>
  <li>Feed this to a hidden layer and then to softmax to predict $$y_pred$$ 5 probabilities.</li>
</ul>

<p><strong>Limitation</strong></p>

<p>This algorithm works well on typical reviews. However, a limitation of the algorithm is that it does not take care of order of the words. For example, <em>“Completely lacking in good service, good taste or good ambiance”</em>  is probably a 1-star review. However, multiple occurrences of word <em>“good”</em> might mislead the algorithm into considering this as a positive, 4-star review.</p>

<h3 id="rnn-sentiment-classification-model">RNN sentiment classification model</h3>

<p>An RNN that passes the learning from previous time steps to the next can be used to learn order of words. In particular, the embeddings of each word is passed as input $$x^{\prec t \succ}$$ . The output from the final activation is then fed to softmax to make the prediction as given below.</p>

<p><img src="/assets/images/dl/RNN_Sentiment.png" alt="WordEmbedding_Sentiment" /></p>

<p>This is an example of <strong>“Many to One”</strong> RNN model. A model like this takes care of order. Like the previous model, E is taken from a standard pre-trained model (Trained over billions of words from various books/docs/newspapers).  So, a test review that uses another word like “void” instead of “lacking” shall also be classified correctly, even if the word “void” was not a part of training dataset. This works because E is taken from the standard model and has already learnt encodings, than what the current training has to offer.</p>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="dl-rnn" /><summary type="html"><![CDATA[DRAFT]]></summary></entry><entry><title type="html">Recurrent neural networks (RNN)</title><link href="/dl-rnn/2018/10/11/rnn-introduction.html" rel="alternate" type="text/html" title="Recurrent neural networks (RNN)" /><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><id>/dl-rnn/2018/10/11/rnn-introduction</id><content type="html" xml:base="/dl-rnn/2018/10/11/rnn-introduction.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ol>
      <li><a href="#application-of-sequence-models" id="markdown-toc-application-of-sequence-models">Application of sequence models</a></li>
      <li><a href="#overview-of-sequence-models" id="markdown-toc-overview-of-sequence-models">Overview of sequence models</a>        <ol>
          <li><a href="#typical-model" id="markdown-toc-typical-model">Typical Model</a></li>
          <li><a href="#notation" id="markdown-toc-notation">Notation</a></li>
          <li><a href="#representing-a-word" id="markdown-toc-representing-a-word">Representing a word</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#recurrent-neural-network" id="markdown-toc-recurrent-neural-network">Recurrent Neural Network</a>    <ol>
      <li><a href="#name-entity-recognition-example" id="markdown-toc-name-entity-recognition-example">Name entity recognition example</a></li>
      <li><a href="#why-regular-nn-does-not-solve-the-problem" id="markdown-toc-why-regular-nn-does-not-solve-the-problem">Why regular NN does not solve the problem</a></li>
      <li><a href="#closer-look-at-rnn" id="markdown-toc-closer-look-at-rnn">Closer look at RNN</a></li>
      <li><a href="#limitation-of-rnn" id="markdown-toc-limitation-of-rnn">Limitation of RNN</a></li>
      <li><a href="#computations" id="markdown-toc-computations">Computations</a>        <ol>
          <li><a href="#forward-propagation-equations" id="markdown-toc-forward-propagation-equations">Forward propagation equations</a></li>
          <li><a href="#choice-of-activation-function" id="markdown-toc-choice-of-activation-function">Choice of activation function</a></li>
          <li><a href="#simplified-notation" id="markdown-toc-simplified-notation">Simplified Notation</a></li>
          <li><a href="#back-propagation-though-time" id="markdown-toc-back-propagation-though-time">Back propagation though time</a></li>
        </ol>
      </li>
      <li><a href="#types-of-rnn" id="markdown-toc-types-of-rnn">Types of RNN</a></li>
    </ol>
  </li>
  <li><a href="#language-model-using-rnn" id="markdown-toc-language-model-using-rnn">Language model using RNN</a>    <ol>
      <li><a href="#training-a-language-model" id="markdown-toc-training-a-language-model">Training a language model</a>        <ol>
          <li><a href="#tokenize-sentences-in-the-training-set" id="markdown-toc-tokenize-sentences-in-the-training-set">Tokenize sentences in the training set</a></li>
          <li><a href="#training-the-model" id="markdown-toc-training-the-model">Training the model</a></li>
        </ol>
      </li>
      <li><a href="#cost-function" id="markdown-toc-cost-function">Cost Function</a></li>
      <li><a href="#probability-of-the-sentence" id="markdown-toc-probability-of-the-sentence">Probability of the sentence</a></li>
      <li><a href="#sampling-a-language-model" id="markdown-toc-sampling-a-language-model">Sampling a language model</a>        <ol>
          <li><a href="#what-is-sampling" id="markdown-toc-what-is-sampling">What is sampling</a></li>
        </ol>
      </li>
      <li><a href="#working-of-language-model-sampling" id="markdown-toc-working-of-language-model-sampling">Working of language model sampling</a></li>
      <li><a href="#training-a-character-language-model" id="markdown-toc-training-a-character-language-model">Training a character language model</a></li>
    </ol>
  </li>
  <li><a href="#vanishing-gradients-with-rnn" id="markdown-toc-vanishing-gradients-with-rnn">Vanishing gradients with RNN</a>    <ol>
      <li><a href="#gated-recurrent-unit-gru" id="markdown-toc-gated-recurrent-unit-gru">Gated Recurrent Unit (GRU)</a>        <ol>
          <li><a href="#simplified-gru" id="markdown-toc-simplified-gru">Simplified GRU</a></li>
          <li><a href="#understanding-simplified-gru" id="markdown-toc-understanding-simplified-gru">Understanding simplified GRU</a></li>
          <li><a href="#more-memory-cells-more-gates-more-activations" id="markdown-toc-more-memory-cells-more-gates-more-activations">More memory cells, more gates, more activations</a></li>
          <li><a href="#full-gru" id="markdown-toc-full-gru">Full GRU</a></li>
        </ol>
      </li>
      <li><a href="#long-short-term-memory-lstm" id="markdown-toc-long-short-term-memory-lstm">Long Short Term Memory (LSTM)</a>        <ol>
          <li><a href="#lstm-cell" id="markdown-toc-lstm-cell">LSTM Cell</a></li>
          <li><a href="#equations" id="markdown-toc-equations">Equations</a></li>
          <li><a href="#understanding-lstm" id="markdown-toc-understanding-lstm">Understanding LSTM</a></li>
        </ol>
      </li>
      <li><a href="#chaining" id="markdown-toc-chaining">Chaining</a></li>
      <li><a href="#gru-vs-lstm" id="markdown-toc-gru-vs-lstm">GRU vs LSTM</a></li>
    </ol>
  </li>
  <li><a href="#exploding-gradients-with-rnn" id="markdown-toc-exploding-gradients-with-rnn">Exploding gradients with RNN</a></li>
  <li><a href="#bidirectional-recurrent-neural-networks-brnn" id="markdown-toc-bidirectional-recurrent-neural-networks-brnn">Bidirectional Recurrent Neural Networks (BRNN)</a>    <ol>
      <li><a href="#equations-1" id="markdown-toc-equations-1">Equations</a></li>
      <li><a href="#disadvantange-of-brnn" id="markdown-toc-disadvantange-of-brnn">Disadvantange of BRNN</a></li>
    </ol>
  </li>
  <li><a href="#deep-rnn" id="markdown-toc-deep-rnn">Deep RNN</a></li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>Sequence models process inputs that are a function of time (like voice) and produce different types of output (like text) as described below. Sequence models like recurrent neural networks (RNN) have transformed speech recognition, natural language processing (NLP).</p>

<h2 id="application-of-sequence-models">Application of sequence models</h2>

<table>
  <thead>
    <tr>
      <th>Application</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Speech recognition</td>
      <td>Voice to text</td>
    </tr>
    <tr>
      <td>Music generation</td>
      <td>Genre of music to music</td>
    </tr>
    <tr>
      <td>Sentiment classification</td>
      <td>Analyze the nature of text. Eg: Text to star rating.</td>
    </tr>
    <tr>
      <td>DNA sequence analysis</td>
      <td>DNA sequence to type. Eg: DNA strip to type of protein.</td>
    </tr>
    <tr>
      <td>Machine translation</td>
      <td>Translate one language to another</td>
    </tr>
    <tr>
      <td>Video activity recognition</td>
      <td>Video to description, summary or type of the video</td>
    </tr>
    <tr>
      <td>Name entity recognition</td>
      <td>Identify names of people in a text</td>
    </tr>
  </tbody>
</table>

<p>We see that different types of application of sequence models type various lengths of input ($$x$$)  and produce various lengths of output $$y$$. Music generation, for example, takes a single input (genre) and produces the entire music itself.</p>

<h2 id="overview-of-sequence-models">Overview of sequence models</h2>

<h3 id="typical-model">Typical Model</h3>

<p>A typical sequence model consists of input broken into individual tokens, where each token forms a <strong>feature</strong> represented by $$x^{\prec i \succ}$$. Each feature shall have corresponding output represented by $$y^{\prec i \succ}$$. Each feature shall also produce an output activation $$a^{\prec i \succ}$$ which is fed to the next layer $$L_{i+1}$$.</p>

<h3 id="notation">Notation</h3>

<p><img src="/assets/images/dl/SequenceModel.png" alt="SequenceModel" /></p>

<table>
  <thead>
    <tr>
      <th>Notation</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>$$x^{\prec i \succ}$$</td>
      <td>$$i^{th}$$ feature input. In a sentence, it would be the $$i^{th}$$ word.</td>
    </tr>
    <tr>
      <td>$$y_cap^{\prec i \succ}$$</td>
      <td>$$i^{th}$$ output prediction. In a sentence, it would be the output after processing the $$i^{th}$$ word.</td>
    </tr>
    <tr>
      <td>$$y^{\prec i \succ}$$</td>
      <td>$$i^{th}$$ output label. In a sentence, it would be the actual output after processing the $$i^{th}$$ word.</td>
    </tr>
    <tr>
      <td>$$ a^{\prec i \succ} $$</td>
      <td>$$i^{th}$$ activation produced after taking $$ x^{\prec i \succ} $$ and $$ a^{\prec i-1 \succ} $$ as inputs</td>
    </tr>
    <tr>
      <td>$$x$$</td>
      <td>A single input consisting of all feature. An entire sentence.</td>
    </tr>
    <tr>
      <td>$$y$$</td>
      <td>A single output consisting of output of all feature.</td>
    </tr>
    <tr>
      <td>$$ X^{ (i)\prec t \succ } $$</td>
      <td>From input matrix X, select $$ t^{th} $$ feature in the  $$i^{th}$$ instance. The $$ t^{th} $$ word in the $$i^{th}$$ sentence</td>
    </tr>
    <tr>
      <td>$$ Y^{ (i)\prec t \succ } $$</td>
      <td>From output matrix Y, select $$ t^{th} $$ output in the  $$i^{th}$$ instance.</td>
    </tr>
    <tr>
      <td>$$T^{(i)}_x$$</td>
      <td>Number of input tokens (features) in the $$ i^{th} $$ instance</td>
    </tr>
    <tr>
      <td>$$T^{(i)}_y$$</td>
      <td>Number of output tokens in the $$ i^{th} $$ instance</td>
    </tr>
  </tbody>
</table>

<p>As we see above, in a sequence model, each instance (a sentence for example) can be of different length. In essence, the number of features (size of $$x$$) and number of output (size of $$y$$) varies for each instance. This is different from all the existing model where the input/output size have been the same across instances.</p>

<h3 id="representing-a-word">Representing a word</h3>

<p>Any word $$x^{\prec i \succ}$$ is represented using a <strong>one-hot encoding of the index</strong> at which the word is found in the dictionary. For example, if the word “harry” is found at index 4075 in a dictionary of 10,000 words, then the vector will have all zeros with a one at index 4075.</p>

<h1 id="recurrent-neural-network">Recurrent Neural Network</h1>

<h2 id="name-entity-recognition-example">Name entity recognition example</h2>

<p>Consider the following two sentences</p>

<ol>
  <li>He said “Teddy bears are on sale”</li>
  <li>He said “Teddy Roosevelt was a great president”</li>
</ol>

<p>Consider a “Name entity recognition” problem where words that are part of human names needs to be identified. For example, the first sentence has 7 words, each acting as a feature. The output is a vector of 7 numbers, one for each feature, indicating if the word is a human name or not. The first sentence shall produce an output $$ y = \left[ 0, 0, 0, 0, 0, 0, 0 \right] $$. The second sentence shall produce the output $$ y = \left[ 0, 0, 1, 1, 0, 0, 0, 0 \right] $$</p>

<p>The model can detect that ‘Teddy’ (a feature) is indeed a part of human name only after encountering ‘president’ (another feature). This means knowledge of having analyzed a feature needs to be passed on for further analysis.</p>

<h2 id="why-regular-nn-does-not-solve-the-problem">Why regular NN does not solve the problem</h2>

<p>A typical NN (or CNN) cannot be used to model the above problems because</p>

<ul>
  <li><strong>Fixed input and output size:</strong> A typical network will require the feature count (word count in all sentences) to be the same. In a sequence model each instance has different feature count. Fixing a max and padding remaining with null is also not possible. Same is the case with output.</li>
  <li><strong>Learning from one feature not shared with other:</strong>  In typical NN, a set of features $$x$$ are collectively analyzed and influence the output $$y$$. Here, analysis of each feature influences the other.</li>
</ul>

<h2 id="closer-look-at-rnn">Closer look at RNN</h2>

<p>Consider the calculation of $$y^{\prec 3 \succ}$$ corresponding to input feature $$x^{\prec 3 \succ}$$ indexing the word “Teddy”</p>

<ul>
  <li>$$y^{\prec 3 \succ}$$ is generated after analyzing $$a^{\prec 3 \succ}$$</li>
  <li>$$a^{\prec 3 \succ}$$ is generated after analyzing both $$a^{\prec 2 \succ}$$ (input from previous feature analysis) and  $$x^{\prec 3 \succ}$$  (current feature input)</li>
  <li>Similarly, $$a^{\prec 2 \succ}$$ is generated after analyzing $$a^{\prec 1 \succ}$$ and $$x^{\prec 2 \succ}$$</li>
  <li>In essence, a feature can be analyzed and corresponding output is produced only after <strong>all previous features</strong> are analyzed. So, the analysis of all the features that came earlier influences the current analysis.</li>
  <li>In terms of time series, if the first feature was analyzed at time interval $$t_1$$ the second feature is analyzed only at time interval $$t_2$$.</li>
</ul>

<blockquote>
  <p>Each feature analysis happens at a different time step.</p>
</blockquote>

<h2 id="limitation-of-rnn">Limitation of RNN</h2>

<p>An RNN has analysis from earlier feature to base the current analysis. However, it does not have analysis from features that appear later. Considering the ‘Name entity recognition’ problem described above, unless the word ‘president’ (that comes much later) is analyzed the word ‘Teddy’ (that comes much earlier) cannot be marked as a person.</p>

<h2 id="computations">Computations</h2>

<p>In a typical NN calculations, input activation is multiplied by weight (parameter), a bias is added to get $$z$$. The $$z$$ is then fed to an  activation function (like ReLU, tanh or sigmoid) to obtain the output activation.</p>

<h3 id="forward-propagation-equations">Forward propagation equations</h3>

<p>$$
\begin{aligned}
a^{\prec t \succ} &amp;= g(W_{aa} \ a^{\prec t-1 \succ} + W_{ax} \ x^{\prec t \succ} + b_a ) <br />
y^{\prec t \succ} &amp;= g(W_{ya} \ a^{\prec t \succ}   + b_y ) <br />
\end{aligned}
$$</p>

<p>Consider all blocks to be identical. Lets say $$a$$ is a 100 dimensional vector. Let $$x$$ be a 10,000 dimensional vector (one-hot index for a word’s index).</p>

<p>Consider $$ W_{aa} \ a^{\prec t-1 \succ} $$</p>
<ul>
  <li>All the 100 elements in $$a^{\prec t-1 \succ} $$ are multiplied by different weights to produce one resultant element (similar to single neuron of next layer)</li>
  <li>$$ W_{aa} \ a^{\prec t-1 \succ} $$ should be a vector of 100 elements. This is because LHS is $$a^{\prec t \succ}$$ which is a 100 element vector.</li>
  <li>This means $$W_{aa}$$ is a matrix of dimension $$ (100 \times 100) $$</li>
</ul>

<p>Consider $$ W_{ax} \ x^{\prec t \succ} ​$$</p>
<ul>
  <li>All the 10,000 elements in $$x^{\prec t \succ} $$ are multiplied by different weights to produce one resultant element.</li>
  <li>$$ W_{ax} \ x^{\prec t \succ} $$ should be a vector of 100 elements. This is because LHS is a^{\prec t \succ} which is a 100 element vector.</li>
  <li>This means $$W_{ax}$$ is a matrix of dimension $$ (100 \times 10000) $$</li>
</ul>

<h3 id="choice-of-activation-function">Choice of activation function</h3>

<ul>
  <li>For calculating $$a$$ typically $$tanh$$ is a common choice.</li>
  <li>For calculating $$y$$,
    <ul>
      <li>Binary classification problem $$-$$ <code class="language-plaintext highlighter-rouge">sigmoid</code> is the activation function.</li>
      <li>K way classification problem $$-$$ <code class="language-plaintext highlighter-rouge">softmax</code> is the activation function.</li>
    </ul>
  </li>
</ul>

<h3 id="simplified-notation">Simplified Notation</h3>

<p>Conventions</p>
<ul>
  <li>$$ W_{a} $$ be a matrix got by horizontally concatenating $$ W_{aa} $$ and $$ W_{ax} $$</li>
  <li>$$ \left[ a^{\prec t-1 \succ}, x^{\prec t \succ} \right] $$ be a matrix got by vertically concatenating $$ a^{\prec t-1  \succ} $$ and  $$ x^{\prec t \succ} ​$$</li>
</ul>

<p>$$
\begin{aligned}
a^{\prec t \succ} &amp;= g(W_{a} \left[ a^{\prec t-1 \succ}, \ x^{\prec t \succ}\right] + b_a ) <br />
y^{\prec t \succ} &amp;= g(W_{y} \ a^{\prec t \succ}   + b_y ) <br />
\end{aligned}
$$</p>

<blockquote>
  <p>The same weight matrix $$W_{a}, \ W_{y}$$ and bias $$ b_a, b_y $$ are used/adjusted for the entire time series.</p>
</blockquote>

<h3 id="back-propagation-though-time">Back propagation though time</h3>

<p>Most of the library will automatically calculate the back propagation. However, below is the intuition. Back propagation is by differentiating the cost function. The cost function for an RNN is the summation of the cost functions of individual time series.
$$
\begin{aligned}
J(y_cap^{\prec t \succ}, y^{\prec t \succ}) &amp;= - \left[ y^{\prec t \succ} \ log(y_cap^{\prec t \succ})   + (1- y^{\prec t \succ} ) \ log(1 - y_cap^{\prec t \succ})  \right] <br />
J &amp;= \Sigma^{T_y}_{t=1} \left[ J(y_cap^{\prec t \succ}, y^{\prec t \succ}) \right] <br />
\end{aligned}
$$</p>

<p>Using gradient descent the weights $$W_{a}, \ W_{y}$$  are adjusted.</p>

<h2 id="types-of-rnn">Types of RNN</h2>

<p>So far we have seen that that number of input tokens $$T_x$$ are same as the number of output tokens $$T_y$$. However, the input/output lengths could be different $$-$$ A machine translation that translates French to English.</p>

<p><img src="/assets/images/dl/RNNTypes.png" alt="RNNTypes" /></p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Application</th>
      <th>Detail</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>One to One</td>
      <td>Any typical NN</td>
      <td>Present for the sake of completeness, it takes one input and produces one output.</td>
    </tr>
    <tr>
      <td>One to Many</td>
      <td>Music Generation</td>
      <td>Using a single input like the genre of the music, the entire music is generated. <br />The output prediction $$y_cap$$ is fed as input in the next time step.</td>
    </tr>
    <tr>
      <td>Many to One</td>
      <td>Sentiment Classification</td>
      <td>Classify input text, for example predict rating based on comment made about a movie.<br />Many words acting as input result in a single rating as output.</td>
    </tr>
    <tr>
      <td>Many to Many (N-N)</td>
      <td>Name Entity Recognition</td>
      <td>Identify and locate names in a text. <br />Words of a sentence act as input, for each word, prediction indicates if the word is a person’s name or not. <br />Note that number of inputs matches the number of outputs.</td>
    </tr>
    <tr>
      <td>Many to Many (M-N)</td>
      <td>Machine translation</td>
      <td>Convert a sentence from language to another.<br />Words in one language result in fewer or more words in another language.</td>
    </tr>
  </tbody>
</table>

<h1 id="language-model-using-rnn">Language model using RNN</h1>

<p>A language model takes an input sentence and outputs a probability for the sentence (sequence of words to be together). A higher probability may indicate a sentence that is more likely to be accurate. Consider a speech recognition system that needs to output text taking the voice as input.</p>

<p>Consider the following two interpretations of the voice</p>

<ol>
  <li>The apple and pair salad</li>
  <li>The apple and pear salad</li>
</ol>

<p>A good speech recognition system should be able to determine that probability of 1st sentence is lesser than second and hence choose the second interpretation.</p>

<h2 id="training-a-language-model">Training a language model</h2>

<p>Building a language model requires a large corpus of English text.</p>

<h3 id="tokenize-sentences-in-the-training-set">Tokenize sentences in the training set</h3>

<ul>
  <li>Divide the sentence into words</li>
  <li>Add a <code class="language-plaintext highlighter-rouge">&lt;EOS&gt;</code> token at the end to indicate “End of sentence”. This is to enable models to even predict when sentences end. You may ignore punctuations or add ‘period’ as a token.</li>
  <li>Add a <code class="language-plaintext highlighter-rouge">&lt;UNK&gt;</code> to indicate ‘unknown word’ for a token not present in the dictionary.</li>
  <li>This means <code class="language-plaintext highlighter-rouge">&lt;EOS&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;UNK&gt;</code> are part of the dictionary.</li>
  <li>Finally, each word in the input sentence is mapped to an index (one-hot representation) in the dictionary.</li>
</ul>

<h3 id="training-the-model">Training the model</h3>

<p>Let <em>‘Cats average 15 hours of sleep a day’</em> be the first training sentence. The sentence has 8 words. After adding <code class="language-plaintext highlighter-rouge">&lt;EOS&gt;</code> at the end, we have 9 tokens.</p>

<p>Time step $$t_1$$</p>

<ul>
  <li>The dummy $$ a^{\prec 0 \succ} $$ is zero vector as usual. Here the input $$ x^{\prec 1 \succ} $$ shall also be a zero vector</li>
  <li>The output $$ y_cap^{\prec 1 \succ} $$ is a vector having softmax output with 10,002 classes (Assuming 10K words in dictionary + EOS + UNK). A softmax outputs a probability for each class that adds up to 1. The class with the highest probability will be the predicted word.</li>
  <li>Predicted word probability = <code class="language-plaintext highlighter-rouge">np.max(y_cap[1])</code>. Predicted word index = <code class="language-plaintext highlighter-rouge">np.argmax (y_cap[1])</code></li>
  <li>The probability got  from $$ y_cap^{\prec 1 \succ} $$  is <code class="language-plaintext highlighter-rouge">P(&lt;word&gt;|'')</code>. This gives the <code class="language-plaintext highlighter-rouge">&lt;word&gt;</code> that has the highest probability for beginning a sentence.</li>
  <li>The time step also produces output activation $$ a^{\prec 1 \succ} $$</li>
</ul>

<p>Time step $$t_2$$</p>

<ul>
  <li>The input $$ a^{\prec 1 \succ} $$ is the output produced by the previous time step.</li>
  <li>The input $$ x^{\prec 2 \succ} $$ given here is the expected first word. In the example it is ‘Cats’. At time step $$t_1$$ we are telling the model that we expected ‘Cats’ to be the first word. We now ask the model to predict the next word. Essentially, during training, the input word given to the <strong>next time step</strong> is the expected word for the previous time step.</li>
  <li>Predicted word probability = <code class="language-plaintext highlighter-rouge">np.max(y_cap[2])</code>. Predicted word index = <code class="language-plaintext highlighter-rouge">np.argmax (y_cap[2])</code></li>
  <li>The probability got  from $$ y_cap^{\prec 2 \succ} $$  is <code class="language-plaintext highlighter-rouge">P(&lt;word&gt;|'Cats')</code>. This gives the next <code class="language-plaintext highlighter-rouge">&lt;word&gt;</code> that has the highest probability given that the first word was ‘Cats’</li>
  <li>The time step also produces output activation $$ a^{\prec 2 \succ} $$</li>
</ul>

<p>Time step $$t_3$$</p>
<ul>
  <li>The probability got  from $$ y_cap^{\prec 3 \succ} ​$$  is <code class="language-plaintext highlighter-rouge">P(&lt;word&gt;|'Cats average')</code>. This gives the next <code class="language-plaintext highlighter-rouge">&lt;word&gt;</code> that has the highest probability given that the first part of the sentence was ‘Cats average’</li>
  <li>The time step also produces output activation $$ a^{\prec 3 \succ} $$</li>
</ul>

<blockquote>
  <p>The model trains by giving the input $$ x^{\prec t \succ} $$ which is the expected output in the previous step $$ y^{\prec t-1 \succ} $$. So, $$ x^{\prec t \succ} $$ = $$ y^{\prec t-1 \succ} $$</p>
</blockquote>

<h2 id="cost-function">Cost Function</h2>

<p>The cost function for a time step is similar to the cost function for any softmax.</p>

<p>$$
\begin{aligned}
J(y_cap^{\prec t \succ}, y^{\prec t \succ}) &amp;= - \ \Sigma \left[ y^{\prec t \succ} \ log(y_cap^{\prec t \succ}) \right] <br />
J &amp;= \Sigma^{T_y}_{t=1} \left[ J(y_cap^{\prec t \succ}, y^{\prec t \succ}) \right] <br />
\end{aligned}
$$</p>

<h2 id="probability-of-the-sentence">Probability of the sentence</h2>

<p>The probability of the sentence is obtained by multiplying all the predicted class’s probability.</p>

<p>$$
P(sentence) = np.max(y_cap^{\prec 1 \succ}) \ * \ np.max(\ y_cap^{\prec 2 \succ}) * \ … * \ np.max(\ y_cap^{\prec T_y \succ})
$$</p>

<h2 id="sampling-a-language-model">Sampling a language model</h2>

<p>After having trained a language model, we could now use it to make some generate several sentences formed by random sampling.</p>

<h3 id="what-is-sampling">What is sampling</h3>

<p>Consider a typical survey. We could randomly choose 100 people to provide a movie review. That would not give the best idea about the peoples opinion of the movie. If most of the people we survey are kids or most senior citizens that would be even worse. We need a mix of people, but not a random mix either (completely random is like guessing).</p>

<p>We will have to consider a typical probability distribution, of different ages of people going to the movie and accordingly decide how many people, of each age group, should be included to make the 100, we plan to survey.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="s">'In'</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="s">'The'</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="s">'The'</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="s">'A'</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="s">'In'</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'The'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'Once'</span><span class="p">],</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="n">array</span><span class="p">([</span><span class="s">'In'</span><span class="p">,</span> <span class="s">'The'</span><span class="p">,</span> <span class="s">'The'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'In'</span><span class="p">,</span> <span class="s">'The'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'A'</span><span class="p">,</span> <span class="s">'The'</span><span class="p">,</span> <span class="s">'The'</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'&lt;U4'</span><span class="p">)</span>
</code></pre></div></div>

<p>In the above example, we have a list of 4 words and corresponding probability of a sentence beginning with the word.  Running the <code class="language-plaintext highlighter-rouge">random.choice</code> shall every time pick a world from the list but based on the probability distribution. What this means is that there is a 40% chance the word picked is ‘The’ while there is only ‘10%’ chance it is ‘In’.</p>

<h2 id="working-of-language-model-sampling">Working of language model sampling</h2>

<p>Time step $$t_1$$</p>

<ul>
  <li>Similar to the training, we begin by providing empty vectors for  $$ x^{\prec 1 \succ} $$  and  $$ a^{\prec 0 \succ} $$ as input.</li>
  <li>The resultant  $$ y_cap^{\prec 1 \succ} $$ , is a vector having probability for every word in the dictionary (to be the first word of a sentence). It is very likely that ‘The’ has the highest probability.</li>
  <li>Instead of simply picking the word with highest probability, we pick a random word based on probability distribution in $$ y_cap^{\prec 1 \succ} $$ . (A word with higher probability has a higher chance to be picked)</li>
</ul>

<p>Time step $$t_2$$</p>

<ul>
  <li>Unlike training we don’t have an expected sentence. So,  $$ x^{\prec 2 \succ} $$ will be the word picked from random distribution in the previous step.</li>
  <li>The next word is picked randomly based on the probability distribution in $$ y_cap^{\prec 2 \succ} $$</li>
</ul>

<p>This way a random sentence gets generated, The nature of the sentence shall depend on the nature of the sentences used during training.  Below is the result of sampling after having trained on two different types of sentences.</p>

<p><img src="/assets/images/dl/RNN_LangSample.png" alt="RNN_LangSample" /></p>

<p><strong>When does the time series end?</strong> The time series can end when a <code class="language-plaintext highlighter-rouge">&lt;EOS&gt;</code> token is encountered or max-length is reached.</p>

<h2 id="training-a-character-language-model">Training a character language model</h2>

<p>Instead of building a model based on words, we could also build them using characters. A model trained on characters would predict the next character based on the characters encountered thus far.</p>

<p>The disadvantages with character model are</p>

<ul>
  <li><strong>Vanishing gradient problem:</strong>  The <strong>length of the network</strong>, a typical sentence will have several words but a whole lot of characters. It is harder for a model to train how a character chosen much earlier in the model would affect what comes much later.</li>
  <li><strong>Computational Expense:</strong> A char model would be harder to train and computationally expensive.</li>
</ul>

<h1 id="vanishing-gradients-with-rnn">Vanishing gradients with RNN</h1>

<p>Consider a language modeling problem that is dealing with the following two sentences</p>

<ul>
  <li>The <strong>boy</strong> had pie on Monday, pizza on Tuesday, …, burger on Saturday and <strong>was</strong> sick on Sunday.</li>
  <li>The <strong>boys</strong> had pie on Monday, pizza on Tuesday, …, burger on Saturday and <strong>were</strong> sick on Sunday.</li>
</ul>

<p>The singular/plural word used earlier in a sentence, affecting much later in a sentence is an information that needs to be retained for long. Larger the distance, reducing gradient shall be too small to affect what was learnt much earlier.</p>

<p>The vanishing gradient problem of RNN is solved using</p>

<ul>
  <li>Gated Recurrent Unit (GRN)</li>
  <li>Long Short Term Memory (LSTM)</li>
</ul>

<h2 id="gated-recurrent-unit-gru">Gated Recurrent Unit (GRU)</h2>

<p>GRU is used to prevent the vanishing gradient problem. Lets first look at the equations of GRU and then understand how it prevents/reduces vanishing gradient problem.</p>

<h3 id="simplified-gru">Simplified GRU</h3>

<p>A simplified GRU is governed by the following equations:</p>

<p>$$
\begin{aligned}
c^{\prec 0 \succ} &amp;= a^{\prec 0 \succ} = 0 <br />
\tilde{c}^{\prec t \succ} &amp;= tanh ( W_c [c^{\prec t-1 \succ}, x^{\prec t \succ}] + b_c ) <br />
\Gamma_u &amp;= \sigma (W_u [c^{\prec t-1 \succ}, x^{\prec t \succ}] + b_u ) <br />
c^{\prec t \succ} &amp;= \Gamma_u * \tilde{c}^{\prec t \succ} + (1 - \Gamma_u) * c^{\prec t-1 \succ} <br />
a^{\prec t \succ} &amp;= c^{\prec t \succ} <br />
y^{\prec t \succ} &amp;= softmax(W_y \ a^{\prec t \succ} + b_y ) <br />
\end{aligned}
$$</p>

<h3 id="understanding-simplified-gru">Understanding simplified GRU</h3>

<ul>
  <li>
    <p>GRU algorithm provides a memory cell $$ c^{\prec t \succ} $$. Every time step has its own memory cell.</p>
  </li>
  <li>
    <p>Every time step calculates a new value $$ \tilde{c}^{\prec t \succ}$$ <em>(tilde c)</em> which is the <strong>candidate value</strong>. A candidate value is one that attempts to get stored in the memory cell.</p>
  </li>
  <li>
    <p>The memory cell is gated by $$\Gamma^{\prec t \succ}$$ (Capital, Gamma, <strong>the gate</strong>). Value of the gate is 0|1 indicating gate is close|open.</p>
  </li>
  <li>
    <p>If $$\Gamma^{\prec t \succ} == 1$$</p>

    <ul>
      <li>Gate is open</li>
      <li>The memory cell  $$ c^{\prec t \succ} $$ gets the candidate value.</li>
      <li>This means the old value is overwritten/forgotten.</li>
    </ul>
  </li>
  <li>
    <p>Else If $$\Gamma^{\prec t \succ} == 0$$</p>

    <ul>
      <li>Gate is closed</li>
      <li>The memory cell  $$ c^{\prec t \succ} $$ (almost) gets the value  $$ c^{\prec t-1 \succ} $$ (previous memory cell value).</li>
      <li>This means the old value is retained. The candidate value is discarded.</li>
      <li>Note that $$ c^{\prec t \succ} $$ will approximately (not exactly) be equal to $$ c^{\prec t-1 \succ} $$. The difference is negligible though.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>As long as the gate is closed the <strong>candidate value</strong> (that is calculated for every time step), gets discarded and the current memory cell gets a value almost same as previous. In essence, the value once memorized can be retained for long even if the time series is very long.</p>
</blockquote>

<h3 id="more-memory-cells-more-gates-more-activations">More memory cells, more gates, more activations</h3>

<p>The above describes storing a single memory in $$c^{\prec t \succ}$$. However  $$c^{\prec t-1 \succ}$$ could be a vector of memory cells. Similarly, $$\Gamma^{\prec t \succ}$$ will also be a vector of gates, for corresponding memory cell. Also, the vector size of gate is the same as vector size of activation layer.</p>

<blockquote>
  <p>len($$c^{\prec t \succ}$$) = len($$\tilde{c}^{\prec t \succ}$$) = len($$\Gamma_u^{\prec t \succ}$$)</p>
</blockquote>

<h3 id="full-gru">Full GRU</h3>

<p>A full GRU uses another gate called the relevance gate $$\Gamma_r$$ which shall indicate how relevant the previous memory cell value is for calculating the candidate value.</p>

<p>$$
\begin{aligned}
c^{\prec 0 \succ} &amp;= a^{\prec 0 \succ} = 0 <br />
\tilde{c}^{\prec t \succ} &amp;= tanh ( W_c [ \Gamma_r * c^{\prec t-1 \succ}, x^{\prec t \succ}] + b_c ) <br />
\Gamma_r &amp;= \sigma (W_r [c^{\prec t-1 \succ}, x^{\prec t \succ}] + b_r ) <br />
\Gamma_u &amp;= \sigma (W_u [c^{\prec t-1 \succ}, x^{\prec t \succ}] + b_u ) <br />
c^{\prec t \succ} &amp;= \Gamma_u * \tilde{c}^{\prec t \succ} + (1 - \Gamma_u) * c^{\prec t-1 \succ} <br />
a^{\prec t \succ} &amp;= c^{\prec t \succ} <br />
y^{\prec t \succ} &amp;= softmax(W_y \ a^{\prec t \succ} + b_y ) <br />
\end{aligned}
$$</p>

<p>GRU is the standard version used by researches. The other commonly used one is LSTM.</p>

<h2 id="long-short-term-memory-lstm">Long Short Term Memory (LSTM)</h2>

<p>LSTM is more powerful than GRU, but is more complicated and has more gates. Few equations of LSTM are similar to GRU, however there are lot many changes as given below.</p>

<h3 id="lstm-cell">LSTM Cell</h3>
<p>The diagram below provides a circuit representation of a single LSTM cell.</p>

<p><img src="/assets/images/dl/RNN_LSTM_cell.png" alt="RNN_LSTM_cell" /></p>

<h3 id="equations">Equations</h3>

<p>$$
\begin{aligned}
a^{\prec 0 \succ} &amp;= random () <br />
c^{\prec 0 \succ} &amp;= 0 <br />
\tilde{c}^{\prec t \succ} &amp;= tanh ( W_c [  a^{\prec t-1 \succ}, x^{\prec t \succ}] + b_c ) <br />
\Gamma_u &amp;= \sigma (W_u [a^{\prec t-1 \succ}, x^{\prec t \succ}] + b_u ) <br />
\Gamma_f &amp;= \sigma (W_f [a^{\prec t-1 \succ}, x^{\prec t \succ}] + b_f ) <br />
\Gamma_o &amp;= \sigma (W_o [a^{\prec t-1 \succ}, x^{\prec t \succ}] + b_o ) <br />
c^{\prec t \succ} &amp;= \Gamma_u * \tilde{c}^{\prec t \succ} + \Gamma_f * c^{\prec t-1 \succ} <br />
a^{\prec t \succ} &amp;= \Gamma_o * tanh(c^{\prec t \succ}) <br />
y^{\prec t \succ} &amp;= softmax(W_y \ a^{\prec t \succ} + b_y ) <br />
\end{aligned}
$$</p>

<h3 id="understanding-lstm">Understanding LSTM</h3>

<ul>
  <li>Instead of $$c^{\prec t-1 \succ}$$ , we directly use $$a^{\prec t-1 \succ}$$</li>
  <li>The relevance gate $$\Gamma_r$$ is not used</li>
  <li>Three gates update gate, forget gate and output gate are used as opposed to just one, update gate, in GRU
    <ul>
      <li>The update gate shall gate the candidate value while the forget gate shall gate the previous memory cell value.</li>
      <li>The update and forget gates together determine the value of the current memory cell.</li>
      <li>This way the network <strong>could</strong> create a current memory cell which is the sum of candidate value and previous memory cell (No idea why?)</li>
      <li>The output gate shall gate the current memory cell (update above) to determine the value sent to next time step a^{\prec t \succ}</li>
    </ul>
  </li>
</ul>

<h2 id="chaining">Chaining</h2>
<p>LSTM (or GRU) cells can be chained to analyze the sequence of inputs from  $$x^{\prec 1 \succ}$$ to $$x^{\prec T_x \succ}$$ as shown in the diagram below.</p>

<p><img src="/assets/images/dl/RNN_LSTM_chain.png" alt="RNN_LSTM_chain" /></p>

<h2 id="gru-vs-lstm">GRU vs LSTM</h2>

<p>GRU came up later in the history compared to LSTM. 	GRU is more simpler than LSTM. LSTM is a proven model. However, GRU which is the latest is catching up.</p>

<h1 id="exploding-gradients-with-rnn">Exploding gradients with RNN</h1>

<p>Vanishing gradients is a bigger problem with RNN. Exploding gradients though equally harmful to a network can be easily addressed by <strong>Gradient Clipping</strong>. The simplest implementation of gradient clipping shall provide a min and max value. Any value greater than max is set to max. Similarly, any value lesser than min is set to min. All weights and bias terms are clipped.</p>

<h1 id="bidirectional-recurrent-neural-networks-brnn">Bidirectional Recurrent Neural Networks (BRNN)</h1>

<p>As mentioned as one of the limitations of RNN earlier, RNN cannot make a decision based on the analysis of future inputs and analysis, it can only make a decision based on previous inputs and analysis. BRNN address this limitation.</p>

<p><img src="/assets/images/dl/RNN_BRNN.png" alt="RNN_BRNN" /></p>

<p><strong>Note:</strong> This is <strong>not back propagation</strong>, it is forward propagation that takes a U turn and comes back. The prediction at any given time step is based on current input ( $$x^{\prec t \succ}$$ ), analysis from previous time step ( $$\overrightarrow{a}^{\prec t-1 \succ}$$ ) and analysis from next time step  ($$\overleftarrow{a}^{\prec t-1 \succ}$$) . The last part is missing in RNN</p>

<h2 id="equations-1">Equations</h2>

<p>$$
\begin{aligned}
\overrightarrow{a}^{\prec t \succ} &amp;= g(W_{a} \left[ \overrightarrow{a}^{\prec t-1 \succ}, \ x^{\prec t \succ}\right] + b_a ) <br />
\overleftarrow{a}^{\prec t \succ} &amp;= g(W_{a} \left[ \overleftarrow{a}^{\prec t-1 \succ}, \ x^{\prec t \succ}\right] + b_a ) <br />
y^{\prec t \succ}  &amp;= g(W_{y} \left[ \overleftarrow{a}^{\prec t \succ}, \overrightarrow{a}^{\prec t \succ} \right]   + b_y ) <br />
\end{aligned}
$$</p>

<p>Just like the forward activation $$\overrightarrow{a}^{\prec t \succ}$$ is the analysis from all previous time steps, back activation $$\overleftarrow{a}^{\prec t \succ}$$ has information from all future time step.</p>

<h2 id="disadvantange-of-brnn">Disadvantange of BRNN</h2>

<p>The disadvantange of BRNN apart from the obvious computational overhead is that it requires the entire input inorder to may prediction and cannot make predictions as the input is being received. For example, in a voice to text speech recognition system, BRNN would wait for the user to stop to make the prediction of the entire sentence.</p>

<h1 id="deep-rnn">Deep RNN</h1>

<p>Multiple version of RNNs like (Regular RNN, GRU, LSTM, BRNN) can be stacked vertically where $$y^{\prec t \succ}$$ from one layer below, is fed as $$x^{\prec t \succ}$$ to a layer on the top. Like any typical RNN, an entire horizontal layer shall use the same weights. In other words there shall be a $$W_a$$ per layer.</p>

<p><img src="/assets/images/dl/DeepRNN.png" alt="DeepRNN" /></p>

<p>We won’t have many layers of RNN stacked vertically (3 itself is pretty complex and computationally expensive). However after stacking RNN on top of each other for say 3 layers, we could have a regular deep network not connected horizontally.</p>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="dl-rnn" /><summary type="html"><![CDATA[Table of Contents Introduction Application of sequence models Overview of sequence models Typical Model Notation Representing a word Recurrent Neural Network Name entity recognition example Why regular NN does not solve the problem Closer look at RNN Limitation of RNN Computations Forward propagation equations Choice of activation function Simplified Notation Back propagation though time Types of RNN Language model using RNN Training a language model Tokenize sentences in the training set Training the model Cost Function Probability of the sentence Sampling a language model What is sampling Working of language model sampling Training a character language model Vanishing gradients with RNN Gated Recurrent Unit (GRU) Simplified GRU Understanding simplified GRU More memory cells, more gates, more activations Full GRU Long Short Term Memory (LSTM) LSTM Cell Equations Understanding LSTM Chaining GRU vs LSTM Exploding gradients with RNN Bidirectional Recurrent Neural Networks (BRNN) Equations Disadvantange of BRNN Deep RNN]]></summary></entry><entry><title type="html">Face Recognition</title><link href="/dl-cnn/2018/09/24/face-recognition.html" rel="alternate" type="text/html" title="Face Recognition" /><published>2018-09-24T00:00:00+00:00</published><updated>2018-09-24T00:00:00+00:00</updated><id>/dl-cnn/2018/09/24/face-recognition</id><content type="html" xml:base="/dl-cnn/2018/09/24/face-recognition.html"><![CDATA[<nav>
  <h4>Table of Contents</h4>
<ol id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#siamese-network" id="markdown-toc-siamese-network">Siamese Network</a></li>
  <li><a href="#triplet-loss-function" id="markdown-toc-triplet-loss-function">Triplet Loss Function</a>    <ol>
      <li><a href="#understanding-triplet-loss-function" id="markdown-toc-understanding-triplet-loss-function">Understanding triplet loss function</a></li>
      <li><a href="#choosing-images-for-a-p-and-n" id="markdown-toc-choosing-images-for-a-p-and-n">Choosing images for A, P and N</a></li>
    </ol>
  </li>
  <li><a href="#cnn-with-binary-classification" id="markdown-toc-cnn-with-binary-classification">CNN with binary classification</a></li>
  <li><a href="#face-recognition-during-test-time" id="markdown-toc-face-recognition-during-test-time">Face recognition during test time</a></li>
</ol>

</nav>

<h1 id="introduction">Introduction</h1>

<p>An application of face recognition is authenticating a person using his face rather than ID card. Another application is recommending to tag friends in an image posted on social media (like facebook) $$-$$ This requires comparing two images and outputting if it belongs to the same person or not.</p>

<p>Consider the problem of identifying the person from an image.</p>

<ul>
  <li>Lets say we are 5 friends.</li>
  <li>We could train a network model which outputs a softmax function (with 5 neurons) identifying the person. We could use thousands of images of each friend to train this network.</li>
  <li>What happens when a another friend joins the group? We may have to first get 1000s of images of the new member and retrain the entire model for 6 friends.</li>
</ul>

<p>The above method is very tedious requiring frequent retraining and also impractical to get 1000s of images every-time there is a new member.  What we need is a <strong>one-shot learning</strong>.  By just having one image of each friend in the database, we should be able to identify if a given image is one of our friend or not.</p>

<p>The solution is to train a model to output a <strong>similarity function</strong> $$-$$ How similar are two images.</p>

<ul>
  <li>A function d(img1, img2) will output a number that indicates the degree of difference between the images.</li>
  <li>A value less than a threshold indicates the images are similar.</li>
  <li>A value greater than threshold indicates the images are different.</li>
</ul>

<h1 id="siamese-network">Siamese Network</h1>

<p>A Siamese network has a single convolution that can be trained to input two images and output the distance between them.  The distance is used to determine if the images belong to the same person or not.</p>

<p>Consider a CNN that outputs a vector of values (128) per input image.</p>

<ul>
  <li>Use the same network to get the output vectors for two images (say x1, x2).</li>
  <li>The output generated by the CNN are basically the <strong>face feature encodings</strong> for each image.</li>
  <li>Compute the distance between the two vectors.</li>
  <li>The network is trained to minimize the distance between the vectors, if x1 == x2 (Same person)</li>
  <li>The network is trained to maximize the distance between the vectors, if x1 != x2 (Different people)</li>
</ul>

<p><img src="/assets/images/dl/FaceSiamese.png" alt="FaceSiamese" /></p>

<p>$$
\begin{aligned}
f(x1) &amp;= Output \ vector \ with \ encoding \ of \ image \ x1 <br />
f(x2) &amp;= Output \ vector \ with \ encoding \ of \ image \ x2 <br />
Distance \ between \ vectors \ &amp;= \ \ d(x1, x2) \ = \ ( f(x1) - f(x2) )^2
\end{aligned}
$$</p>

<blockquote>
  <p>Distance between two vectors could be the square root of the sum of squares of elements (SOP) of the vector.</p>
</blockquote>

<h1 id="triplet-loss-function">Triplet Loss Function</h1>

<p>The Siamese network defined in the previous section will work well if the the network is well trained to output good  <strong>face feature encodings</strong>. One way to well train such a network is by using <strong>triplet loss function</strong>.</p>

<ul>
  <li>The triplet loss function uses three pairs of images Anchor (A), Positive (P) and Negative
    <ul>
      <li>Anchor is the image under question</li>
      <li>Positive is image of the same person as Anchor</li>
      <li>Negative is image of a different person</li>
    </ul>
  </li>
  <li>Calculate distance between anchor and positive image vectors. $$ d(A,P) = ( f(A) - f(P) )^2 $$
    <ul>
      <li>$$d(A,P)$$ should ideally be a value close to 0</li>
    </ul>
  </li>
  <li>Calculate distance between anchor and negative image vectors. $$ d(A,N) = ( f(A) - f(N) )^2 $$
    <ul>
      <li>$$d(A,N)$$ should ideally be a value close to 1</li>
    </ul>
  </li>
  <li>Let $$\alpha​$$ be the margin (distance separating two entities) between $$ d(A,P) ​$$ and $$ d(A,N) ​$$. Greater the  $$\alpha​$$ , greater distance is enforced between same and different images.</li>
</ul>

<p>Now, a loss function (cost or error function) is a function that needs to be minimized ( $$ideally, 0$$) in order to improve the working of the algorithm.</p>

<p>$$
\begin{aligned}
\Delta &amp;= d(A,P) - d(A,N) <br />
Triplet \ Loss \ Function &amp;= J(A,P,N) = max(0,\ d(A,P) - d(A,N) + \alpha)
\end{aligned}
$$</p>

<h2 id="understanding-triplet-loss-function">Understanding triplet loss function</h2>

<ul>
  <li>$$ \Delta$$ is a  negative number (ideally, $$ 0 - 1 = -1 $$)</li>
  <li>We would want  $$\Delta$$ to be negative enough to reduce  $$\alpha$$ below zero. Essentially, we would like $$ \alpha + \Delta &lt;= 0 $$</li>
  <li>If $$\alpha = 0.9$$  and $$\Delta$$ is $$-0.8$$, the triplet loss function will evaluate $$max(0, -0.8+0.9) = max (0, 0.1) = 0.1$$</li>
  <li>If the positive and negative distances are not far enough from each other, then the triplet loss function will be greater than zero.</li>
</ul>

<blockquote>
  <p>Triplet loss function penalizes if  $$d(A,P)$$ and $$d(A,N)$$ are closer than $$\alpha$$. 
Training using triplet loss function will require choosing images from training dataset for A, P and N to minimize $$J(A,P,N)$$</p>
</blockquote>

<h2 id="choosing-images-for-a-p-and-n">Choosing images for A, P and N</h2>

<p>Let say we randomly choose triplets combinations for A, P and N. That is, we pick pick two random images of the same person for A and P and image of a flower for N. This is easy for the network to differentiate between a person and a flower. Hence, it is not trained to work well with tough data and may fail on test/real-world use cases.</p>

<p>In order to make the algorithm robust, we need to images of the same person with different styles (hair color, hair style, facial expression etc) for A and P.  The image of the person we choose for N should be pretty similar (similar nose, eyes, skin color etc) to the person chosen for A.</p>

<blockquote>
  <p>Commercial face recognition companies train on millions of images (Ranging from 10 million to even 100 million). These companies have <strong>trained</strong> networks and <strong>posted weights online</strong>. This can be used as base.</p>
</blockquote>

<h1 id="cnn-with-binary-classification">CNN with binary classification</h1>

<p>A model that uses CNN with binary classification can used as an alternative to triplet loss for image recognition.</p>

<p><img src="/assets/images/dl/Face_BinaryClass.png" alt="Face_BinaryClass" /></p>

<p>The CNN network takes two images as input and outputs a binary (1/0) output to indicate same or different images</p>

<ul>
  <li>The overall network has two convolutions $$-$$ one per image.</li>
  <li>Let $$f(x_i)$$ and $$f(x_j)$$ be the corresponding output encoding vectors.</li>
  <li>$$ f(x_i)$$ and $$f(x_j) $$ are concatenated to form $$x$$ which acts as input to a logistic regression. (Just like a logistic regression problem taking a bunch of features $$x$$ and outputting (1/0) indicating if the tumor is cancerous or not.)</li>
</ul>

<h1 id="face-recognition-during-test-time">Face recognition during test time</h1>

<p>Once a CNN for face recognition is well trained (using image pairs that are quite challenging to solve, even for human) it can be used to compare any two faces (Faces that were never seen earlier by the network).</p>

<p>In a company setting</p>

<ul>
  <li>A single image of all employees is inputted and only the <em>output feature encodings</em> are saved in database.</li>
  <li>When an employee approaches for authentication, his image from the camera passes though the CNN to obtain feature encoding.</li>
  <li>We now have feature encoding of the input image to be compared with feature encodings of all employees. This is done in one of the following ways
    <ul>
      <li>Calculate distance between encodings.</li>
      <li>Feed each pair of encodings to a Logistic Regression that gives a binary output (same or not)</li>
    </ul>
  </li>
</ul>]]></content><author><name>Raghunandan.Seshadri</name></author><category term="dl-cnn" /><summary type="html"><![CDATA[Table of Contents Introduction Siamese Network Triplet Loss Function Understanding triplet loss function Choosing images for A, P and N CNN with binary classification Face recognition during test time]]></summary></entry></feed>